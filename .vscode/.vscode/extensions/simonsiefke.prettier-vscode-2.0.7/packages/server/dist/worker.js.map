{"version":3,"sources":["webpack://service/./src/formatDocument.ts","webpack://service/./src/plugins/csharp/csharp.ts","webpack://service/./src/plugins/css/css.ts","webpack://service/./src/plugins/elm/elm.ts","webpack://service/./src/plugins/flow/flow.ts","webpack://service/./src/plugins/graphql/graphql.ts","webpack://service/./src/plugins/handlebars/handlebars.ts","webpack://service/./src/plugins/html/html.ts","webpack://service/./src/plugins/java/java.ts","webpack://service/./src/plugins/javascript/javascript.ts","webpack://service/./src/plugins/javascriptreact/javascriptreact.ts","webpack://service/./src/plugins/json/json.ts","webpack://service/./src/plugins/jsonc/jsonc.ts","webpack://service/./src/plugins/less/less.ts","webpack://service/./src/plugins/markdown/markdown.ts","webpack://service/./src/plugins/mdx/mdx.ts","webpack://service/./src/plugins/php/php.ts","webpack://service/./src/plugins/postcss/postcss.ts","webpack://service/./src/plugins/scss/scss.ts","webpack://service/./src/plugins/svelte/svelte.ts","webpack://service/./src/plugins/twig/twig.ts","webpack://service/./src/plugins/typescript/typescript.ts","webpack://service/./src/plugins/typescriptreact/typescriptreact.ts","webpack://service/./src/plugins/vue/vue.ts","webpack://service/./src/plugins/xml/xml.ts","webpack://service/./src/plugins/yaml/yaml.ts","webpack://service/./src/worker.ts","webpack://service/external \"@prettier/plugin-php\"","webpack://service/external \"@prettier/plugin-xml\"","webpack://service/external \"prettier\"","webpack://service/external \"prettier-plugin-csharp\"","webpack://service/external \"prettier-plugin-elm\"","webpack://service/external \"prettier-plugin-java\"","webpack://service/external \"prettier-plugin-svelte\"","webpack://service/external \"prettier-plugin-twig-melody\"","webpack://service/external \"vscode-languageserver-textdocument\"","webpack://service/external \"worker_threads\"","webpack://service/webpack/bootstrap","webpack://service/webpack/startup"],"names":["DEFAULT_OPTIONS","htmlWhitespaceSensitivity","semi","trailingComma","singleQuote","getOptionsCache","Object","create","getOptions","async","filePath","options","resolveConfig","filepath","getIsIgnoredCache","getIsIgnored","fileInfo","getFileInfo","withNodeModules","ignored","FORMATTING_MAP","formatCsharp","formatCss","formatElm","formatFlow","formatGraphql","formatHandlebars","formatHtml","formatJava","formatJavascript","formatJavascriptReact","formatJson","formatJsonc","formatLess","formatMarkdown","formatMdx","formatPhp","formatPostcss","formatScss","formatSvelte","formatTypescript","formatTypescriptreact","formatTwig","formatVue","formatXml","formatYaml","getFormatterCache","getFormatter","languageId","undefined","fixPath","endsWith","preloadFormatterCache","Set","preloadFormatter","has","add","formatter","isIgnored","format","formatDocument","source","token","isIgnoredPromise","formatLanguagePromise","optionsPromise","formatLanguage","Promise","all","status","formattedSource","error","textEdits","startOffset","endOffset","insertedText","document","TextDocument","range","start","positionAt","end","newText","toTextEdit","text","length","Math","min","startSame","endSame","slice","minimizeEdit","plugins","csharp","elm","parser","java","php","svelte","twig","xml","parentPort","on","result","postMessage","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"worker.js","sourcesContent":["import { format, getFileInfo, Options, resolveConfig } from 'prettier'\nimport type { TextEdit, CancellationToken } from 'vscode-languageserver'\nimport { TextDocument } from 'vscode-languageserver-textdocument'\nimport type { Formatter } from './plugins/pluginApi'\n\nconst DEFAULT_OPTIONS: Options = {\n  htmlWhitespaceSensitivity: 'ignore',\n  semi: false,\n  trailingComma: 'all',\n  singleQuote: true,\n}\n\nlet getOptionsCache: { [key: string]: Options } = Object.create(null)\nconst getOptions: (filePath: string) => Promise<Options> = async (filePath) => {\n  if (!(filePath in getOptionsCache)) {\n    let options = (await resolveConfig(filePath)) || DEFAULT_OPTIONS\n    options = { ...options, filepath: filePath }\n    getOptionsCache[filePath] = options\n  }\n  return getOptionsCache[filePath]\n}\n\nlet getIsIgnoredCache: { [key: string]: boolean } = Object.create(null)\nconst getIsIgnored: (filePath: string) => Promise<boolean> = async (\n  filePath\n) => {\n  if (!(filePath in getIsIgnoredCache)) {\n    const fileInfo = await getFileInfo(filePath, { withNodeModules: true })\n    getIsIgnoredCache[filePath] = fileInfo.ignored\n  }\n  return getIsIgnoredCache[filePath]\n}\n\nconst FORMATTING_MAP: { [key: string]: () => Promise<Formatter> } = {\n  // async ansible() {\n  //   const { formatYaml } = await import('./plugins/yaml/yaml')\n  //   return formatYaml\n  // },\n  async csharp() {\n    const { formatCsharp } = await import('./plugins/csharp/csharp')\n    return formatCsharp\n  },\n  async css() {\n    const { formatCss } = await import('./plugins/css/css')\n    return formatCss\n  },\n  async elm() {\n    const { formatElm } = await import('./plugins/elm/elm')\n    return formatElm\n  },\n  async flow() {\n    const { formatFlow } = await import('./plugins/flow/flow')\n    return formatFlow\n  },\n  async graphql() {\n    const { formatGraphql } = await import('./plugins/graphql/graphql')\n    return formatGraphql\n  },\n  async handlebars() {\n    const { formatHandlebars } = await import('./plugins/handlebars/handlebars')\n    return formatHandlebars\n  },\n  async html() {\n    const { formatHtml } = await import('./plugins/html/html')\n    return formatHtml\n  },\n  async java() {\n    const { formatJava } = await import('./plugins/java/java')\n    return formatJava\n  },\n  async javascript() {\n    const { formatJavascript } = await import('./plugins/javascript/javascript')\n    return formatJavascript\n  },\n  async javascriptreact() {\n    const { formatJavascriptReact } = await import(\n      './plugins/javascriptreact/javascriptreact'\n    )\n    return formatJavascriptReact\n  },\n  async json() {\n    const { formatJson } = await import('./plugins/json/json')\n    return formatJson\n  },\n  async jsonc() {\n    const { formatJsonc } = await import('./plugins/jsonc/jsonc')\n    return formatJsonc\n  },\n  async less() {\n    const { formatLess } = await import('./plugins/less/less')\n    return formatLess\n  },\n  async markdown() {\n    const { formatMarkdown } = await import('./plugins/markdown/markdown')\n    return formatMarkdown\n  },\n  async mdx() {\n    const { formatMdx } = await import('./plugins/mdx/mdx')\n    return formatMdx\n  },\n  async php() {\n    const { formatPhp } = await import('./plugins/php/php')\n    return formatPhp\n  },\n  async postcss() {\n    const { formatPostcss } = await import('./plugins/postcss/postcss')\n    return formatPostcss\n  },\n  // async ruby() {\n  //   const { formatRuby } = await import('./plugins/ruby/ruby')\n  //   return formatRuby\n  // },\n  async scss() {\n    const { formatScss } = await import('./plugins/scss/scss')\n    return formatScss\n  },\n  // async solidity() {\n  //   const { formatSolidity } = await import('./disabled-plugins/solidity/solidity')\n  //   return formatSolidity\n  // },\n  async svelte() {\n    const { formatSvelte } = await import('./plugins/svelte/svelte')\n    return formatSvelte\n  },\n  async typescript() {\n    const { formatTypescript } = await import('./plugins/typescript/typescript')\n    return formatTypescript\n  },\n  async typescriptreact() {\n    const { formatTypescriptreact } = await import(\n      './plugins/typescriptreact/typescriptreact'\n    )\n    return formatTypescriptreact\n  },\n  async twig() {\n    const { formatTwig } = await import('./plugins/twig/twig')\n    return formatTwig\n  },\n  async vue() {\n    const { formatVue } = await import('./plugins/vue/vue')\n    return formatVue\n  },\n  async xml() {\n    const { formatXml } = await import('./plugins/xml/xml')\n    return formatXml\n  },\n  async yaml() {\n    const { formatYaml } = await import('./plugins/yaml/yaml')\n    return formatYaml\n  },\n}\n\nlet getFormatterCache: {\n  [key: string]: Formatter | undefined\n} = Object.create(null)\nconst getFormatter: (\n  languageId: string\n) => Promise<Formatter | undefined> = async (languageId) => {\n  if (!(languageId in getFormatterCache)) {\n    if (languageId in FORMATTING_MAP) {\n      getFormatterCache[languageId] = await FORMATTING_MAP[languageId]()\n    } else {\n      getFormatterCache[languageId] = undefined\n    }\n  }\n  return getFormatterCache[languageId]\n}\n\nconst fixPath = (filePath: string, languageId: string) => {\n  if (filePath.endsWith('.svg')) {\n    return filePath + '.xml'\n  }\n  if (filePath.endsWith('.map')) {\n    return filePath + '.json'\n  }\n  if (filePath.endsWith('.code-workspace')) {\n    return filePath + '.json'\n  }\n  if (languageId === 'json' && !filePath.endsWith('.json')) {\n    return filePath + '.json'\n  }\n  return filePath\n}\n\nlet preloadFormatterCache: Set<string> = new Set()\nexport const preloadFormatter: (\n  filePath: string,\n  languageId: string\n) => Promise<void> = async (filePath: string, languageId: string) => {\n  filePath = fixPath(filePath, languageId)\n  if (preloadFormatterCache.has(filePath)) {\n    return\n  }\n  preloadFormatterCache.add(filePath)\n  const formatter = await getFormatter(languageId)\n  const isIgnored = await getIsIgnored(filePath)\n  const options = await getOptions(filePath)\n  if (!formatter || isIgnored) {\n    return\n  }\n  formatter(format)('', options)\n}\n\nconst minimizeEdit: (\n  text: string,\n  newText: string\n) => { startOffset: number; endOffset: number; insertedText: string } = (\n  text,\n  newText\n) => {\n  const length = Math.min(text.length, newText.length)\n  let startSame = 0\n  while (startSame < length) {\n    if (text[startSame] !== newText[startSame]) {\n      break\n    }\n    startSame++\n  }\n  let endSame = 1\n  while (endSame < length - startSame) {\n    if (text[text.length - endSame] !== newText[newText.length - endSame]) {\n      break\n    }\n    endSame++\n  }\n  endSame--\n  const startOffset = startSame\n  const endOffset = text.length - endSame\n  const insertedText = newText.slice(startSame, newText.length - endSame)\n  return {\n    startOffset,\n    endOffset,\n    insertedText,\n  }\n}\n\nconst toTextEdit = (\n  source: string,\n  {\n    startOffset,\n    endOffset,\n    insertedText,\n  }: {\n    startOffset: number\n    endOffset: number\n    insertedText: string\n  }\n) => {\n  const document = TextDocument.create('', '', -1, source)\n  const textEdit: TextEdit = {\n    range: {\n      start: document.positionAt(startOffset),\n      end: document.positionAt(endOffset),\n    },\n    newText: insertedText,\n  }\n  return textEdit\n}\n\nexport type FormatDocumentResult =\n  | {\n      status: 'success'\n      textEdits: TextEdit[]\n    }\n  | {\n      status: 'ignored'\n    }\n  | {\n      status: 'error'\n    }\n  | {\n      status: 'cancelled'\n    }\n\nexport const formatDocument: (\n  source: string,\n  filePath: string,\n  languageId: string,\n  token?: CancellationToken\n) => Promise<FormatDocumentResult> = async (\n  source,\n  filePath,\n  languageId,\n  token\n) => {\n  filePath = fixPath(filePath, languageId)\n  const isIgnoredPromise = getIsIgnored(filePath)\n  const formatLanguagePromise = getFormatter(languageId)\n  const optionsPromise = getOptions(filePath)\n  const [isIgnored, formatLanguage, options] = await Promise.all([\n    isIgnoredPromise,\n    formatLanguagePromise,\n    optionsPromise,\n  ])\n  if (!formatLanguage || isIgnored) {\n    return {\n      status: 'ignored',\n    }\n  }\n  let formattedSource: string | undefined\n  try {\n    formattedSource = formatLanguage(format)(source, options)\n  } catch (error) {\n    return {\n      status: 'error',\n    }\n  }\n  if (formattedSource === undefined) {\n    return {\n      status: 'error',\n    }\n  }\n  const minimizedEdit = minimizeEdit(source, formattedSource)\n  const textEdit = toTextEdit(source, minimizedEdit)\n  return {\n    status: 'success',\n    textEdits: [textEdit],\n  }\n}\n","import * as csharp from 'prettier-plugin-csharp'\nimport type { Formatter } from '../pluginApi'\n\nexport const formatCsharp: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [csharp] })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatCss: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import * as elm from 'prettier-plugin-elm'\nimport type { Formatter } from '../pluginApi'\n\nexport const formatElm: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [elm] })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatFlow: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatGraphql: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatHandlebars: Formatter = (format) => (text, options) =>\n  // @ts-ignore\n  format(text, { ...options, parser: 'glimmer' })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatHtml: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import * as java from 'prettier-plugin-java'\nimport type { Formatter } from '../pluginApi'\n\nexport const formatJava: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [java] })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatJavascript: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatJavascriptReact: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatJson: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatJsonc: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatLess: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatMarkdown: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatMdx: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import * as php from '@prettier/plugin-php'\nimport type { Formatter } from '../pluginApi'\n\nexport const formatPhp: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [php] })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatPostcss: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatScss: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import * as svelte from 'prettier-plugin-svelte'\nimport type { Formatter } from '../pluginApi'\n\n// TODO this has an implicit dependency on svelte, might be difficult to bundle\nexport const formatSvelte: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [svelte] })\n","import * as twig from 'prettier-plugin-twig-melody'\nimport type { Formatter } from '../pluginApi'\n\nexport const formatTwig: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [twig] })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatTypescript: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatTypescriptreact: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import type { Formatter } from '../pluginApi'\n\nexport const formatVue: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import * as xml from '@prettier/plugin-xml'\nimport type { Formatter } from '../pluginApi'\n\nexport const formatXml: Formatter = (format) => (text, options) =>\n  format(text, { ...options, plugins: [xml] })\n","import type { Formatter } from '../pluginApi'\n\nexport const formatYaml: Formatter = (format) => (text, options) =>\n  format(text, options)\n","import { parentPort } from 'worker_threads'\nimport { formatDocument } from './formatDocument'\n\nparentPort!.on('message', async ({ source, filePath, languageId }) => {\n  const result = await formatDocument(source, filePath, languageId)\n  parentPort!.postMessage(result)\n})\n","module.exports = require(\"@prettier/plugin-php\");","module.exports = require(\"@prettier/plugin-xml\");","module.exports = require(\"prettier\");","module.exports = require(\"prettier-plugin-csharp\");","module.exports = require(\"prettier-plugin-elm\");","module.exports = require(\"prettier-plugin-java\");","module.exports = require(\"prettier-plugin-svelte\");","module.exports = require(\"prettier-plugin-twig-melody\");","module.exports = require(\"vscode-languageserver-textdocument\");","module.exports = require(\"worker_threads\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(185);\n"],"sourceRoot":""}