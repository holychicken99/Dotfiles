"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOptions = exports.options = exports.printers = exports.parsers = exports.languages = exports.plugin = void 0;
const lex = require("pug-lexer");
const logger_1 = require("./logger");
const options_1 = require("./options");
const printer_1 = require("./printer");
const logger = logger_1.createLogger(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
exports.plugin = {
    languages: [
        {
            name: 'Pug',
            parsers: ['pug'],
            tmScope: 'text.jade',
            aceMode: 'jade',
            codemirrorMode: 'pug',
            codemirrorMimeType: 'text/x-pug',
            extensions: ['.jade', '.pug'],
            linguistLanguageId: 179,
            vscodeLanguageIds: ['jade']
        }
    ],
    parsers: {
        pug: {
            parse(text, parsers, options) {
                logger.debug('[parsers:pug:parse]:', { text });
                const tokens = lex(text.trimLeft());
                return tokens;
            },
            astFormat: 'pug-ast',
            hasPragma(text) {
                return text.startsWith('//- @prettier\n') || text.startsWith('//- @format\n');
            },
            locStart(node) {
                logger.debug('[parsers:pug:locStart]:', { node });
                return 0;
            },
            locEnd(node) {
                logger.debug('[parsers:pug:locEnd]:', { node });
                return 0;
            },
            preprocess(text, options) {
                logger.debug('[parsers:pug:preprocess]:', { text });
                return text;
            }
        }
    },
    printers: {
        'pug-ast': {
            print(path, { printWidth, singleQuote, tabWidth, useTabs, attributeSeparator, closingBracketPosition, commentPreserveSpaces, semi }, print) {
                const tokens = path.stack[0];
                const printer = new printer_1.PugPrinter(tokens, {
                    printWidth,
                    singleQuote,
                    tabWidth,
                    useTabs,
                    attributeSeparator,
                    closingBracketPosition,
                    commentPreserveSpaces,
                    semi
                });
                const result = printer.build();
                logger.debug('[printers:pug-ast:print]:', result);
                return result;
            },
            embed(path, print, textToDoc, options) {
                return null;
            },
            insertPragma(text) {
                return `//- @prettier\n${text}`;
            }
        }
    },
    options: options_1.options,
    defaultOptions: {}
};
exports.languages = exports.plugin.languages;
exports.parsers = exports.plugin.parsers;
exports.printers = exports.plugin.printers;
exports.options = exports.plugin.options;
exports.defaultOptions = exports.plugin.defaultOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsaUNBQWlDO0FBRWpDLHFDQUEwRDtBQUMxRCx1Q0FBb0U7QUFDcEUsdUNBQXVDO0FBRXZDLE1BQU0sTUFBTSxHQUFXLHFCQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7SUFDcEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25DO0FBRVksUUFBQSxNQUFNLEdBQVc7SUFDN0IsU0FBUyxFQUFFO1FBQ1Y7WUFDQyxJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNoQixPQUFPLEVBQUUsV0FBVztZQUNwQixPQUFPLEVBQUUsTUFBTTtZQUNmLGNBQWMsRUFBRSxLQUFLO1lBQ3JCLGtCQUFrQixFQUFFLFlBQVk7WUFDaEMsVUFBVSxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztZQUM3QixrQkFBa0IsRUFBRSxHQUFHO1lBQ3ZCLGlCQUFpQixFQUFFLENBQUMsTUFBTSxDQUFDO1NBQzNCO0tBQ0Q7SUFDRCxPQUFPLEVBQUU7UUFDUixHQUFHLEVBQUU7WUFDSixLQUFLLENBQUMsSUFBWSxFQUFFLE9BQXlDLEVBQUUsT0FBc0I7Z0JBQ3BGLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBSXBDLE9BQU8sTUFBTSxDQUFDO1lBQ2YsQ0FBQztZQUNELFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFNBQVMsQ0FBQyxJQUFZO2dCQUNyQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQy9FLENBQUM7WUFDRCxRQUFRLENBQUMsSUFBYTtnQkFDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ2xELE9BQU8sQ0FBQyxDQUFDO1lBQ1YsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFhO2dCQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDaEQsT0FBTyxDQUFDLENBQUM7WUFDVixDQUFDO1lBQ0QsVUFBVSxDQUFDLElBQVksRUFBRSxPQUFzQjtnQkFDOUMsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ3BELE9BQU8sSUFBSSxDQUFDO1lBQ2IsQ0FBQztTQUNEO0tBQ0Q7SUFDRCxRQUFRLEVBQUU7UUFDVCxTQUFTLEVBQUU7WUFDVixLQUFLLENBQ0osSUFBYyxFQUNkLEVBQ0MsVUFBVSxFQUNWLFdBQVcsRUFDWCxRQUFRLEVBQ1IsT0FBTyxFQUNQLGtCQUFrQixFQUNsQixzQkFBc0IsRUFDdEIscUJBQXFCLEVBQ3JCLElBQUksRUFDOEIsRUFDbkMsS0FBOEI7Z0JBRTlCLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksb0JBQVUsQ0FBQyxNQUFNLEVBQUU7b0JBQ3RDLFVBQVU7b0JBQ1YsV0FBVztvQkFDWCxRQUFRO29CQUNSLE9BQU87b0JBQ1Asa0JBQWtCO29CQUNsQixzQkFBc0I7b0JBQ3RCLHFCQUFxQjtvQkFDckIsSUFBSTtpQkFDSixDQUFDLENBQUM7Z0JBQ0gsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNsRCxPQUFPLE1BQU0sQ0FBQztZQUNmLENBQUM7WUFDRCxLQUFLLENBQ0osSUFBYyxFQUNkLEtBQThCLEVBQzlCLFNBQWtELEVBQ2xELE9BQXNCO2dCQUd0QixPQUFPLElBQUksQ0FBQztZQUNiLENBQUM7WUFDRCxZQUFZLENBQUMsSUFBWTtnQkFDeEIsT0FBTyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7WUFDakMsQ0FBQztTQUNEO0tBQ0Q7SUFDRCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLGNBQWMsRUFBRSxFQUFFO0NBQ2xCLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDO0FBQzdCLFFBQUEsT0FBTyxHQUFHLGNBQU0sQ0FBQyxPQUFPLENBQUM7QUFDekIsUUFBQSxRQUFRLEdBQUcsY0FBTSxDQUFDLFFBQVEsQ0FBQztBQUMzQixRQUFBLE9BQU8sR0FBRyxjQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3pCLFFBQUEsY0FBYyxHQUFHLGNBQU0sQ0FBQyxjQUFjLENBQUMifQ==