"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.options = exports.formatCommentPreserveSpaces = exports.resolveClosingBracketPositionOption = exports.resolveAttributeSeparatorOption = exports.CATEGORY_PUG = void 0;
exports.CATEGORY_PUG = 'Pug';
function resolveAttributeSeparatorOption(attributeSeparator) {
    switch (attributeSeparator) {
        case 'always':
            return true;
        case 'as-needed':
            return false;
    }
    throw new Error(`Invalid option for pug attributeSeparator. Found '${attributeSeparator}'. Possible options: 'always' or 'as-needed'`);
}
exports.resolveAttributeSeparatorOption = resolveAttributeSeparatorOption;
function resolveClosingBracketPositionOption(closingBracketPosition) {
    switch (closingBracketPosition) {
        case 'new-line':
            return true;
        case 'last-line':
            return false;
    }
    throw new Error(`Invalid option for pug closingBracketPosition. Found '${closingBracketPosition}'. Possible options: 'new-line' or 'last-line'`);
}
exports.resolveClosingBracketPositionOption = resolveClosingBracketPositionOption;
function formatCommentPreserveSpaces(input, commentPreserveSpaces, pipeless = false) {
    switch (commentPreserveSpaces) {
        case 'keep-leading': {
            let result = '';
            let firstNonSpace = 0;
            for (firstNonSpace; firstNonSpace < input.length && input[firstNonSpace] === ' '; firstNonSpace++) {
                result += ' ';
            }
            result += input.slice(firstNonSpace).trim().replace(/\s\s+/g, ' ');
            return result;
        }
        case 'trim-all': {
            let result = input.trim();
            result = result.replace(/\s\s+/g, ' ');
            if (!pipeless && input[0] === ' ') {
                result = ` ${result}`;
            }
            return result;
        }
        case 'keep-all':
        default:
            return input;
    }
}
exports.formatCommentPreserveSpaces = formatCommentPreserveSpaces;
exports.options = {
    attributeSeparator: {
        since: '1.0.0',
        category: exports.CATEGORY_PUG,
        type: 'choice',
        default: 'always',
        description: 'Change when attributes are separated by commas in tags.',
        choices: [
            {
                value: 'always',
                description: 'Always separate attributes with commas. Example: `button(type="submit", (click)="play()", disabled)`'
            },
            {
                value: 'as-needed',
                description: 'Only add commas between attributes where required. Example: `button(type="submit", (click)="play()" disabled)`'
            }
        ]
    },
    closingBracketPosition: {
        since: '1.3.0',
        category: exports.CATEGORY_PUG,
        type: 'choice',
        default: 'new-line',
        description: 'Determines position of closing bracket which wraps attributes.',
        choices: [
            {
                value: 'new-line',
                description: `
					Closing bracket ends with a new line.
					Example:
					input(
						type='text',
						value='my_value',
						name='my_name',
						alt='my_alt',
						autocomplete='on'
					)
					`
            },
            {
                value: 'last-line',
                description: `
				Closing bracket remains with last attribute's line.
				Example:
				input(
					type='text',
					value='my_value',
					name='my_name',
					alt='my_alt',
					autocomplete='on')
				`
            }
        ]
    },
    commentPreserveSpaces: {
        since: '1.1.0',
        category: exports.CATEGORY_PUG,
        type: 'choice',
        default: 'keep-all',
        description: 'Change behavior of spaces within comments.',
        choices: [
            {
                value: 'keep-all',
                description: 'Keep all spaces within comments. Example: `//    this  is   a   comment`'
            },
            {
                value: 'keep-leading',
                description: 'Keep leading spaces within comments. Example: `//    this is a comment`'
            },
            {
                value: 'trim-all',
                description: 'Trim all spaces within comments. Example: `// this is a comment`'
            }
        ]
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb3B0aW9ucy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLFlBQVksR0FBVyxLQUFLLENBQUM7QUFZMUMsU0FBZ0IsK0JBQStCLENBQUMsa0JBQXNDO0lBQ3JGLFFBQVEsa0JBQWtCLEVBQUU7UUFDM0IsS0FBSyxRQUFRO1lBQ1osT0FBTyxJQUFJLENBQUM7UUFDYixLQUFLLFdBQVc7WUFDZixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FDZCxxREFBcUQsa0JBQWtCLDhDQUE4QyxDQUNySCxDQUFDO0FBQ0gsQ0FBQztBQVZELDBFQVVDO0FBRUQsU0FBZ0IsbUNBQW1DLENBQUMsc0JBQThDO0lBQ2pHLFFBQVEsc0JBQXNCLEVBQUU7UUFDL0IsS0FBSyxVQUFVO1lBQ2QsT0FBTyxJQUFJLENBQUM7UUFDYixLQUFLLFdBQVc7WUFDZixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FDZCx5REFBeUQsc0JBQXNCLGdEQUFnRCxDQUMvSCxDQUFDO0FBQ0gsQ0FBQztBQVZELGtGQVVDO0FBRUQsU0FBZ0IsMkJBQTJCLENBQzFDLEtBQWEsRUFDYixxQkFBNEMsRUFDNUMsV0FBb0IsS0FBSztJQUV6QixRQUFRLHFCQUFxQixFQUFFO1FBQzlCLEtBQUssY0FBYyxDQUFDLENBQUM7WUFDcEIsSUFBSSxNQUFNLEdBQVcsRUFBRSxDQUFDO1lBQ3hCLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztZQUN0QixLQUFLLGFBQWEsRUFBRSxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLGFBQWEsRUFBRSxFQUFFO2dCQUNsRyxNQUFNLElBQUksR0FBRyxDQUFDO2FBQ2Q7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ25FLE9BQU8sTUFBTSxDQUFDO1NBQ2Q7UUFDRCxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBQ2hCLElBQUksTUFBTSxHQUFXLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUNsQyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzthQUN0QjtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2Q7UUFDRCxLQUFLLFVBQVUsQ0FBQztRQUNoQjtZQUVDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDRixDQUFDO0FBNUJELGtFQTRCQztBQUVZLFFBQUEsT0FBTyxHQUFHO0lBQ3RCLGtCQUFrQixFQUFFO1FBQ25CLEtBQUssRUFBRSxPQUFPO1FBQ2QsUUFBUSxFQUFFLG9CQUFZO1FBQ3RCLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLFFBQVE7UUFDakIsV0FBVyxFQUFFLHlEQUF5RDtRQUN0RSxPQUFPLEVBQUU7WUFDUjtnQkFDQyxLQUFLLEVBQUUsUUFBUTtnQkFDZixXQUFXLEVBQ1Ysc0dBQXNHO2FBQ3ZHO1lBQ0Q7Z0JBQ0MsS0FBSyxFQUFFLFdBQVc7Z0JBQ2xCLFdBQVcsRUFDVixnSEFBZ0g7YUFDakg7U0FDRDtLQUNEO0lBQ0Qsc0JBQXNCLEVBQUU7UUFDdkIsS0FBSyxFQUFFLE9BQU87UUFDZCxRQUFRLEVBQUUsb0JBQVk7UUFDdEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsVUFBVTtRQUNuQixXQUFXLEVBQUUsZ0VBQWdFO1FBQzdFLE9BQU8sRUFBRTtZQUNSO2dCQUNDLEtBQUssRUFBRSxVQUFVO2dCQUNqQixXQUFXLEVBQUU7Ozs7Ozs7Ozs7TUFVWDthQUNGO1lBQ0Q7Z0JBQ0MsS0FBSyxFQUFFLFdBQVc7Z0JBQ2xCLFdBQVcsRUFBRTs7Ozs7Ozs7O0tBU1o7YUFDRDtTQUNEO0tBQ0Q7SUFDRCxxQkFBcUIsRUFBRTtRQUN0QixLQUFLLEVBQUUsT0FBTztRQUNkLFFBQVEsRUFBRSxvQkFBWTtRQUN0QixJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRSxVQUFVO1FBQ25CLFdBQVcsRUFBRSw0Q0FBNEM7UUFDekQsT0FBTyxFQUFFO1lBQ1I7Z0JBQ0MsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLFdBQVcsRUFBRSwwRUFBMEU7YUFDdkY7WUFDRDtnQkFDQyxLQUFLLEVBQUUsY0FBYztnQkFDckIsV0FBVyxFQUFFLHlFQUF5RTthQUN0RjtZQUNEO2dCQUNDLEtBQUssRUFBRSxVQUFVO2dCQUNqQixXQUFXLEVBQUUsa0VBQWtFO2FBQy9FO1NBQ0Q7S0FDRDtDQUNELENBQUMifQ==