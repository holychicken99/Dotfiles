"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PugPrinter = void 0;
const prettier_1 = require("prettier");
const doctype_shortcut_registry_1 = require("./doctype-shortcut-registry");
const logger_1 = require("./logger");
const options_1 = require("./options");
const angular_1 = require("./utils/angular");
const common_1 = require("./utils/common");
const vue_1 = require("./utils/vue");
const logger = logger_1.createLogger(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
class PugPrinter {
    constructor(tokens, options) {
        this.tokens = tokens;
        this.options = options;
        this.result = '';
        this.currentIndex = 0;
        this.indentLevel = 0;
        this.currentLineLength = 1;
        this.possibleIdPosition = 0;
        this.possibleClassPosition = 0;
        this.previousAttributeRemapped = false;
        this.wrapAttributes = false;
        this.pipelessText = false;
        this.pipelessComment = false;
        this.indentString = options.useTabs ? '\t' : ' '.repeat(options.tabWidth);
        this.quotes = this.options.singleQuote ? "'" : '"';
        this.otherQuotes = this.options.singleQuote ? '"' : "'";
        this.alwaysUseAttributeSeparator = options_1.resolveAttributeSeparatorOption(options.attributeSeparator);
        this.closingBracketRemainsAtNewLine = options_1.resolveClosingBracketPositionOption(options.closingBracketPosition);
        this.codeInterpolationOptions = {
            singleQuote: !options.singleQuote,
            printWidth: 9000,
            endOfLine: 'lf'
        };
    }
    get previousToken() {
        return this.tokens[this.currentIndex - 1];
    }
    get nextToken() {
        return this.tokens[this.currentIndex + 1];
    }
    build() {
        var _a;
        const results = [];
        if (((_a = this.tokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'text') {
            results.push('| ');
        }
        for (let index = 0; index < this.tokens.length; index++) {
            this.currentIndex = index;
            const token = this.tokens[index];
            logger.debug('[PugPrinter]:', JSON.stringify(token));
            try {
                switch (token.type) {
                    case 'attribute':
                    case 'class':
                    case 'end-attributes':
                    case 'id':
                    case 'eos':
                        this.result = results.join('');
                        this[token.type](token);
                        results.length = 0;
                        results.push(this.result);
                        break;
                    case 'tag':
                    case 'start-attributes':
                    case 'interpolation':
                    case 'call':
                    case ':':
                        this.result = results.join('');
                    default:
                        results.push(this[token.type](token));
                        break;
                }
            }
            catch (error) {
                throw new Error('Unhandled token: ' + JSON.stringify(token));
            }
        }
        return results.join('');
    }
    get computedIndent() {
        var _a;
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case 'newline':
            case 'outdent':
                return this.indentString.repeat(this.indentLevel);
            case 'indent':
                return this.indentString;
        }
        return '';
    }
    quoteString(val) {
        return `${this.quotes}${val}${this.quotes}`;
    }
    checkTokenType(token, possibilities, invert = false) {
        return !!token && possibilities.includes(token.type) !== invert;
    }
    formatDelegatePrettier(val, parser) {
        val = val.trim();
        val = val.slice(1, -1);
        val = prettier_1.format(val, { parser: parser, ...this.codeInterpolationOptions });
        val = common_1.unwrapLineFeeds(val);
        return this.quoteString(val);
    }
    formatText(text) {
        let result = '';
        while (text) {
            const start = text.indexOf('{{');
            if (start !== -1) {
                result += text.slice(0, start);
                text = text.slice(start + 2);
                const end = text.indexOf('}}');
                if (end !== -1) {
                    let code = text.slice(0, end);
                    try {
                        const q1 = code.indexOf(this.quotes);
                        const q2 = code.indexOf(this.otherQuotes);
                        const qb = code.indexOf('`');
                        if (q1 >= 0 && q2 >= 0 && q2 > q1 && (qb < 0 || q1 < qb)) {
                            logger.log({
                                code,
                                quotes: this.quotes,
                                otherQuotes: this.otherQuotes,
                                q1,
                                q2,
                                qb
                            });
                            logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', code);
                            result += `{{ ${code} }}`;
                            text = text.slice(end + 2);
                            continue;
                        }
                        else {
                            code = prettier_1.format(code, {
                                parser: '__ng_interpolation',
                                ...this.codeInterpolationOptions
                            });
                        }
                    }
                    catch (error) {
                        if (typeof error === 'string') {
                            if (error.includes('Unexpected token Lexer Error')) {
                                if (!error.includes('Unexpected character [`]')) {
                                    logger.debug('[PugPrinter:formatText]: Using fallback strategy');
                                }
                            }
                            else if (error.includes('Bindings cannot contain assignments')) {
                                logger.warn('[PugPrinter:formatText]: Bindings should not contain assignments:', code.trim());
                            }
                            else {
                                logger.warn('[PugPrinter:formatText]: ', error);
                            }
                        }
                        else {
                            logger.warn('[PugPrinter:formatText]: ', error);
                        }
                        try {
                            code = prettier_1.format(code, {
                                parser: 'babel',
                                ...this.codeInterpolationOptions,
                                semi: false
                            });
                            if (code[0] === ';') {
                                code = code.slice(1);
                            }
                        }
                        catch (error) {
                            logger.warn(error);
                        }
                    }
                    code = common_1.unwrapLineFeeds(code);
                    result += `{{ ${code} }}`;
                    text = text.slice(end + 2);
                }
                else {
                    result += '{{';
                    result += text;
                    text = '';
                }
            }
            else {
                result += text;
                text = '';
            }
        }
        return result;
    }
    formatVueEventBinding(val) {
        val = val.trim();
        val = val.slice(1, -1);
        val = prettier_1.format(val, { parser: '__vue_event_binding', ...this.codeInterpolationOptions });
        val = common_1.unwrapLineFeeds(val);
        if (val[val.length - 1] === ';') {
            val = val.slice(0, -1);
        }
        return this.quoteString(val);
    }
    formatVueExpression(val) {
        return this.formatDelegatePrettier(val, '__vue_expression');
    }
    formatAngularBinding(val) {
        return this.formatDelegatePrettier(val, '__ng_binding');
    }
    formatAngularAction(val) {
        return this.formatDelegatePrettier(val, '__ng_action');
    }
    formatAngularDirective(val) {
        return this.formatDelegatePrettier(val, '__ng_directive');
    }
    formatAngularInterpolation(val) {
        val = val.slice(1, -1);
        val = val.slice(2, -2);
        val = val.trim();
        if (val.includes(`\\${this.otherQuotes}`)) {
            logger.warn('The following expression could not be formatted correctly. Please try to fix it yourself and if there is a problem, please open a bug issue:', val);
        }
        else {
            val = prettier_1.format(val, {
                parser: '__ng_interpolation',
                ...this.codeInterpolationOptions
            });
            val = common_1.unwrapLineFeeds(val);
        }
        return this.quoteString(`{{ ${val} }}`);
    }
    tag(token) {
        let val = token.val;
        if (val === 'div' && this.nextToken && (this.nextToken.type === 'class' || this.nextToken.type === 'id')) {
            val = '';
        }
        this.currentLineLength += val.length;
        const result = `${this.computedIndent}${val}`;
        logger.debug('tag', { result, val: token.val, length: token.val.length }, this.currentLineLength);
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    ['start-attributes'](token) {
        var _a, _b;
        let result = '';
        if (((_a = this.nextToken) === null || _a === void 0 ? void 0 : _a.type) === 'attribute') {
            this.previousAttributeRemapped = false;
            this.possibleClassPosition = this.result.length;
            result = '(';
            logger.debug(this.currentLineLength);
            this.currentLineLength += 1;
            let tempToken = this.nextToken;
            let tempIndex = this.currentIndex + 1;
            let nonPrefixAttributes = 0;
            let hasPrefixAttribute = false;
            while (tempToken.type === 'attribute') {
                switch (tempToken.name) {
                    case 'class':
                    case 'id': {
                        hasPrefixAttribute = true;
                        const val = tempToken.val.toString();
                        if (common_1.isQuoted(val)) {
                            this.currentLineLength -= 2;
                        }
                        this.currentLineLength += 1 + val.length;
                        logger.debug({ tokenName: tempToken.name, length: tempToken.name.length }, this.currentLineLength);
                        break;
                    }
                    default: {
                        nonPrefixAttributes += 1;
                        this.currentLineLength += tempToken.name.length;
                        logger.debug({ tokenName: tempToken.name, length: tempToken.name.length }, this.currentLineLength);
                        const val = tempToken.val.toString();
                        if (val.length > 0 && val !== 'true') {
                            this.currentLineLength += 1 + val.length;
                            logger.debug({ tokenVal: val, length: val.length }, this.currentLineLength);
                        }
                        break;
                    }
                }
                tempToken = this.tokens[++tempIndex];
            }
            logger.debug('after token', this.currentLineLength);
            if (hasPrefixAttribute) {
                if (((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) === 'tag' && this.previousToken.val === 'div') {
                    this.currentLineLength -= 3;
                }
            }
            const hasPrefixAttributes = nonPrefixAttributes > 0;
            if (!hasPrefixAttributes) {
                this.currentLineLength -= 1;
            }
            else {
                this.currentLineLength += 2 * (nonPrefixAttributes - 1);
                this.currentLineLength += 1;
            }
            logger.debug(this.currentLineLength);
            if (this.currentLineLength > this.options.printWidth) {
                this.wrapAttributes = true;
            }
        }
        return result;
    }
    attribute(token) {
        var _a;
        if (typeof token.val === 'string') {
            if (common_1.isQuoted(token.val)) {
                if (token.name === 'class') {
                    let val = token.val;
                    val = val.slice(1, -1);
                    val = val.trim();
                    val = val.replace(/\s\s+/g, ' ');
                    const classes = val.split(' ');
                    const specialClasses = [];
                    const normalClasses = [];
                    const validClassNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                    for (const className of classes) {
                        if (!validClassNameRegex.test(className)) {
                            specialClasses.push(className);
                        }
                        else {
                            normalClasses.push(className);
                        }
                    }
                    if (normalClasses.length > 0) {
                        const position = this.possibleClassPosition;
                        this.result = [
                            this.result.slice(0, position),
                            '.',
                            normalClasses.join('.'),
                            this.result.slice(position)
                        ].join('');
                        this.possibleClassPosition += 1 + normalClasses.join('.').length;
                        this.result = this.result.replace(/div\./, '.');
                    }
                    if (specialClasses.length > 0) {
                        token.val = common_1.makeString(specialClasses.join(' '), this.quotes);
                        this.previousAttributeRemapped = false;
                    }
                    else {
                        this.previousAttributeRemapped = true;
                        return;
                    }
                }
                else if (token.name === 'id') {
                    let val = token.val;
                    val = val.slice(1, -1);
                    val = val.trim();
                    const validIdNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                    if (!validIdNameRegex.test(val)) {
                        val = common_1.makeString(val, this.quotes);
                        this.result += `id=${val}`;
                        return;
                    }
                    const position = this.possibleIdPosition;
                    this.result = [this.result.slice(0, position), `#${val}`, this.result.slice(position)].join('');
                    this.possibleClassPosition += 1 + val.length;
                    this.result = this.result.replace(/div#/, '#');
                    if (this.previousToken &&
                        this.previousToken.type === 'attribute' &&
                        this.previousToken.name !== 'class') {
                        this.previousAttributeRemapped = true;
                    }
                    return;
                }
            }
        }
        const hasNormalPreviousToken = common_1.previousNormalAttributeToken(this.tokens, this.currentIndex);
        if (((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) === 'attribute' && (!this.previousAttributeRemapped || hasNormalPreviousToken)) {
            if (this.alwaysUseAttributeSeparator || /^(\(|\[|:).*/.test(token.name)) {
                this.result += ',';
            }
            if (!this.wrapAttributes) {
                this.result += ' ';
            }
        }
        this.previousAttributeRemapped = false;
        if (this.wrapAttributes) {
            this.result += '\n';
            this.result += this.indentString.repeat(this.indentLevel + 1);
        }
        this.result += `${token.name}`;
        if (typeof token.val === 'boolean') {
            if (token.val !== true) {
                this.result += `=${token.val}`;
            }
        }
        else {
            let val = token.val;
            if (common_1.isMultilineInterpolation(val)) {
            }
            else if (vue_1.isVueExpression(token.name)) {
                val = this.formatVueExpression(val);
            }
            else if (vue_1.isVueEventBinding(token.name)) {
                val = this.formatVueEventBinding(val);
            }
            else if (angular_1.isAngularBinding(token.name)) {
                val = this.formatAngularBinding(val);
            }
            else if (angular_1.isAngularAction(token.name)) {
                val = this.formatAngularAction(val);
            }
            else if (angular_1.isAngularDirective(token.name)) {
                val = this.formatAngularDirective(val);
            }
            else if (angular_1.isAngularInterpolation(val)) {
                val = this.formatAngularInterpolation(val);
            }
            else if (common_1.isQuoted(val)) {
                val = common_1.makeString(val.slice(1, -1), this.quotes);
            }
            else if (val === 'true') {
                return;
            }
            else if (token.mustEscape) {
                val = prettier_1.format(val, {
                    parser: '__js_expression',
                    ...this.codeInterpolationOptions
                });
            }
            else {
                val = val.trim();
                val = val.replace(/\s\s+/g, ' ');
                if (val[0] === '{' && val[1] === ' ') {
                    val = `{${val.slice(2, val.length)}`;
                }
            }
            if (token.mustEscape === false) {
                this.result += '!';
            }
            this.result += `=${val}`;
        }
    }
    ['end-attributes'](token) {
        var _a, _b, _c;
        if (this.wrapAttributes && this.result[this.result.length - 1] !== '(') {
            if (this.closingBracketRemainsAtNewLine) {
                this.result += '\n';
            }
            this.result += this.indentString.repeat(this.indentLevel);
        }
        this.wrapAttributes = false;
        if (this.result[this.result.length - 1] === '(') {
            this.result = this.result.slice(0, -1);
        }
        else if (((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) === 'attribute') {
            if (!this.closingBracketRemainsAtNewLine) {
                this.result = this.result.trimRight();
            }
            this.result += ')';
        }
        if (((_b = this.nextToken) === null || _b === void 0 ? void 0 : _b.type) === 'text' || ((_c = this.nextToken) === null || _c === void 0 ? void 0 : _c.type) === 'path') {
            this.result += ' ';
        }
    }
    indent(token) {
        const result = `\n${this.indentString.repeat(this.indentLevel)}`;
        this.currentLineLength = result.length - 1 + 1 + this.indentString.length;
        logger.debug('indent', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        this.indentLevel++;
        return result;
    }
    outdent(token) {
        let result = '';
        if (this.previousToken && this.previousToken.type !== 'outdent') {
            if (token.loc.start.line - this.previousToken.loc.end.line > 1) {
                result += '\n';
            }
            result += '\n';
        }
        this.indentLevel--;
        this.currentLineLength = 1 + this.indentString.repeat(this.indentLevel).length;
        logger.debug('outdent', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        return result;
    }
    class(token) {
        var _a, _b;
        const val = `.${token.val}`;
        this.currentLineLength += val.length;
        logger.debug('class', { val, length: val.length }, this.currentLineLength);
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case 'newline':
            case 'outdent':
            case 'indent': {
                this.possibleIdPosition = this.result.length + this.computedIndent.length;
                const result = `${this.computedIndent}${val}`;
                this.result += result;
                this.possibleClassPosition = this.result.length;
                break;
            }
            default: {
                const prefix = this.result.slice(0, this.possibleClassPosition);
                this.result = [prefix, val, this.result.slice(this.possibleClassPosition)].join('');
                this.possibleClassPosition += val.length;
                break;
            }
        }
        if (((_b = this.nextToken) === null || _b === void 0 ? void 0 : _b.type) === 'text') {
            this.currentLineLength += 1;
            this.result += ' ';
        }
    }
    eos(token) {
        while (this.result[this.result.length - 1] === '\n') {
            this.result = this.result.slice(0, -1);
        }
        this.result += '\n';
    }
    comment(token) {
        var _a;
        let result = this.computedIndent;
        if (this.checkTokenType(this.previousToken, ['newline', 'indent', 'outdent'], true)) {
            result += ' ';
        }
        result += '//';
        if (!token.buffer) {
            result += '-';
        }
        result += options_1.formatCommentPreserveSpaces(token.val, this.options.commentPreserveSpaces);
        if (((_a = this.nextToken) === null || _a === void 0 ? void 0 : _a.type) === 'start-pipeless-text') {
            this.pipelessComment = true;
        }
        return result;
    }
    newline(token) {
        let result = '';
        if (this.previousToken && token.loc.start.line - this.previousToken.loc.end.line > 1) {
            result += '\n';
        }
        result += '\n';
        this.currentLineLength = 1 + this.indentString.repeat(this.indentLevel).length;
        logger.debug('newline', { result, indentLevel: this.indentLevel }, this.currentLineLength);
        return result;
    }
    text(token) {
        var _a, _b, _c;
        let result = '';
        let val = token.val;
        let needsTrailingWhitespace = false;
        if (this.pipelessText) {
            switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
                case 'newline':
                    if (val.trim().length > 0) {
                        result += this.indentString.repeat(this.indentLevel + 1);
                    }
                    break;
                case 'start-pipeless-text':
                    result += this.indentString;
                    break;
            }
            if (this.pipelessComment) {
                val = options_1.formatCommentPreserveSpaces(val, this.options.commentPreserveSpaces, true);
            }
        }
        else {
            if (this.nextToken && val[val.length - 1] === ' ') {
                switch (this.nextToken.type) {
                    case 'interpolated-code':
                    case 'start-pug-interpolation':
                        needsTrailingWhitespace = true;
                        break;
                }
            }
            val = val.replace(/\s\s+/g, ' ');
            switch ((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) {
                case 'newline':
                    result += this.indentString.repeat(this.indentLevel);
                    if (/^ .+$/.test(val)) {
                        result += '|\n';
                        result += this.indentString.repeat(this.indentLevel);
                    }
                    result += '|';
                    if (/.*\S.*/.test(token.val) || ((_c = this.nextToken) === null || _c === void 0 ? void 0 : _c.type) === 'start-pug-interpolation') {
                        result += ' ';
                    }
                    break;
                case 'indent':
                    result += this.indentString;
                    if (/^ .+$/.test(val)) {
                        result += '|\n';
                        result += this.indentString.repeat(this.indentLevel);
                    }
                    result += '|';
                    if (/.*\S.*/.test(token.val)) {
                        result += ' ';
                    }
                    break;
                case 'interpolated-code':
                case 'end-pug-interpolation':
                    if (/^ .+$/.test(val)) {
                        result += ' ';
                    }
                    break;
            }
            val = val.trim();
            val = this.formatText(val);
            val = val.replace(/#(\{|\[)/g, '\\#$1');
        }
        if (this.checkTokenType(this.previousToken, ['tag', 'id', 'interpolation', 'call', '&attributes', 'filter'])) {
            val = ` ${val}`;
        }
        result += val;
        if (needsTrailingWhitespace) {
            result += ' ';
        }
        return result;
    }
    ['interpolated-code'](token) {
        var _a;
        let result = '';
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case 'tag':
            case 'class':
            case 'id':
            case 'end-attributes':
                result = ' ';
                break;
            case 'start-pug-interpolation':
                result = '| ';
                break;
            case 'indent':
            case 'newline':
            case 'outdent':
                result = this.computedIndent;
                result += this.pipelessText ? this.indentString : '| ';
                break;
        }
        result += token.mustEscape ? '#' : '!';
        result += `{${token.val}}`;
        return result;
    }
    code(token) {
        let result = this.computedIndent;
        if (!token.mustEscape && token.buffer) {
            result += '!';
        }
        result += token.buffer ? '=' : '-';
        let useSemi = this.options.semi;
        if (useSemi && (token.mustEscape || token.buffer)) {
            useSemi = false;
        }
        let val = token.val;
        try {
            const valBackup = val;
            val = prettier_1.format(val, {
                parser: 'babel',
                ...this.codeInterpolationOptions,
                semi: useSemi,
                endOfLine: 'lf'
            });
            val = val.slice(0, -1);
            if (val[0] === ';') {
                val = val.slice(1);
            }
            if (val.includes('\n')) {
                val = valBackup;
            }
        }
        catch (error) {
            logger.warn('[PugPrinter]:', error);
        }
        result += ` ${val}`;
        return result;
    }
    id(token) {
        var _a;
        const val = `#${token.val}`;
        this.currentLineLength += val.length;
        switch ((_a = this.previousToken) === null || _a === void 0 ? void 0 : _a.type) {
            case 'newline':
            case 'outdent':
            case 'indent': {
                const result = `${this.computedIndent}${val}`;
                this.result += result;
                this.possibleClassPosition = this.result.length;
                break;
            }
            default: {
                const prefix = this.result.slice(0, this.possibleIdPosition);
                this.possibleClassPosition += val.length;
                this.result = [prefix, val, this.result.slice(this.possibleIdPosition)].join('');
                break;
            }
        }
    }
    ['start-pipeless-text'](token) {
        this.pipelessText = true;
        return `\n${this.indentString.repeat(this.indentLevel)}`;
    }
    ['end-pipeless-text'](token) {
        this.pipelessText = false;
        this.pipelessComment = false;
        return '';
    }
    doctype(token) {
        let result = `${this.computedIndent}doctype`;
        if (token.val) {
            result += ` ${token.val}`;
        }
        return result;
    }
    dot(token) {
        return '.';
    }
    block(token) {
        let result = `${this.computedIndent}block `;
        if (token.mode !== 'replace') {
            result += `${token.mode} `;
        }
        result += token.val;
        return result;
    }
    extends(token) {
        return 'extends ';
    }
    path(token) {
        let result = '';
        if (this.checkTokenType(this.previousToken, ['include', 'filter'])) {
            result += ' ';
        }
        result += token.val;
        return result;
    }
    ['start-pug-interpolation'](token) {
        var _a, _b;
        let result = '';
        if (((_a = this.tokens[this.currentIndex - 2]) === null || _a === void 0 ? void 0 : _a.type) === 'newline' &&
            ((_b = this.previousToken) === null || _b === void 0 ? void 0 : _b.type) === 'text' &&
            this.previousToken.val.trim().length === 0) {
            result += this.indentString.repeat(this.indentLevel + 1);
        }
        result += '#[';
        return result;
    }
    ['end-pug-interpolation'](token) {
        return ']';
    }
    interpolation(token) {
        const result = `${this.computedIndent}#{${token.val}}`;
        this.currentLineLength += result.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    include(token) {
        return `${this.computedIndent}include`;
    }
    filter(token) {
        return `${this.computedIndent}:${token.val}`;
    }
    call(token) {
        let result = `${this.computedIndent}+${token.val}`;
        let args = token.args;
        if (args) {
            args = args.trim();
            args = args.replace(/\s\s+/g, ' ');
            result += `(${args})`;
        }
        this.currentLineLength += result.length;
        this.possibleIdPosition = this.result.length + result.length;
        this.possibleClassPosition = this.result.length + result.length;
        return result;
    }
    mixin(token) {
        let result = `${this.computedIndent}mixin ${token.val}`;
        let args = token.args;
        if (args) {
            args = args.trim();
            args = args.replace(/\s\s+/g, ' ');
            result += `(${args})`;
        }
        return result;
    }
    if(token) {
        let result = this.computedIndent;
        const match = /^!\((.*)\)$/.exec(token.val);
        logger.debug('[PugPrinter]:', match);
        result += !match ? `if ${token.val}` : `unless ${match[1]}`;
        return result;
    }
    ['mixin-block'](token) {
        return `${this.computedIndent}block`;
    }
    else(token) {
        return `${this.computedIndent}else`;
    }
    ['&attributes'](token) {
        const result = `&attributes(${token.val})`;
        this.currentLineLength += result.length;
        return result;
    }
    ['text-html'](token) {
        const match = /^<(.*?)>(.*)<\/(.*?)>$/.exec(token.val);
        logger.debug('[PugPrinter]:', match);
        if (match) {
            return `${this.computedIndent}${match[1]} ${match[2]}`;
        }
        const entry = Object.entries(doctype_shortcut_registry_1.DOCTYPE_SHORTCUT_REGISTRY).find(([key]) => key === token.val.toLowerCase());
        if (entry) {
            return `${this.computedIndent}${entry[1]}`;
        }
        return `${this.computedIndent}${token.val}`;
    }
    each(token) {
        let result = `${this.computedIndent}each ${token.val}`;
        if (token.key !== null) {
            result += `, ${token.key}`;
        }
        result += ` in ${token.code}`;
        return result;
    }
    eachOf(token) {
        let value = token.value.trim();
        value = prettier_1.format(value, {
            parser: 'babel',
            ...this.codeInterpolationOptions,
            semi: false
        });
        if (value[0] === ';') {
            value = value.slice(1);
        }
        value = common_1.unwrapLineFeeds(value);
        const code = token.code.trim();
        return `${this.computedIndent}each ${value} of ${code}`;
    }
    while(token) {
        return `${this.computedIndent}while ${token.val}`;
    }
    case(token) {
        return `${this.computedIndent}case ${token.val}`;
    }
    when(token) {
        return `${this.computedIndent}when ${token.val}`;
    }
    [':'](token) {
        this.possibleIdPosition = this.result.length + 2;
        this.possibleClassPosition = this.result.length + 2;
        return ': ';
    }
    default(token) {
        return `${this.computedIndent}default`;
    }
    ['else-if'](token) {
        return `${this.computedIndent}else if ${token.val}`;
    }
    blockcode(token) {
        return `${this.computedIndent}-`;
    }
    yield(token) {
        return `${this.computedIndent}yield`;
    }
    slash(token) {
        return '/';
    }
}
exports.PugPrinter = PugPrinter;
//# sourceMappingURL=data:application/json;base64,