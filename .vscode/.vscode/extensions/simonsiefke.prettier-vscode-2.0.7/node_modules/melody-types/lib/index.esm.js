import { is } from 'babel-types';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/**
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TYPE_MAP = Object.create(null);
var ALIAS_TO_TYPE = Object.create(null);
var PATH_CACHE_KEY = Symbol();

var IS_ALIAS_OF = Object.create(null);

var Node = function () {
    function Node() {
        classCallCheck(this, Node);

        this.loc = {
            source: null,
            start: { line: 0, column: 0 },
            end: { line: 0, column: 0 }
        };
        this[PATH_CACHE_KEY] = [];
    }

    Node.prototype.toJSON = function toJSON() {
        var _this = this;

        return Object.getOwnPropertyNames(this).reduce(function (acc, name) {
            if (name === 'loc' || name === 'parent') {
                return acc;
            }
            var value = _this[name];
            if (Array.isArray(value)) {
                acc[name] = value.map(function (val) {
                    return val.toJSON();
                });
            } else {
                acc[name] = value && value.toJSON ? value.toJSON() : value;
            }
            return acc;
        }, {
            type: this.type
        });
    };

    Node.registerType = function registerType(type) {
        if (Node['is' + type]) {
            return;
        }

        Node['is' + type] = function (node) {
            return is$1(node, type);
        };

        // Node['assert' + type] = function(node) {
        //   if (!is(node, type)) {
        //     throw new Error('Expected node to be of type ' + type + ' but was ' + (node ? node.type : 'undefined') + ' instead');
        //   }
        // };
    };

    return Node;
}();
Node.registerType('Scope');

function is$1(node, type) {
    if (!node) return false;

    return node.type === type || IS_ALIAS_OF[type] && IS_ALIAS_OF[type][node.type] || is(type, node);
}

function visitor(type) {
    for (var _len = arguments.length, fields = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        fields[_key - 1] = arguments[_key];
    }

    type.prototype.visitorKeys = fields;
}

function alias(type) {
    for (var _len2 = arguments.length, aliases = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        aliases[_key2 - 1] = arguments[_key2];
    }

    type.prototype.aliases = aliases;
    for (var i = 0, len = aliases.length; i < len; i++) {
        var _alias = aliases[i];
        if (!ALIAS_TO_TYPE[_alias]) {
            ALIAS_TO_TYPE[_alias] = [];
        }
        ALIAS_TO_TYPE[_alias].push(type.prototype.type);
        if (!IS_ALIAS_OF[_alias]) {
            IS_ALIAS_OF[_alias] = {};
        }
        IS_ALIAS_OF[_alias][type.prototype.type] = true;
        Node.registerType(_alias);
    }
}

function type(Type, type) {
    Type.prototype.type = type;
    TYPE_MAP[type] = Type;

    Node.registerType(type);
}

var Fragment = function (_Node) {
    inherits(Fragment, _Node);

    function Fragment(expression) {
        classCallCheck(this, Fragment);

        var _this2 = possibleConstructorReturn(this, _Node.call(this));

        _this2.value = expression;
        return _this2;
    }

    return Fragment;
}(Node);
type(Fragment, 'Fragment');
alias(Fragment, 'Statement');
visitor(Fragment, 'value');

var PrintExpressionStatement = function (_Node2) {
    inherits(PrintExpressionStatement, _Node2);

    function PrintExpressionStatement(expression) {
        classCallCheck(this, PrintExpressionStatement);

        var _this3 = possibleConstructorReturn(this, _Node2.call(this));

        _this3.value = expression;
        return _this3;
    }

    return PrintExpressionStatement;
}(Node);
type(PrintExpressionStatement, 'PrintExpressionStatement');
alias(PrintExpressionStatement, 'Statement', 'PrintStatement');
visitor(PrintExpressionStatement, 'value');

var PrintTextStatement = function (_Node3) {
    inherits(PrintTextStatement, _Node3);

    function PrintTextStatement(text) {
        classCallCheck(this, PrintTextStatement);

        var _this4 = possibleConstructorReturn(this, _Node3.call(this));

        _this4.value = text;
        return _this4;
    }

    return PrintTextStatement;
}(Node);
type(PrintTextStatement, 'PrintTextStatement');
alias(PrintTextStatement, 'Statement', 'PrintStatement');
visitor(PrintTextStatement, 'value');

var ConstantValue = function (_Node4) {
    inherits(ConstantValue, _Node4);

    function ConstantValue(value) {
        classCallCheck(this, ConstantValue);

        var _this5 = possibleConstructorReturn(this, _Node4.call(this));

        _this5.value = value;
        return _this5;
    }

    ConstantValue.prototype.toString = function toString() {
        return 'Const(' + this.value + ')';
    };

    return ConstantValue;
}(Node);
type(ConstantValue, 'ConstantValue');
alias(ConstantValue, 'Expression', 'Literal', 'Immutable');

var StringLiteral = function (_ConstantValue) {
    inherits(StringLiteral, _ConstantValue);

    function StringLiteral() {
        classCallCheck(this, StringLiteral);
        return possibleConstructorReturn(this, _ConstantValue.apply(this, arguments));
    }

    return StringLiteral;
}(ConstantValue);
type(StringLiteral, 'StringLiteral');
alias(StringLiteral, 'Expression', 'Literal', 'Immutable');

var NumericLiteral = function (_ConstantValue2) {
    inherits(NumericLiteral, _ConstantValue2);

    function NumericLiteral() {
        classCallCheck(this, NumericLiteral);
        return possibleConstructorReturn(this, _ConstantValue2.apply(this, arguments));
    }

    return NumericLiteral;
}(ConstantValue);
type(NumericLiteral, 'NumericLiteral');
alias(NumericLiteral, 'Expression', 'Literal', 'Immutable');

var BooleanLiteral = function (_ConstantValue3) {
    inherits(BooleanLiteral, _ConstantValue3);

    function BooleanLiteral(value) {
        classCallCheck(this, BooleanLiteral);
        return possibleConstructorReturn(this, _ConstantValue3.call(this, value));
    }

    return BooleanLiteral;
}(ConstantValue);
type(BooleanLiteral, 'BooleanLiteral');
alias(BooleanLiteral, 'Expression', 'Literal', 'Immutable');

var NullLiteral = function (_ConstantValue4) {
    inherits(NullLiteral, _ConstantValue4);

    function NullLiteral() {
        classCallCheck(this, NullLiteral);
        return possibleConstructorReturn(this, _ConstantValue4.call(this, null));
    }

    return NullLiteral;
}(ConstantValue);
type(NullLiteral, 'NullLiteral');
alias(NullLiteral, 'Expression', 'Literal', 'Immutable');

var Identifier = function (_Node5) {
    inherits(Identifier, _Node5);

    function Identifier(name) {
        classCallCheck(this, Identifier);

        var _this10 = possibleConstructorReturn(this, _Node5.call(this));

        _this10.name = name;
        return _this10;
    }

    return Identifier;
}(Node);
type(Identifier, 'Identifier');
alias(Identifier, 'Expression');

var UnaryExpression = function (_Node6) {
    inherits(UnaryExpression, _Node6);

    function UnaryExpression(operator, argument) {
        classCallCheck(this, UnaryExpression);

        var _this11 = possibleConstructorReturn(this, _Node6.call(this));

        _this11.operator = operator;
        _this11.argument = argument;
        return _this11;
    }

    return UnaryExpression;
}(Node);
type(UnaryExpression, 'UnaryExpression');
alias(UnaryExpression, 'Expression', 'UnaryLike');
visitor(UnaryExpression, 'argument');

var BinaryExpression = function (_Node7) {
    inherits(BinaryExpression, _Node7);

    function BinaryExpression(operator, left, right) {
        classCallCheck(this, BinaryExpression);

        var _this12 = possibleConstructorReturn(this, _Node7.call(this));

        _this12.operator = operator;
        _this12.left = left;
        _this12.right = right;
        return _this12;
    }

    return BinaryExpression;
}(Node);
type(BinaryExpression, 'BinaryExpression');
alias(BinaryExpression, 'Binary', 'Expression');
visitor(BinaryExpression, 'left', 'right');

var BinaryConcatExpression = function (_BinaryExpression) {
    inherits(BinaryConcatExpression, _BinaryExpression);

    function BinaryConcatExpression(left, right) {
        classCallCheck(this, BinaryConcatExpression);

        var _this13 = possibleConstructorReturn(this, _BinaryExpression.call(this, '~', left, right));

        _this13.wasImplicitConcatenation = false;
        return _this13;
    }

    return BinaryConcatExpression;
}(BinaryExpression);
type(BinaryConcatExpression, 'BinaryConcatExpression');
alias(BinaryConcatExpression, 'BinaryExpression', 'Binary', 'Expression');
visitor(BinaryConcatExpression, 'left', 'right');

var ConditionalExpression = function (_Node8) {
    inherits(ConditionalExpression, _Node8);

    function ConditionalExpression(test, consequent, alternate) {
        classCallCheck(this, ConditionalExpression);

        var _this14 = possibleConstructorReturn(this, _Node8.call(this));

        _this14.test = test;
        _this14.consequent = consequent;
        _this14.alternate = alternate;
        return _this14;
    }

    return ConditionalExpression;
}(Node);
type(ConditionalExpression, 'ConditionalExpression');
alias(ConditionalExpression, 'Expression', 'Conditional');
visitor(ConditionalExpression, 'test', 'consequent', 'alternate');

var ArrayExpression = function (_Node9) {
    inherits(ArrayExpression, _Node9);

    function ArrayExpression() {
        var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, ArrayExpression);

        var _this15 = possibleConstructorReturn(this, _Node9.call(this));

        _this15.elements = elements;
        return _this15;
    }

    return ArrayExpression;
}(Node);
type(ArrayExpression, 'ArrayExpression');
alias(ArrayExpression, 'Expression');
visitor(ArrayExpression, 'elements');

var MemberExpression = function (_Node10) {
    inherits(MemberExpression, _Node10);

    function MemberExpression(object, property, computed) {
        classCallCheck(this, MemberExpression);

        var _this16 = possibleConstructorReturn(this, _Node10.call(this));

        _this16.object = object;
        _this16.property = property;
        _this16.computed = computed;
        return _this16;
    }

    return MemberExpression;
}(Node);
type(MemberExpression, 'MemberExpression');
alias(MemberExpression, 'Expression', 'LVal');
visitor(MemberExpression, 'object', 'property');

var CallExpression = function (_Node11) {
    inherits(CallExpression, _Node11);

    function CallExpression(callee, args) {
        classCallCheck(this, CallExpression);

        var _this17 = possibleConstructorReturn(this, _Node11.call(this));

        _this17.callee = callee;
        _this17.arguments = args;
        return _this17;
    }

    return CallExpression;
}(Node);
type(CallExpression, 'CallExpression');
alias(CallExpression, 'Expression', 'FunctionInvocation');
visitor(CallExpression, 'callee', 'arguments');

var NamedArgumentExpression = function (_Node12) {
    inherits(NamedArgumentExpression, _Node12);

    function NamedArgumentExpression(name, value) {
        classCallCheck(this, NamedArgumentExpression);

        var _this18 = possibleConstructorReturn(this, _Node12.call(this));

        _this18.name = name;
        _this18.value = value;
        return _this18;
    }

    return NamedArgumentExpression;
}(Node);
type(NamedArgumentExpression, 'NamedArgumentExpression');
alias(NamedArgumentExpression, 'Expression');
visitor(NamedArgumentExpression, 'name', 'value');

var ObjectExpression = function (_Node13) {
    inherits(ObjectExpression, _Node13);

    function ObjectExpression() {
        var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, ObjectExpression);

        var _this19 = possibleConstructorReturn(this, _Node13.call(this));

        _this19.properties = properties;
        return _this19;
    }

    return ObjectExpression;
}(Node);
type(ObjectExpression, 'ObjectExpression');
alias(ObjectExpression, 'Expression');
visitor(ObjectExpression, 'properties');

var ObjectProperty = function (_Node14) {
    inherits(ObjectProperty, _Node14);

    function ObjectProperty(key, value, computed) {
        classCallCheck(this, ObjectProperty);

        var _this20 = possibleConstructorReturn(this, _Node14.call(this));

        _this20.key = key;
        _this20.value = value;
        _this20.computed = computed;
        return _this20;
    }

    return ObjectProperty;
}(Node);
type(ObjectProperty, 'ObjectProperty');
alias(ObjectProperty, 'Property', 'ObjectMember');
visitor(ObjectProperty, 'key', 'value');

var SequenceExpression = function (_Node15) {
    inherits(SequenceExpression, _Node15);

    function SequenceExpression() {
        var expressions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, SequenceExpression);

        var _this21 = possibleConstructorReturn(this, _Node15.call(this));

        _this21.expressions = expressions;
        return _this21;
    }

    SequenceExpression.prototype.add = function add(child) {
        this.expressions.push(child);
        this.loc.end = child.loc.end;
    };

    return SequenceExpression;
}(Node);
type(SequenceExpression, 'SequenceExpression');
alias(SequenceExpression, 'Expression', 'Scope');
visitor(SequenceExpression, 'expressions');

var SliceExpression = function (_Node16) {
    inherits(SliceExpression, _Node16);

    function SliceExpression(target, start, end) {
        classCallCheck(this, SliceExpression);

        var _this22 = possibleConstructorReturn(this, _Node16.call(this));

        _this22.target = target;
        _this22.start = start;
        _this22.end = end;
        return _this22;
    }

    return SliceExpression;
}(Node);
type(SliceExpression, 'SliceExpression');
alias(SliceExpression, 'Expression');
visitor(SliceExpression, 'source', 'start', 'end');

var FilterExpression = function (_Node17) {
    inherits(FilterExpression, _Node17);

    function FilterExpression(target, name, args) {
        classCallCheck(this, FilterExpression);

        var _this23 = possibleConstructorReturn(this, _Node17.call(this));

        _this23.target = target;
        _this23.name = name;
        _this23.arguments = args;
        return _this23;
    }

    return FilterExpression;
}(Node);
type(FilterExpression, 'FilterExpression');
alias(FilterExpression, 'Expression');
visitor(FilterExpression, 'target', 'arguments');

var Element = function (_Node18) {
    inherits(Element, _Node18);

    function Element(name) {
        classCallCheck(this, Element);

        var _this24 = possibleConstructorReturn(this, _Node18.call(this));

        _this24.name = name;
        _this24.attributes = [];
        _this24.children = [];
        _this24.selfClosing = false;
        return _this24;
    }

    return Element;
}(Node);
type(Element, 'Element');
alias(Element, 'Expression');
visitor(Element, 'attributes', 'children');

var Attribute = function (_Node19) {
    inherits(Attribute, _Node19);

    function Attribute(name) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        classCallCheck(this, Attribute);

        var _this25 = possibleConstructorReturn(this, _Node19.call(this));

        _this25.name = name;
        _this25.value = value;
        return _this25;
    }

    Attribute.prototype.isImmutable = function isImmutable() {
        return is$1(this.name, 'Identifier') && is$1(this.value, 'Immutable');
    };

    return Attribute;
}(Node);
type(Attribute, 'Attribute');
visitor(Attribute, 'name', 'value');

var TwigComment = function (_Node20) {
    inherits(TwigComment, _Node20);

    function TwigComment(text) {
        classCallCheck(this, TwigComment);

        var _this26 = possibleConstructorReturn(this, _Node20.call(this));

        _this26.value = text;
        return _this26;
    }

    return TwigComment;
}(Node);
type(TwigComment, 'TwigComment');
visitor(TwigComment, 'value');

var HtmlComment = function (_Node21) {
    inherits(HtmlComment, _Node21);

    function HtmlComment(text) {
        classCallCheck(this, HtmlComment);

        var _this27 = possibleConstructorReturn(this, _Node21.call(this));

        _this27.value = text;
        return _this27;
    }

    return HtmlComment;
}(Node);
type(HtmlComment, 'HtmlComment');
visitor(HtmlComment, 'value');

var Declaration = function (_Node22) {
    inherits(Declaration, _Node22);

    function Declaration(declarationType) {
        classCallCheck(this, Declaration);

        var _this28 = possibleConstructorReturn(this, _Node22.call(this));

        _this28.declarationType = declarationType;
        _this28.parts = [];
        return _this28;
    }

    return Declaration;
}(Node);
type(Declaration, 'Declaration');
visitor(Declaration, 'parts');

var GenericTwigTag = function (_Node23) {
    inherits(GenericTwigTag, _Node23);

    function GenericTwigTag(tagName) {
        classCallCheck(this, GenericTwigTag);

        var _this29 = possibleConstructorReturn(this, _Node23.call(this));

        _this29.tagName = tagName;
        _this29.parts = [];
        _this29.sections = [];
        return _this29;
    }

    return GenericTwigTag;
}(Node);
type(GenericTwigTag, 'GenericTwigTag');

var GenericToken = function (_Node24) {
    inherits(GenericToken, _Node24);

    function GenericToken(tokenType, tokenText) {
        classCallCheck(this, GenericToken);

        var _this30 = possibleConstructorReturn(this, _Node24.call(this));

        _this30.tokenType = tokenType;
        _this30.tokenText = tokenText;
        return _this30;
    }

    return GenericToken;
}(Node);
type(GenericToken, 'GenericToken');

export { TYPE_MAP, ALIAS_TO_TYPE, PATH_CACHE_KEY, Node, is$1 as is, visitor, alias, type, Fragment, PrintExpressionStatement, PrintTextStatement, ConstantValue, StringLiteral, NumericLiteral, BooleanLiteral, NullLiteral, Identifier, UnaryExpression, BinaryExpression, BinaryConcatExpression, ConditionalExpression, ArrayExpression, MemberExpression, CallExpression, NamedArgumentExpression, ObjectExpression, ObjectProperty, SequenceExpression, SliceExpression, FilterExpression, Element, Attribute, TwigComment, HtmlComment, Declaration, GenericTwigTag, GenericToken };
