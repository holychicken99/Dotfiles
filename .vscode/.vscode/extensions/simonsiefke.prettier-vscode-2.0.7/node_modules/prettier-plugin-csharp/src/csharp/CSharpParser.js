// jshint ignore: start
var antlr4 = require("antlr4/index");
var CSharpParserListener = require("./CSharpParserListener")
  .CSharpParserListener;
var grammarFileName = "CSharpParser.g4";

var serializedATN = [
  "\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
  "\u0003\u00c4\u0992\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
  "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
  "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
  "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
  "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
  "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
  "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
  "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
  '\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#\t#\u0004',
  "$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
  "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
  "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
  "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
  "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
  "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
  "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
  "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
  "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
  "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
  "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
  "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
  "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
  "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
  "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
  "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
  "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
  "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
  "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
  "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
  "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
  "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
  "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
  "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
  "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
  "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
  "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
  "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
  "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
  "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
  "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
  "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
  "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
  "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
  "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
  "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
  "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0003",
  "\u0002\u0005\u0002\u01a6\n\u0002\u0003\u0002\u0005\u0002\u01a9\n\u0002",
  "\u0003\u0002\u0005\u0002\u01ac\n\u0002\u0003\u0002\u0007\u0002\u01af",
  "\n\u0002\f\u0002\u000e\u0002\u01b2\u000b\u0002\u0003\u0002\u0005\u0002",
  "\u01b5\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005",
  "\u0003\u01bb\n\u0003\u0003\u0003\u0005\u0003\u01be\n\u0003\u0003\u0003",
  "\u0003\u0003\u0003\u0003\u0005\u0003\u01c3\n\u0003\u0007\u0003\u01c5",
  "\n\u0003\f\u0003\u000e\u0003\u01c8\u000b\u0003\u0003\u0004\u0003\u0004",
  "\u0003\u0004\u0003\u0004\u0007\u0004\u01ce\n\u0004\f\u0004\u000e\u0004",
  "\u01d1\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
  "\u0005\u0005\u0005\u01d8\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006",
  "\u01dc\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01e1",
  "\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003",
  "\n\u0007\n\u01eb\n\n\f\n\u000e\n\u01ee\u000b\n\u0003\n\u0003\n\u0003",
  "\u000b\u0003\u000b\u0005\u000b\u01f4\n\u000b\u0003\f\u0003\f\u0003\f",
  "\u0003\f\u0005\f\u01fa\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0200",
  "\n\r\f\r\u000e\r\u0203\u000b\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e",
  "\u0003\u000e\u0007\u000e\u020a\n\u000e\f\u000e\u000e\u000e\u020d\u000b",
  "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0212\n\u000f",
  "\u0003\u000f\u0005\u000f\u0215\n\u000f\u0003\u000f\u0003\u000f\u0003",
  "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u021c\n\u0010\u0003\u0010",
  "\u0005\u0010\u021f\n\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u0223",
  "\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0228\n\u0012",
  "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
  "\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0239\n\u0014\u0003",
  "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
  "\u0015\u0241\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
  "\u0246\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u024b",
  "\n\u0017\f\u0017\u000e\u0017\u024e\u000b\u0017\u0003\u0018\u0003\u0018",
  "\u0003\u0018\u0007\u0018\u0253\n\u0018\f\u0018\u000e\u0018\u0256\u000b",
  "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u025b\n\u0019",
  "\f\u0019\u000e\u0019\u025e\u000b\u0019\u0003\u001a\u0003\u001a\u0003",
  "\u001a\u0007\u001a\u0263\n\u001a\f\u001a\u000e\u001a\u0266\u000b\u001a",
  "\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u026b\n\u001b\f\u001b",
  "\u000e\u001b\u026e\u000b\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0007",
  "\u001c\u0273\n\u001c\f\u001c\u000e\u001c\u0276\u000b\u001c\u0003\u001d",
  "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
  "\u0007\u001d\u027f\n\u001d\f\u001d\u000e\u001d\u0282\u000b\u001d\u0003",
  "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0287\n\u001e\u0003\u001e",
  "\u0007\u001e\u028a\n\u001e\f\u001e\u000e\u001e\u028d\u000b\u001e\u0003",
  "\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0292\n\u001f\f\u001f\u000e",
  "\u001f\u0295\u000b\u001f\u0003 \u0003 \u0003 \u0007 \u029a\n \f \u000e",
  " \u029d\u000b \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
  "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
  '!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u02b7\n!\u0003"',
  '\u0003"\u0007"\u02bb\n"\f"\u000e"\u02be\u000b"\u0003"\u0005"',
  '\u02c1\n"\u0003"\u0003"\u0003"\u0003"\u0003"\u0003"\u0003"\u0005',
  '"\u02ca\n"\u0003"\u0007"\u02cd\n"\f"\u000e"\u02d0\u000b"\u0007',
  '"\u02d2\n"\f"\u000e"\u02d5\u000b"\u0003#\u0003#\u0003#\u0003#\u0003',
  "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
  "#\u0005#\u02e6\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u02ec\n#\u0003",
  "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u02f6\n#\f",
  "#\u000e#\u02f9\u000b#\u0003#\u0005#\u02fc\n#\u0003#\u0006#\u02ff\n#",
  "\r#\u000e#\u0300\u0003#\u0003#\u0005#\u0305\n#\u0003#\u0003#\u0003#",
  "\u0003#\u0005#\u030b\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0312",
  "\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
  "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0324\n#\u0003#\u0005",
  "#\u0327\n#\u0003#\u0003#\u0003#\u0005#\u032c\n#\u0003#\u0005#\u032f",
  "\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
  "#\u0003#\u0007#\u033c\n#\f#\u000e#\u033f\u000b#\u0003#\u0003#\u0003",
  "#\u0005#\u0344\n#\u0003$\u0003$\u0005$\u0348\n$\u0003%\u0005%\u034b",
  "\n%\u0003%\u0003%\u0003%\u0003%\u0007%\u0351\n%\f%\u000e%\u0354\u000b",
  "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0005&\u035b\n&\u0003&\u0003&\u0003",
  "'\u0003'\u0003(\u0003(\u0003(\u0007(\u0364\n(\f(\u000e(\u0367\u000b",
  "(\u0003)\u0003)\u0005)\u036b\n)\u0003*\u0003*\u0003*\u0005*\u0370\n",
  "*\u0005*\u0372\n*\u0003*\u0003*\u0003+\u0003+\u0003+\u0007+\u0379\n",
  "+\f+\u000e+\u037c\u000b+\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u0383",
  "\n,\u0003,\u0003,\u0003,\u0003-\u0003-\u0005-\u038a\n-\u0003.\u0003",
  ".\u0003.\u0003.\u0007.\u0390\n.\f.\u000e.\u0393\u000b.\u0003.\u0005",
  ".\u0396\n.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0007/\u039e\n",
  "/\f/\u000e/\u03a1\u000b/\u0003/\u0003/\u00030\u00030\u00030\u00050\u03a8",
  "\n0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00051\u03b1\n",
  "1\u00032\u00032\u00032\u00052\u03b6\n2\u00052\u03b8\n2\u00032\u0003",
  "2\u00033\u00033\u00033\u00073\u03bf\n3\f3\u000e3\u03c2\u000b3\u0003",
  "4\u00034\u00034\u00034\u00034\u00054\u03c9\n4\u00035\u00035\u00055\u03cd",
  "\n5\u00035\u00035\u00035\u00055\u03d2\n5\u00055\u03d4\n5\u00035\u0003",
  "5\u00035\u00055\u03d9\n5\u00075\u03db\n5\f5\u000e5\u03de\u000b5\u0003",
  "6\u00036\u00076\u03e2\n6\f6\u000e6\u03e5\u000b6\u00036\u00036\u0003",
  "7\u00037\u00037\u00077\u03ec\n7\f7\u000e7\u03ef\u000b7\u00037\u0005",
  "7\u03f2\n7\u00037\u00057\u03f5\n7\u00038\u00058\u03f8\n8\u00038\u0003",
  "8\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
  "9\u00039\u00039\u00039\u00059\u0409\n9\u0003:\u0003:\u0003:\u0007:\u040e",
  "\n:\f:\u000e:\u0411\u000b:\u0003;\u0005;\u0414\n;\u0003;\u0003;\u0003",
  ";\u0003<\u0003<\u0003<\u0007<\u041c\n<\f<\u000e<\u041f\u000b<\u0003",
  "=\u0003=\u0005=\u0423\n=\u0003>\u0003>\u0003>\u0003?\u0003?\u0005?\u042a",
  "\n?\u0003?\u0003?\u0003?\u0003?\u0003@\u0007@\u0431\n@\f@\u000e@\u0434",
  "\u000b@\u0003@\u0003@\u0005@\u0438\n@\u0003A\u0003A\u0003A\u0003A\u0003",
  "A\u0005A\u043f\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003",
  "C\u0003D\u0003D\u0005D\u044b\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
  "D\u0003D\u0003D\u0003D\u0005D\u0456\nD\u0003E\u0003E\u0003E\u0003E\u0007",
  "E\u045c\nE\fE\u000eE\u045f\u000bE\u0003F\u0003F\u0005F\u0463\nF\u0003",
  "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u046c\nG\u0003H\u0003",
  "H\u0003H\u0003H\u0003I\u0003I\u0003I\u0005I\u0475\nI\u0003I\u0003I\u0003",
  "I\u0005I\u047a\nI\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0005K\u0482",
  "\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0005L\u048f\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0007",
  "L\u0497\nL\fL\u000eL\u049a\u000bL\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0003L\u0003L\u0003L\u0005L\u04af\nL\u0003L\u0003L\u0005L\u04b3",
  "\nL\u0003L\u0003L\u0005L\u04b7\nL\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u04cd\nL\u0003L\u0003L\u0003",
  "L\u0005L\u04d2\nL\u0003L\u0003L\u0003L\u0005L\u04d7\nL\u0003L\u0003",
  "L\u0003L\u0003L\u0003L\u0005L\u04de\nL\u0003L\u0005L\u04e1\nL\u0003",
  "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005",
  "L\u04f7\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
  "L\u0003L\u0005L\u0503\nL\u0003M\u0003M\u0005M\u0507\nM\u0003M\u0003",
  "M\u0003N\u0003N\u0003N\u0003N\u0007N\u050f\nN\fN\u000eN\u0512\u000b",
  "N\u0003O\u0003O\u0005O\u0516\nO\u0003P\u0003P\u0003P\u0005P\u051b\n",
  "P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u0522\nQ\fQ\u000eQ\u0525",
  "\u000bQ\u0003Q\u0003Q\u0005Q\u0529\nQ\u0003R\u0003R\u0003R\u0005R\u052e",
  "\nR\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0005T\u0536\nT\u0003",
  "U\u0006U\u0539\nU\rU\u000eU\u053a\u0003U\u0003U\u0003V\u0003V\u0005",
  "V\u0541\nV\u0003V\u0003V\u0005V\u0545\nV\u0003V\u0003V\u0003V\u0003",
  "V\u0005V\u054b\nV\u0003W\u0003W\u0003W\u0003X\u0006X\u0551\nX\rX\u000e",
  "X\u0552\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0559\nY\fY\u000eY\u055c",
  "\u000bY\u0005Y\u055e\nY\u0003Z\u0003Z\u0003Z\u0007Z\u0563\nZ\fZ\u000e",
  "Z\u0566\u000bZ\u0003[\u0003[\u0007[\u056a\n[\f[\u000e[\u056d\u000b[",
  "\u0003[\u0005[\u0570\n[\u0003[\u0005[\u0573\n[\u0003\\\u0003\\\u0003",
  "\\\u0003\\\u0005\\\u0579\n\\\u0003\\\u0003\\\u0005\\\u057d\n\\\u0003",
  "\\\u0003\\\u0003]\u0003]\u0005]\u0583\n]\u0003]\u0003]\u0003^\u0003",
  "^\u0003^\u0003^\u0003^\u0003_\u0003_\u0003_\u0003`\u0003`\u0005`\u0591",
  "\n`\u0003a\u0003a\u0003a\u0003a\u0005a\u0597\na\u0003b\u0003b\u0003",
  "b\u0007b\u059c\nb\fb\u000eb\u059f\u000bb\u0003c\u0003c\u0005c\u05a3",
  "\nc\u0003c\u0005c\u05a6\nc\u0003c\u0005c\u05a9\nc\u0003c\u0003c\u0003",
  "d\u0006d\u05ae\nd\rd\u000ed\u05af\u0003e\u0003e\u0003e\u0003e\u0003",
  "e\u0003f\u0006f\u05b8\nf\rf\u000ef\u05b9\u0003g\u0003g\u0003g\u0003",
  "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
  "g\u0003g\u0005g\u05cb\ng\u0003h\u0006h\u05ce\nh\rh\u000eh\u05cf\u0003",
  "i\u0003i\u0005i\u05d4\ni\u0003j\u0005j\u05d7\nj\u0003j\u0005j\u05da",
  "\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u05e1\nj\u0003k\u0003",
  "k\u0003k\u0003k\u0005k\u05e7\nk\u0003l\u0003l\u0003l\u0003l\u0007l\u05ed",
  "\nl\fl\u000el\u05f0\u000bl\u0003l\u0003l\u0003m\u0005m\u05f5\nm\u0003",
  "m\u0003m\u0003n\u0003n\u0003n\u0003n\u0007n\u05fd\nn\fn\u000en\u0600",
  "\u000bn\u0003o\u0003o\u0003o\u0007o\u0605\no\fo\u000eo\u0608\u000bo",
  "\u0003p\u0006p\u060b\np\rp\u000ep\u060c\u0003q\u0003q\u0003q\u0003q",
  "\u0003q\u0003r\u0003r\u0003r\u0003r\u0005r\u0618\nr\u0003r\u0003r\u0005",
  "r\u061c\nr\u0005r\u061e\nr\u0003s\u0003s\u0003s\u0005s\u0623\ns\u0003",
  "t\u0003t\u0003t\u0007t\u0628\nt\ft\u000et\u062b\u000bt\u0003u\u0003",
  "u\u0003u\u0003u\u0003v\u0003v\u0005v\u0633\nv\u0003v\u0003v\u0003w\u0006",
  "w\u0638\nw\rw\u000ew\u0639\u0003x\u0005x\u063d\nx\u0003x\u0005x\u0640",
  "\nx\u0003x\u0003x\u0005x\u0644\nx\u0003y\u0006y\u0647\ny\ry\u000ey\u0648",
  "\u0003z\u0003z\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
  "{\u0003{\u0005{\u0656\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
  "{\u0003{\u0005{\u0660\n{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
  "|\u0003|\u0003|\u0003|\u0005|\u066c\n|\u0003}\u0003}\u0003}\u0007}\u0671",
  "\n}\f}\u000e}\u0674\u000b}\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003",
  "\u007f\u0003\u007f\u0007\u007f\u067d\n\u007f\f\u007f\u000e\u007f\u0680",
  "\u000b\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0685\n",
  "\u0080\u0003\u0081\u0003\u0081\u0005\u0081\u0689\n\u0081\u0003\u0082",
  "\u0003\u0082\u0005\u0082\u068d\n\u0082\u0003\u0083\u0003\u0083\u0003",
  "\u0084\u0003\u0084\u0005\u0084\u0693\n\u0084\u0003\u0085\u0003\u0085",
  "\u0003\u0085\u0003\u0085\u0005\u0085\u0699\n\u0085\u0005\u0085\u069b",
  "\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0007\u0086\u06a0\n\u0086",
  "\f\u0086\u000e\u0086\u06a3\u000b\u0086\u0003\u0087\u0005\u0087\u06a6",
  "\n\u0087\u0003\u0087\u0005\u0087\u06a9\n\u0087\u0003\u0087\u0003\u0087",
  "\u0005\u0087\u06ad\n\u0087\u0003\u0088\u0003\u0088\u0003\u0089\u0005",
  "\u0089\u06b2\n\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
  "\u0003\u008a\u0005\u008a\u06b9\n\u008a\u0003\u008a\u0005\u008a\u06bc",
  "\n\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u06c1\n\u008a",
  "\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u06c6\n\u008a\u0005",
  "\u008a\u06c8\n\u008a\u0003\u008b\u0005\u008b\u06cb\n\u008b\u0003\u008b",
  "\u0005\u008b\u06ce\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
  "\u008c\u0005\u008c\u06d4\n\u008c\u0003\u008c\u0005\u008c\u06d7\n\u008c",
  "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008d",
  "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u06e3\n",
  "\u008d\u0003\u008e\u0003\u008e\u0005\u008e\u06e7\n\u008e\u0003\u008f",
  "\u0005\u008f\u06ea\n\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
  "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u06f4",
  "\n\u008f\u0003\u0090\u0005\u0090\u06f7\n\u0090\u0003\u0090\u0003\u0090",
  "\u0003\u0090\u0003\u0091\u0005\u0091\u06fd\n\u0091\u0003\u0091\u0003",
  "\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
  "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
  "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
  "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005",
  "\u0092\u0718\n\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
  "\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003\u0094",
  "\u0003\u0094\u0005\u0094\u0725\n\u0094\u0003\u0094\u0003\u0094\u0003",
  "\u0095\u0003\u0095\u0005\u0095\u072b\n\u0095\u0003\u0096\u0003\u0096",
  "\u0003\u0096\u0003\u0097\u0003\u0097\u0007\u0097\u0732\n\u0097\f\u0097",
  "\u000e\u0097\u0735\u000b\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0005",
  "\u0098\u073a\n\u0098\u0003\u0098\u0005\u0098\u073d\n\u0098\u0003\u0098",
  "\u0003\u0098\u0003\u0098\u0003\u0098\u0006\u0098\u0743\n\u0098\r\u0098",
  "\u000e\u0098\u0744\u0003\u0098\u0003\u0098\u0005\u0098\u0749\n\u0098",
  "\u0003\u0099\u0003\u0099\u0007\u0099\u074d\n\u0099\f\u0099\u000e\u0099",
  "\u0750\u000b\u0099\u0003\u0099\u0006\u0099\u0753\n\u0099\r\u0099\u000e",
  "\u0099\u0754\u0003\u009a\u0003\u009a\u0007\u009a\u0759\n\u009a\f\u009a",
  "\u000e\u009a\u075c\u000b\u009a\u0003\u009a\u0003\u009a\u0003\u009b\u0003",
  "\u009b\u0003\u009b\u0003\u009b\u0007\u009b\u0764\n\u009b\f\u009b\u000e",
  "\u009b\u0767\u000b\u009b\u0003\u009b\u0005\u009b\u076a\n\u009b\u0005",
  "\u009b\u076c\n\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c",
  "\u0003\u009c\u0003\u009c\u0007\u009c\u0774\n\u009c\f\u009c\u000e\u009c",
  "\u0777\u000b\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0005\u009d\u077c",
  "\n\u009d\u0003\u009d\u0005\u009d\u077f\n\u009d\u0003\u009d\u0003\u009d",
  "\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u00a0",
  "\u0003\u00a0\u0007\u00a0\u078a\n\u00a0\f\u00a0\u000e\u00a0\u078d\u000b",
  "\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0005\u00a1\u0792\n\u00a1",
  "\u0003\u00a1\u0005\u00a1\u0795\n\u00a1\u0003\u00a1\u0005\u00a1\u0798",
  "\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u079d\n\u00a1",
  "\u0003\u00a1\u0003\u00a1\u0005\u00a1\u07a1\n\u00a1\u0003\u00a1\u0003",
  "\u00a1\u0005\u00a1\u07a5\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
  "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
  "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
  "\u0005\u00a1\u07b6\n\u00a1\u0003\u00a1\u0005\u00a1\u07b9\n\u00a1\u0003",
  "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u07be\n\u00a1\u0003\u00a1",
  "\u0003\u00a1\u0005\u00a1\u07c2\n\u00a1\u0003\u00a1\u0003\u00a1\u0005",
  "\u00a1\u07c6\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
  "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u07cf\n\u00a1\u0003",
  "\u00a2\u0005\u00a2\u07d2\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
  "\u0005\u00a2\u07d7\n\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u07db",
  "\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u07e0\n\u00a2",
  "\u0003\u00a2\u0003\u00a2\u0005\u00a2\u07e4\n\u00a2\u0005\u00a2\u07e6",
  "\n\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4",
  "\u0003\u00a4\u0003\u00a4\u0007\u00a4\u07ef\n\u00a4\f\u00a4\u000e\u00a4",
  "\u07f2\u000b\u00a4\u0003\u00a4\u0005\u00a4\u07f5\n\u00a4\u0005\u00a4",
  "\u07f7\n\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0005\u00a5\u07fc",
  "\n\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5\u0801\n\u00a5",
  "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6",
  "\u0808\n\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0005",
  "\u00a7\u080e\n\u00a7\u0003\u00a8\u0006\u00a8\u0811\n\u00a8\r\u00a8\u000e",
  "\u00a8\u0812\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0005\u00a9",
  "\u0819\n\u00a9\u0003\u00a9\u0003\u00a9\u0005\u00a9\u081d\n\u00a9\u0003",
  "\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0823\n\u00aa",
  "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0007\u00ab\u0828\n\u00ab\f\u00ab",
  "\u000e\u00ab\u082b\u000b\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003",
  "\u00ac\u0003\u00ac\u0007\u00ac\u0832\n\u00ac\f\u00ac\u000e\u00ac\u0835",
  "\u000b\u00ac\u0005\u00ac\u0837\n\u00ac\u0003\u00ac\u0005\u00ac\u083a",
  "\n\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u083f\n\u00ad",
  "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0845\n",
  "\u00ae\u0003\u00ae\u0003\u00ae\u0007\u00ae\u0849\n\u00ae\f\u00ae\u000e",
  "\u00ae\u084c\u000b\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
  "\u0005\u00ae\u0852\n\u00ae\u0003\u00af\u0003\u00af\u0003\u00af\u0007",
  "\u00af\u0857\n\u00af\f\u00af\u000e\u00af\u085a\u000b\u00af\u0003\u00b0",
  "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0005\u00b1\u0861\n",
  "\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0865\n\u00b1\u0003\u00b2",
  "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3",
  "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4",
  "\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
  "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7",
  "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7",
  "\u0885\n\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003",
  "\u00b9\u0003\u00b9\u0005\u00b9\u088d\n\u00b9\u0003\u00ba\u0003\u00ba",
  "\u0007\u00ba\u0891\n\u00ba\f\u00ba\u000e\u00ba\u0894\u000b\u00ba\u0003",
  "\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0007\u00bb\u089a\n\u00bb",
  "\f\u00bb\u000e\u00bb\u089d\u000b\u00bb\u0003\u00bb\u0003\u00bb\u0003",
  "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc\u08a5\n\u00bc",
  "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u08ab\n",
  "\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0007\u00be\u08b0\n\u00be",
  "\f\u00be\u000e\u00be\u08b3\u000b\u00be\u0003\u00be\u0003\u00be\u0006",
  "\u00be\u08b7\n\u00be\r\u00be\u000e\u00be\u08b8\u0005\u00be\u08bb\n\u00be",
  "\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0",
  "\u08c2\n\u00c0\u0003\u00c0\u0005\u00c0\u08c5\n\u00c0\u0003\u00c0\u0005",
  "\u00c0\u08c8\n\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0\u08cc\n\u00c0",
  "\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1\u08d1\n\u00c1\u0003",
  "\u00c1\u0005\u00c1\u08d4\n\u00c1\u0003\u00c1\u0005\u00c1\u08d7\n\u00c1",
  "\u0003\u00c1\u0003\u00c1\u0005\u00c1\u08db\n\u00c1\u0003\u00c2\u0003",
  "\u00c2\u0003\u00c2\u0005\u00c2\u08e0\n\u00c2\u0003\u00c2\u0005\u00c2",
  "\u08e3\n\u00c2\u0003\u00c2\u0005\u00c2\u08e6\n\u00c2\u0003\u00c2\u0003",
  "\u00c2\u0005\u00c2\u08ea\n\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3",
  "\u0005\u00c3\u08ef\n\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u08f3",
  "\n\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4",
  "\u08f9\n\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u08fd\n\u00c4\u0003",
  "\u00c4\u0003\u00c4\u0005\u00c4\u0901\n\u00c4\u0003\u00c4\u0003\u00c4",
  "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
  "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u090f\n",
  "\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003",
  "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005",
  "\u00c7\u091c\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
  "\u0005\u00c7\u0922\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003",
  "\u00c8\u0003\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
  "\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
  "\u00c9\u0003\u00c9\u0005\u00c9\u0935\n\u00c9\u0003\u00ca\u0003\u00ca",
  "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb",
  "\u0003\u00cb\u0005\u00cb\u0940\n\u00cb\u0003\u00cb\u0003\u00cb\u0005",
  "\u00cb\u0944\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cc\u0003\u00cc",
  "\u0005\u00cc\u094a\n\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u094e",
  "\n\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0952\n\u00cc\u0003\u00cc",
  "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0959\n",
  "\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0005",
  "\u00cd\u0960\n\u00cd\u0003\u00cd\u0005\u00cd\u0963\n\u00cd\u0003\u00cd",
  "\u0003\u00cd\u0007\u00cd\u0967\n\u00cd\f\u00cd\u000e\u00cd\u096a\u000b",
  "\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003",
  "\u00ce\u0005\u00ce\u0972\n\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce",
  "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u097a\n\u00ce\u0003",
  "\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0980\n\u00cf",
  "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0984\n\u00d0\u0003\u00d0\u0003",
  "\u00d0\u0003\u00d1\u0003\u00d1\u0005\u00d1\u098a\n\u00d1\u0003\u00d1",
  "\u0003\u00d1\u0005\u00d1\u098e\n\u00d1\u0003\u00d2\u0003\u00d2\u0003",
  "\u00d2\u0002\u0002\u00d3\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
  '\u0016\u0018\u001a\u001c\u001e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd',
  "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
  "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
  "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0",
  "\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8",
  "\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0",
  "\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108",
  "\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120",
  "\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138",
  "\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150",
  "\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168",
  "\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180",
  "\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198",
  "\u019a\u019c\u019e\u01a0\u01a2\u0002\u0014\n\u0002\u0018\u0018\u001b",
  "\u001b::BBVVZZfgjj\u0004\u0002%%00\u0004\u0002KKSS\u0003\u0002\u009d",
  "\u009e\u0004\u0002\u0093\u0094\u009f\u00a0\u0003\u0002\u0088\u0089\u0003",
  "\u0002\u008a\u008c\u0010\u0002\u0015\u0015\u0018\u0018\u001b\u001b ",
  " %%00::BBGGVVZZ^^fgjj\u0004\u0002\u0011\u0011##\u000e\u0002\f\f\u0012",
  "\u0012,,<<EELLNRWW]]iimmoo\u0005\u0002KKSSaa\u0004\u0002++88\u0004\u0002",
  "\u0014\u0014aa\u0004\u0002\u008a\u008a\u0095\u0095\u0004\u000299KK\u0004",
  "\u0002--cc\u0015\u0002\f\f\u0010\u0010\u0014\u0016\u0018\"$%'(*255",
  "7<>>ABDGIIKMOSUWZkmorr\u0015\u0002\r\u000f\u0011\u0013\u0017\u0017#",
  "#&&))3466==?@CCHHJJNNTTXYllpqst\u0002\u0a75\u0002\u01a5\u0003\u0002",
  "\u0002\u0002\u0004\u01bd\u0003\u0002\u0002\u0002\u0006\u01c9\u0003\u0002",
  "\u0002\u0002\b\u01d7\u0003\u0002\u0002\u0002\n\u01db\u0003\u0002\u0002",
  "\u0002\f\u01e0\u0003\u0002\u0002\u0002\u000e\u01e2\u0003\u0002\u0002",
  "\u0002\u0010\u01e4\u0003\u0002\u0002\u0002\u0012\u01e6\u0003\u0002\u0002",
  "\u0002\u0014\u01f1\u0003\u0002\u0002\u0002\u0016\u01f9\u0003\u0002\u0002",
  "\u0002\u0018\u01fb\u0003\u0002\u0002\u0002\u001a\u0206\u0003\u0002\u0002",
  "\u0002\u001c\u0211\u0003\u0002\u0002\u0002\u001e\u021e\u0003\u0002\u0002",
  '\u0002 \u0222\u0003\u0002\u0002\u0002"\u0227\u0003\u0002\u0002\u0002',
  "$\u0229\u0003\u0002\u0002\u0002&\u0238\u0003\u0002\u0002\u0002(\u023a",
  "\u0003\u0002\u0002\u0002*\u0242\u0003\u0002\u0002\u0002,\u0247\u0003",
  "\u0002\u0002\u0002.\u024f\u0003\u0002\u0002\u00020\u0257\u0003\u0002",
  "\u0002\u00022\u025f\u0003\u0002\u0002\u00024\u0267\u0003\u0002\u0002",
  "\u00026\u026f\u0003\u0002\u0002\u00028\u0277\u0003\u0002\u0002\u0002",
  ":\u0283\u0003\u0002\u0002\u0002<\u028e\u0003\u0002\u0002\u0002>\u0296",
  "\u0003\u0002\u0002\u0002@\u02b6\u0003\u0002\u0002\u0002B\u02b8\u0003",
  "\u0002\u0002\u0002D\u0343\u0003\u0002\u0002\u0002F\u0345\u0003\u0002",
  "\u0002\u0002H\u034a\u0003\u0002\u0002\u0002J\u035a\u0003\u0002\u0002",
  "\u0002L\u035e\u0003\u0002\u0002\u0002N\u0360\u0003\u0002\u0002\u0002",
  "P\u036a\u0003\u0002\u0002\u0002R\u036c\u0003\u0002\u0002\u0002T\u0375",
  "\u0003\u0002\u0002\u0002V\u0382\u0003\u0002\u0002\u0002X\u0389\u0003",
  "\u0002\u0002\u0002Z\u038b\u0003\u0002\u0002\u0002\\\u0399\u0003\u0002",
  "\u0002\u0002^\u03a7\u0003\u0002\u0002\u0002`\u03b0\u0003\u0002\u0002",
  "\u0002b\u03b2\u0003\u0002\u0002\u0002d\u03bb\u0003\u0002\u0002\u0002",
  "f\u03c8\u0003\u0002\u0002\u0002h\u03ca\u0003\u0002\u0002\u0002j\u03df",
  "\u0003\u0002\u0002\u0002l\u03e8\u0003\u0002\u0002\u0002n\u03f7\u0003",
  "\u0002\u0002\u0002p\u0408\u0003\u0002\u0002\u0002r\u040a\u0003\u0002",
  "\u0002\u0002t\u0413\u0003\u0002\u0002\u0002v\u0418\u0003\u0002\u0002",
  "\u0002x\u0422\u0003\u0002\u0002\u0002z\u0424\u0003\u0002\u0002\u0002",
  "|\u0427\u0003\u0002\u0002\u0002~\u0432\u0003\u0002\u0002\u0002\u0080",
  "\u043e\u0003\u0002\u0002\u0002\u0082\u0440\u0003\u0002\u0002\u0002\u0084",
  "\u0445\u0003\u0002\u0002\u0002\u0086\u0448\u0003\u0002\u0002\u0002\u0088",
  "\u0457\u0003\u0002\u0002\u0002\u008a\u0460\u0003\u0002\u0002\u0002\u008c",
  "\u046b\u0003\u0002\u0002\u0002\u008e\u046d\u0003\u0002\u0002\u0002\u0090",
  "\u0479\u0003\u0002\u0002\u0002\u0092\u047b\u0003\u0002\u0002\u0002\u0094",
  "\u0481\u0003\u0002\u0002\u0002\u0096\u0502\u0003\u0002\u0002\u0002\u0098",
  "\u0504\u0003\u0002\u0002\u0002\u009a\u050a\u0003\u0002\u0002\u0002\u009c",
  "\u0515\u0003\u0002\u0002\u0002\u009e\u0517\u0003\u0002\u0002\u0002\u00a0",
  "\u0528\u0003\u0002\u0002\u0002\u00a2\u052d\u0003\u0002\u0002\u0002\u00a4",
  "\u052f\u0003\u0002\u0002\u0002\u00a6\u0535\u0003\u0002\u0002\u0002\u00a8",
  "\u0538\u0003\u0002\u0002\u0002\u00aa\u054a\u0003\u0002\u0002\u0002\u00ac",
  "\u054c\u0003\u0002\u0002\u0002\u00ae\u0550\u0003\u0002\u0002\u0002\u00b0",
  "\u055d\u0003\u0002\u0002\u0002\u00b2\u055f\u0003\u0002\u0002\u0002\u00b4",
  "\u0572\u0003\u0002\u0002\u0002\u00b6\u0574\u0003\u0002\u0002\u0002\u00b8",
  "\u0580\u0003\u0002\u0002\u0002\u00ba\u0586\u0003\u0002\u0002\u0002\u00bc",
  "\u058b\u0003\u0002\u0002\u0002\u00be\u0590\u0003\u0002\u0002\u0002\u00c0",
  "\u0592\u0003\u0002\u0002\u0002\u00c2\u0598\u0003\u0002\u0002\u0002\u00c4",
  "\u05a0\u0003\u0002\u0002\u0002\u00c6\u05ad\u0003\u0002\u0002\u0002\u00c8",
  "\u05b1\u0003\u0002\u0002\u0002\u00ca\u05b7\u0003\u0002\u0002\u0002\u00cc",
  "\u05ca\u0003\u0002\u0002\u0002\u00ce\u05cd\u0003\u0002\u0002\u0002\u00d0",
  "\u05d3\u0003\u0002\u0002\u0002\u00d2\u05d6\u0003\u0002\u0002\u0002\u00d4",
  "\u05e2\u0003\u0002\u0002\u0002\u00d6\u05e8\u0003\u0002\u0002\u0002\u00d8",
  "\u05f4\u0003\u0002\u0002\u0002\u00da\u05f8\u0003\u0002\u0002\u0002\u00dc",
  "\u0601\u0003\u0002\u0002\u0002\u00de\u060a\u0003\u0002\u0002\u0002\u00e0",
  "\u060e\u0003\u0002\u0002\u0002\u00e2\u061d\u0003\u0002\u0002\u0002\u00e4",
  "\u0622\u0003\u0002\u0002\u0002\u00e6\u0624\u0003\u0002\u0002\u0002\u00e8",
  "\u062c\u0003\u0002\u0002\u0002\u00ea\u0630\u0003\u0002\u0002\u0002\u00ec",
  "\u0637\u0003\u0002\u0002\u0002\u00ee\u063c\u0003\u0002\u0002\u0002\u00f0",
  "\u0646\u0003\u0002\u0002\u0002\u00f2\u064a\u0003\u0002\u0002\u0002\u00f4",
  "\u065f\u0003\u0002\u0002\u0002\u00f6\u0661\u0003\u0002\u0002\u0002\u00f8",
  "\u066d\u0003\u0002\u0002\u0002\u00fa\u0675\u0003\u0002\u0002\u0002\u00fc",
  "\u0679\u0003\u0002\u0002\u0002\u00fe\u0681\u0003\u0002\u0002\u0002\u0100",
  "\u0688\u0003\u0002\u0002\u0002\u0102\u068c\u0003\u0002\u0002\u0002\u0104",
  "\u068e\u0003\u0002\u0002\u0002\u0106\u0692\u0003\u0002\u0002\u0002\u0108",
  "\u069a\u0003\u0002\u0002\u0002\u010a\u069c\u0003\u0002\u0002\u0002\u010c",
  "\u06ac\u0003\u0002\u0002\u0002\u010e\u06ae\u0003\u0002\u0002\u0002\u0110",
  "\u06b1\u0003\u0002\u0002\u0002\u0112\u06b8\u0003\u0002\u0002\u0002\u0114",
  "\u06ca\u0003\u0002\u0002\u0002\u0116\u06d3\u0003\u0002\u0002\u0002\u0118",
  "\u06e2\u0003\u0002\u0002\u0002\u011a\u06e6\u0003\u0002\u0002\u0002\u011c",
  "\u06e9\u0003\u0002\u0002\u0002\u011e\u06f6\u0003\u0002\u0002\u0002\u0120",
  "\u06fc\u0003\u0002\u0002\u0002\u0122\u0717\u0003\u0002\u0002\u0002\u0124",
  "\u0719\u0003\u0002\u0002\u0002\u0126\u0720\u0003\u0002\u0002\u0002\u0128",
  "\u072a\u0003\u0002\u0002\u0002\u012a\u072c\u0003\u0002\u0002\u0002\u012c",
  "\u072f\u0003\u0002\u0002\u0002\u012e\u0739\u0003\u0002\u0002\u0002\u0130",
  "\u074a\u0003\u0002\u0002\u0002\u0132\u0756\u0003\u0002\u0002\u0002\u0134",
  "\u075f\u0003\u0002\u0002\u0002\u0136\u076f\u0003\u0002\u0002\u0002\u0138",
  "\u077b\u0003\u0002\u0002\u0002\u013a\u0782\u0003\u0002\u0002\u0002\u013c",
  "\u0784\u0003\u0002\u0002\u0002\u013e\u0787\u0003\u0002\u0002\u0002\u0140",
  "\u0791\u0003\u0002\u0002\u0002\u0142\u07d1\u0003\u0002\u0002\u0002\u0144",
  "\u07e7\u0003\u0002\u0002\u0002\u0146\u07ea\u0003\u0002\u0002\u0002\u0148",
  "\u07fb\u0003\u0002\u0002\u0002\u014a\u0802\u0003\u0002\u0002\u0002\u014c",
  "\u080d\u0003\u0002\u0002\u0002\u014e\u0810\u0003\u0002\u0002\u0002\u0150",
  "\u0814\u0003\u0002\u0002\u0002\u0152\u0822\u0003\u0002\u0002\u0002\u0154",
  "\u0824\u0003\u0002\u0002\u0002\u0156\u082c\u0003\u0002\u0002\u0002\u0158",
  "\u083e\u0003\u0002\u0002\u0002\u015a\u0851\u0003\u0002\u0002\u0002\u015c",
  "\u0853\u0003\u0002\u0002\u0002\u015e\u085b\u0003\u0002\u0002\u0002\u0160",
  "\u0864\u0003\u0002\u0002\u0002\u0162\u0866\u0003\u0002\u0002\u0002\u0164",
  "\u086b\u0003\u0002\u0002\u0002\u0166\u0871\u0003\u0002\u0002\u0002\u0168",
  "\u0875\u0003\u0002\u0002\u0002\u016a\u0879\u0003\u0002\u0002\u0002\u016c",
  "\u0884\u0003\u0002\u0002\u0002\u016e\u0886\u0003\u0002\u0002\u0002\u0170",
  "\u088c\u0003\u0002\u0002\u0002\u0172\u088e\u0003\u0002\u0002\u0002\u0174",
  "\u0897\u0003\u0002\u0002\u0002\u0176\u08a4\u0003\u0002\u0002\u0002\u0178",
  "\u08aa\u0003\u0002\u0002\u0002\u017a\u08ac\u0003\u0002\u0002\u0002\u017c",
  "\u08bc\u0003\u0002\u0002\u0002\u017e\u08be\u0003\u0002\u0002\u0002\u0180",
  "\u08cd\u0003\u0002\u0002\u0002\u0182\u08dc\u0003\u0002\u0002\u0002\u0184",
  "\u08eb\u0003\u0002\u0002\u0002\u0186\u08f4\u0003\u0002\u0002\u0002\u0188",
  "\u0904\u0003\u0002\u0002\u0002\u018a\u0910\u0003\u0002\u0002\u0002\u018c",
  "\u0913\u0003\u0002\u0002\u0002\u018e\u0923\u0003\u0002\u0002\u0002\u0190",
  "\u0928\u0003\u0002\u0002\u0002\u0192\u0936\u0003\u0002\u0002\u0002\u0194",
  "\u093c\u0003\u0002\u0002\u0002\u0196\u0947\u0003\u0002\u0002\u0002\u0198",
  "\u095f\u0003\u0002\u0002\u0002\u019a\u096b\u0003\u0002\u0002\u0002\u019c",
  "\u097b\u0003\u0002\u0002\u0002\u019e\u0981\u0003\u0002\u0002\u0002\u01a0",
  "\u0987\u0003\u0002\u0002\u0002\u01a2\u098f\u0003\u0002\u0002\u0002\u01a4",
  "\u01a6\u0007\u0003\u0002\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5",
  "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a8\u0003\u0002\u0002\u0002\u01a7",
  "\u01a9\u0005\u00c6d\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a8",
  "\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ab\u0003\u0002\u0002\u0002\u01aa",
  "\u01ac\u0005\u00caf\u0002\u01ab\u01aa\u0003\u0002\u0002\u0002\u01ab",
  "\u01ac\u0003\u0002\u0002\u0002\u01ac\u01b0\u0003\u0002\u0002\u0002\u01ad",
  "\u01af\u0005\u014a\u00a6\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002\u01af",
  "\u01b2\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0",
  "\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b4\u0003\u0002\u0002\u0002\u01b2",
  "\u01b0\u0003\u0002\u0002\u0002\u01b3\u01b5\u0005\u00ceh\u0002\u01b4",
  "\u01b3\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5",
  "\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007\u0002\u0002\u0003\u01b7",
  "\u0003\u0003\u0002\u0002\u0002\u01b8\u01ba\u0005\u01a2\u00d2\u0002\u01b9",
  "\u01bb\u0005\u0018\r\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba",
  "\u01bb\u0003\u0002\u0002\u0002\u01bb\u01be\u0003\u0002\u0002\u0002\u01bc",
  "\u01be\u0005\u00d4k\u0002\u01bd\u01b8\u0003\u0002\u0002\u0002\u01bd",
  "\u01bc\u0003\u0002\u0002\u0002\u01be\u01c6\u0003\u0002\u0002\u0002\u01bf",
  "\u01c0\u0007\u0084\u0002\u0002\u01c0\u01c2\u0005\u01a2\u00d2\u0002\u01c1",
  "\u01c3\u0005\u0018\r\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c2",
  "\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c5\u0003\u0002\u0002\u0002\u01c4",
  "\u01bf\u0003\u0002\u0002\u0002\u01c5\u01c8\u0003\u0002\u0002\u0002\u01c6",
  "\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7",
  "\u0005\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c9",
  "\u01cf\u0005\b\u0005\u0002\u01ca\u01ce\u0007\u0095\u0002\u0002\u01cb",
  "\u01ce\u0005\u0132\u009a\u0002\u01cc\u01ce\u0007\u008a\u0002\u0002\u01cd",
  "\u01ca\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002\u01cd",
  "\u01cc\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003\u0002\u0002\u0002\u01cf",
  "\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0",
  "\u0007\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d2",
  "\u01d8\u0005\n\u0006\u0002\u01d3\u01d8\u0005\u0016\f\u0002\u01d4\u01d8",
  "\u0005\u0012\n\u0002\u01d5\u01d6\u0007n\u0002\u0002\u01d6\u01d8\u0007",
  "\u008a\u0002\u0002\u01d7\u01d2\u0003\u0002\u0002\u0002\u01d7\u01d3\u0003",
  "\u0002\u0002\u0002\u01d7\u01d4\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003",
  "\u0002\u0002\u0002\u01d8\t\u0003\u0002\u0002\u0002\u01d9\u01dc\u0005",
  "\f\u0007\u0002\u01da\u01dc\u0007\u0015\u0002\u0002\u01db\u01d9\u0003",
  "\u0002\u0002\u0002\u01db\u01da\u0003\u0002\u0002\u0002\u01dc\u000b\u0003",
  "\u0002\u0002\u0002\u01dd\u01e1\u0005\u000e\b\u0002\u01de\u01e1\u0005",
  "\u0010\t\u0002\u01df\u01e1\u0007 \u0002\u0002\u01e0\u01dd\u0003\u0002",
  "\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01df\u0003\u0002",
  "\u0002\u0002\u01e1\r\u0003\u0002\u0002\u0002\u01e2\u01e3\t\u0002\u0002",
  "\u0002\u01e3\u000f\u0003\u0002\u0002\u0002\u01e4\u01e5\t\u0003\u0002",
  "\u0002\u01e5\u0011\u0003\u0002\u0002\u0002\u01e6\u01e7\u0007\u0082\u0002",
  "\u0002\u01e7\u01ec\u0005\u0014\u000b\u0002\u01e8\u01e9\u0007\u0085\u0002",
  "\u0002\u01e9\u01eb\u0005\u0014\u000b\u0002\u01ea\u01e8\u0003\u0002\u0002",
  "\u0002\u01eb\u01ee\u0003\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002",
  "\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ef\u0003\u0002\u0002",
  "\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ef\u01f0\u0007\u0083\u0002",
  "\u0002\u01f0\u0013\u0003\u0002\u0002\u0002\u01f1\u01f3\u0005\u0006\u0004",
  "\u0002\u01f2\u01f4\u0005\u01a2\u00d2\u0002\u01f3\u01f2\u0003\u0002\u0002",
  "\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4\u0015\u0003\u0002\u0002",
  "\u0002\u01f5\u01fa\u0005\u0004\u0003\u0002\u01f6\u01fa\u0007G\u0002",
  "\u0002\u01f7\u01fa\u0007&\u0002\u0002\u01f8\u01fa\u0007^\u0002\u0002",
  "\u01f9\u01f5\u0003\u0002\u0002\u0002\u01f9\u01f6\u0003\u0002\u0002\u0002",
  "\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002",
  "\u01fa\u0017\u0003\u0002\u0002\u0002\u01fb\u01fc\u0007\u0093\u0002\u0002",
  "\u01fc\u0201\u0005\u0006\u0004\u0002\u01fd\u01fe\u0007\u0085\u0002\u0002",
  "\u01fe\u0200\u0005\u0006\u0004\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002",
  "\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002",
  "\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0204\u0003\u0002\u0002\u0002",
  "\u0203\u0201\u0003\u0002\u0002\u0002\u0204\u0205\u0007\u0094\u0002\u0002",
  "\u0205\u0019\u0003\u0002\u0002\u0002\u0206\u020b\u0005\u001c\u000f\u0002",
  "\u0207\u0208\u0007\u0085\u0002\u0002\u0208\u020a\u0005\u001c\u000f\u0002",
  "\u0209\u0207\u0003\u0002\u0002\u0002\u020a\u020d\u0003\u0002\u0002\u0002",
  "\u020b\u0209\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002",
  "\u020c\u001b\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002\u0002",
  "\u020e\u020f\u0005\u01a2\u00d2\u0002\u020f\u0210\u0007\u0086\u0002\u0002",
  "\u0210\u0212\u0003\u0002\u0002\u0002\u0211\u020e\u0003\u0002\u0002\u0002",
  "\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002",
  "\u0213\u0215\t\u0004\u0002\u0002\u0214\u0213\u0003\u0002\u0002\u0002",
  "\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002",
  "\u0216\u0217\u0005\u001e\u0010\u0002\u0217\u001d\u0003\u0002\u0002\u0002",
  "\u0218\u021f\u0005 \u0011\u0002\u0219\u021c\u0007l\u0002\u0002\u021a",
  "\u021c\u0005\u0006\u0004\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021b",
  "\u021a\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d",
  "\u021f\u0005 \u0011\u0002\u021e\u0218\u0003\u0002\u0002\u0002\u021e",
  "\u021b\u0003\u0002\u0002\u0002\u021f\u001f\u0003\u0002\u0002\u0002\u0220",
  '\u0223\u0005$\u0013\u0002\u0221\u0223\u0005"\u0012\u0002\u0222\u0220',
  "\u0003\u0002\u0002\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0223!",
  "\u0003\u0002\u0002\u0002\u0224\u0228\u0005n8\u0002\u0225\u0228\u0005",
  "z>\u0002\u0226\u0228\u0005(\u0015\u0002\u0227\u0224\u0003\u0002\u0002",
  "\u0002\u0227\u0225\u0003\u0002\u0002\u0002\u0227\u0226\u0003\u0002\u0002",
  "\u0002\u0228#\u0003\u0002\u0002\u0002\u0229\u022a\u0005@!\u0002\u022a",
  "\u022b\u0005&\u0014\u0002\u022b\u022c\u0005 \u0011\u0002\u022c%\u0003",
  "\u0002\u0002\u0002\u022d\u0239\u0007\u0092\u0002\u0002\u022e\u0239\u0007",
  "\u00a1\u0002\u0002\u022f\u0239\u0007\u00a2\u0002\u0002\u0230\u0239\u0007",
  "\u00a3\u0002\u0002\u0231\u0239\u0007\u00a4\u0002\u0002\u0232\u0239\u0007",
  "\u00a5\u0002\u0002\u0233\u0239\u0007\u00a6\u0002\u0002\u0234\u0239\u0007",
  "\u00a7\u0002\u0002\u0235\u0239\u0007\u00a8\u0002\u0002\u0236\u0239\u0007",
  "\u00aa\u0002\u0002\u0237\u0239\u0005\u016a\u00b6\u0002\u0238\u022d\u0003",
  "\u0002\u0002\u0002\u0238\u022e\u0003\u0002\u0002\u0002\u0238\u022f\u0003",
  "\u0002\u0002\u0002\u0238\u0230\u0003\u0002\u0002\u0002\u0238\u0231\u0003",
  "\u0002\u0002\u0002\u0238\u0232\u0003\u0002\u0002\u0002\u0238\u0233\u0003",
  "\u0002\u0002\u0002\u0238\u0234\u0003\u0002\u0002\u0002\u0238\u0235\u0003",
  "\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0238\u0237\u0003",
  "\u0002\u0002\u0002\u0239'\u0003\u0002\u0002\u0002\u023a\u0240\u0005",
  "*\u0016\u0002\u023b\u023c\u0007\u0095\u0002\u0002\u023c\u023d\u0005",
  " \u0011\u0002\u023d\u023e\u0007\u0086\u0002\u0002\u023e\u023f\u0005",
  " \u0011\u0002\u023f\u0241\u0003\u0002\u0002\u0002\u0240\u023b\u0003",
  "\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241)\u0003",
  "\u0002\u0002\u0002\u0242\u0245\u0005,\u0017\u0002\u0243\u0244\u0007",
  "\u0097\u0002\u0002\u0244\u0246\u0005*\u0016\u0002\u0245\u0243\u0003",
  "\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246+\u0003",
  "\u0002\u0002\u0002\u0247\u024c\u0005.\u0018\u0002\u0248\u0249\u0007",
  "\u009b\u0002\u0002\u0249\u024b\u0005.\u0018\u0002\u024a\u0248\u0003",
  "\u0002\u0002\u0002\u024b\u024e\u0003\u0002\u0002\u0002\u024c\u024a\u0003",
  "\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d-\u0003",
  "\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024f\u0254\u0005",
  "0\u0019\u0002\u0250\u0251\u0007\u009a\u0002\u0002\u0251\u0253\u0005",
  "0\u0019\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0253\u0256\u0003",
  "\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0254\u0255\u0003",
  "\u0002\u0002\u0002\u0255/\u0003\u0002\u0002\u0002\u0256\u0254\u0003",
  "\u0002\u0002\u0002\u0257\u025c\u00052\u001a\u0002\u0258\u0259\u0007",
  "\u008e\u0002\u0002\u0259\u025b\u00052\u001a\u0002\u025a\u0258\u0003",
  "\u0002\u0002\u0002\u025b\u025e\u0003\u0002\u0002\u0002\u025c\u025a\u0003",
  "\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d1\u0003",
  "\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f\u0264\u0005",
  "4\u001b\u0002\u0260\u0261\u0007\u008f\u0002\u0002\u0261\u0263\u0005",
  "4\u001b\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0263\u0266\u0003",
  "\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0265\u0003",
  "\u0002\u0002\u0002\u02653\u0003\u0002\u0002\u0002\u0266\u0264\u0003",
  "\u0002\u0002\u0002\u0267\u026c\u00056\u001c\u0002\u0268\u0269\u0007",
  "\u008d\u0002\u0002\u0269\u026b\u00056\u001c\u0002\u026a\u0268\u0003",
  "\u0002\u0002\u0002\u026b\u026e\u0003\u0002\u0002\u0002\u026c\u026a\u0003",
  "\u0002\u0002\u0002\u026c\u026d\u0003\u0002\u0002\u0002\u026d5\u0003",
  "\u0002\u0002\u0002\u026e\u026c\u0003\u0002\u0002\u0002\u026f\u0274\u0005",
  "8\u001d\u0002\u0270\u0271\t\u0005\u0002\u0002\u0271\u0273\u00058\u001d",
  "\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0273\u0276\u0003\u0002\u0002",
  "\u0002\u0274\u0272\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002",
  "\u0002\u02757\u0003\u0002\u0002\u0002\u0276\u0274\u0003\u0002\u0002",
  "\u0002\u0277\u0280\u0005:\u001e\u0002\u0278\u0279\t\u0006\u0002\u0002",
  "\u0279\u027f\u0005:\u001e\u0002\u027a\u027b\u0007>\u0002\u0002\u027b",
  "\u027f\u0005l7\u0002\u027c\u027d\u0007\u0010\u0002\u0002\u027d\u027f",
  "\u0005\u0006\u0004\u0002\u027e\u0278\u0003\u0002\u0002\u0002\u027e\u027a",
  "\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002\u0002\u0002\u027f\u0282",
  "\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0280\u0281",
  "\u0003\u0002\u0002\u0002\u02819\u0003\u0002\u0002\u0002\u0282\u0280",
  "\u0003\u0002\u0002\u0002\u0283\u028b\u0005<\u001f\u0002\u0284\u0287",
  "\u0007\u00a9\u0002\u0002\u0285\u0287\u0005\u0168\u00b5\u0002\u0286\u0284",
  "\u0003\u0002\u0002\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0287\u0288",
  "\u0003\u0002\u0002\u0002\u0288\u028a\u0005<\u001f\u0002\u0289\u0286",
  "\u0003\u0002\u0002\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289",
  "\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c;",
  "\u0003\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0293",
  "\u0005> \u0002\u028f\u0290\t\u0007\u0002\u0002\u0290\u0292\u0005> \u0002",
  "\u0291\u028f\u0003\u0002\u0002\u0002\u0292\u0295\u0003\u0002\u0002\u0002",
  "\u0293\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002",
  "\u0294=\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002",
  "\u0296\u029b\u0005@!\u0002\u0297\u0298\t\b\u0002\u0002\u0298\u029a\u0005",
  "@!\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u029a\u029d\u0003\u0002",
  "\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002",
  "\u0002\u0002\u029c?\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002",
  '\u0002\u0002\u029e\u02b7\u0005B"\u0002\u029f\u02a0\u0007\u0088\u0002',
  "\u0002\u02a0\u02b7\u0005@!\u0002\u02a1\u02a2\u0007\u0089\u0002\u0002",
  "\u02a2\u02b7\u0005@!\u0002\u02a3\u02a4\u0007\u0090\u0002\u0002\u02a4",
  "\u02b7\u0005@!\u0002\u02a5\u02a6\u0007\u0091\u0002\u0002\u02a6\u02b7",
  "\u0005@!\u0002\u02a7\u02a8\u0007\u0098\u0002\u0002\u02a8\u02b7\u0005",
  "@!\u0002\u02a9\u02aa\u0007\u0099\u0002\u0002\u02aa\u02b7\u0005@!\u0002",
  "\u02ab\u02ac\u0007\u0082\u0002\u0002\u02ac\u02ad\u0005\u0006\u0004\u0002",
  "\u02ad\u02ae\u0007\u0083\u0002\u0002\u02ae\u02af\u0005@!\u0002\u02af",
  "\u02b7\u0003\u0002\u0002\u0002\u02b0\u02b1\u0007\u0013\u0002\u0002\u02b1",
  "\u02b7\u0005@!\u0002\u02b2\u02b3\u0007\u008d\u0002\u0002\u02b3\u02b7",
  "\u0005@!\u0002\u02b4\u02b5\u0007\u008a\u0002\u0002\u02b5\u02b7\u0005",
  "@!\u0002\u02b6\u029e\u0003\u0002\u0002\u0002\u02b6\u029f\u0003\u0002",
  "\u0002\u0002\u02b6\u02a1\u0003\u0002\u0002\u0002\u02b6\u02a3\u0003\u0002",
  "\u0002\u0002\u02b6\u02a5\u0003\u0002\u0002\u0002\u02b6\u02a7\u0003\u0002",
  "\u0002\u0002\u02b6\u02a9\u0003\u0002\u0002\u0002\u02b6\u02ab\u0003\u0002",
  "\u0002\u0002\u02b6\u02b0\u0003\u0002\u0002\u0002\u02b6\u02b2\u0003\u0002",
  "\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b7A\u0003\u0002",
  "\u0002\u0002\u02b8\u02bc\u0005D#\u0002\u02b9\u02bb\u0005H%\u0002\u02ba",
  "\u02b9\u0003\u0002\u0002\u0002\u02bb\u02be\u0003\u0002\u0002\u0002\u02bc",
  "\u02ba\u0003\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bd",
  "\u02d3\u0003\u0002\u0002\u0002\u02be\u02bc\u0003\u0002\u0002\u0002\u02bf",
  "\u02c1\u0007\u0095\u0002\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c0",
  "\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2",
  "\u02c3\u0007\u0084\u0002\u0002\u02c3\u02ca\u0005F$\u0002\u02c4\u02ca",
  "\u0005\u019e\u00d0\u0002\u02c5\u02ca\u0007\u0098\u0002\u0002\u02c6\u02ca",
  "\u0007\u0099\u0002\u0002\u02c7\u02c8\u0007\u009c\u0002\u0002\u02c8\u02ca",
  "\u0005\u01a2\u00d2\u0002\u02c9\u02c0\u0003\u0002\u0002\u0002\u02c9\u02c4",
  "\u0003\u0002\u0002\u0002\u02c9\u02c5\u0003\u0002\u0002\u0002\u02c9\u02c6",
  "\u0003\u0002\u0002\u0002\u02c9\u02c7\u0003\u0002\u0002\u0002\u02ca\u02ce",
  "\u0003\u0002\u0002\u0002\u02cb\u02cd\u0005H%\u0002\u02cc\u02cb\u0003",
  "\u0002\u0002\u0002\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003",
  "\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02d2\u0003",
  "\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d1\u02c9\u0003",
  "\u0002\u0002\u0002\u02d2\u02d5\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003",
  "\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4C\u0003",
  "\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d6\u0344\u0005",
  "\u016c\u00b7\u0002\u02d7\u0344\u0005F$\u0002\u02d8\u02d9\u0007\u0082",
  "\u0002\u0002\u02d9\u02da\u0005 \u0011\u0002\u02da\u02db\u0007\u0083",
  "\u0002\u0002\u02db\u0344\u0003\u0002\u0002\u0002\u02dc\u0344\u0005\\",
  "/\u0002\u02dd\u0344\u0005L'\u0002\u02de\u0344\u0005\u00d4k\u0002\u02df",
  "\u0344\u0007u\u0002\u0002\u02e0\u0344\u0007a\u0002\u0002\u02e1\u02eb",
  "\u0007\u0014\u0002\u0002\u02e2\u02e3\u0007\u0084\u0002\u0002\u02e3\u02e5",
  "\u0005\u01a2\u00d2\u0002\u02e4\u02e6\u0005\u0018\r\u0002\u02e5\u02e4",
  "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02ec",
  "\u0003\u0002\u0002\u0002\u02e7\u02e8\u0007\u0080\u0002\u0002\u02e8\u02e9",
  "\u0005N(\u0002\u02e9\u02ea\u0007\u0081\u0002\u0002\u02ea\u02ec\u0003",
  "\u0002\u0002\u0002\u02eb\u02e2\u0003\u0002\u0002\u0002\u02eb\u02e7\u0003",
  "\u0002\u0002\u0002\u02ec\u0344\u0003\u0002\u0002\u0002\u02ed\u030a\u0007",
  "E\u0002\u0002\u02ee\u0304\u0005\u0006\u0004\u0002\u02ef\u0305\u0005",
  "\u01a0\u00d1\u0002\u02f0\u0305\u0005P)\u0002\u02f1\u02f2\u0007\u0080",
  "\u0002\u0002\u02f2\u02f3\u0005N(\u0002\u02f3\u02f7\u0007\u0081\u0002",
  "\u0002\u02f4\u02f6\u0005\u0132\u009a\u0002\u02f5\u02f4\u0003\u0002\u0002",
  "\u0002\u02f6\u02f9\u0003\u0002\u0002\u0002\u02f7\u02f5\u0003\u0002\u0002",
  "\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8\u02fb\u0003\u0002\u0002",
  "\u0002\u02f9\u02f7\u0003\u0002\u0002\u0002\u02fa\u02fc\u0005\u0134\u009b",
  "\u0002\u02fb\u02fa\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002",
  "\u0002\u02fc\u0305\u0003\u0002\u0002\u0002\u02fd\u02ff\u0005\u0132\u009a",
  "\u0002\u02fe\u02fd\u0003\u0002\u0002\u0002\u02ff\u0300\u0003\u0002\u0002",
  "\u0002\u0300\u02fe\u0003\u0002\u0002\u0002\u0300\u0301\u0003\u0002\u0002",
  "\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0303\u0005\u0134\u009b",
  "\u0002\u0303\u0305\u0003\u0002\u0002\u0002\u0304\u02ef\u0003\u0002\u0002",
  "\u0002\u0304\u02f0\u0003\u0002\u0002\u0002\u0304\u02f1\u0003\u0002\u0002",
  "\u0002\u0304\u02fe\u0003\u0002\u0002\u0002\u0305\u030b\u0003\u0002\u0002",
  "\u0002\u0306\u030b\u0005b2\u0002\u0307\u0308\u0005\u0132\u009a\u0002",
  "\u0308\u0309\u0005\u0134\u009b\u0002\u0309\u030b\u0003\u0002\u0002\u0002",
  "\u030a\u02ee\u0003\u0002\u0002\u0002\u030a\u0306\u0003\u0002\u0002\u0002",
  "\u030a\u0307\u0003\u0002\u0002\u0002\u030b\u0344\u0003\u0002\u0002\u0002",
  "\u030c\u030d\u0007e\u0002\u0002\u030d\u0311\u0007\u0082\u0002\u0002",
  "\u030e\u0312\u0005h5\u0002\u030f\u0312\u0005\u0006\u0004\u0002\u0310",
  "\u0312\u0007n\u0002\u0002\u0311\u030e\u0003\u0002\u0002\u0002\u0311",
  "\u030f\u0003\u0002\u0002\u0002\u0311\u0310\u0003\u0002\u0002\u0002\u0312",
  "\u0313\u0003\u0002\u0002\u0002\u0313\u0344\u0007\u0083\u0002\u0002\u0314",
  "\u0315\u0007\u001c\u0002\u0002\u0315\u0316\u0007\u0082\u0002\u0002\u0316",
  "\u0317\u0005 \u0011\u0002\u0317\u0318\u0007\u0083\u0002\u0002\u0318",
  "\u0344\u0003\u0002\u0002\u0002\u0319\u031a\u0007h\u0002\u0002\u031a",
  "\u031b\u0007\u0082\u0002\u0002\u031b\u031c\u0005 \u0011\u0002\u031c",
  "\u031d\u0007\u0083\u0002\u0002\u031d\u0344\u0003\u0002\u0002\u0002\u031e",
  "\u0323\u0007!\u0002\u0002\u031f\u0320\u0007\u0082\u0002\u0002\u0320",
  "\u0321\u0005\u0006\u0004\u0002\u0321\u0322\u0007\u0083\u0002\u0002\u0322",
  "\u0324\u0003\u0002\u0002\u0002\u0323\u031f\u0003\u0002\u0002\u0002\u0323",
  "\u0324\u0003\u0002\u0002\u0002\u0324\u0344\u0003\u0002\u0002\u0002\u0325",
  "\u0327\u0007\u0012\u0002\u0002\u0326\u0325\u0003\u0002\u0002\u0002\u0326",
  "\u0327\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328",
  '\u032e\u0007"\u0002\u0002\u0329\u032b\u0007\u0082\u0002\u0002\u032a',
  "\u032c\u0005r:\u0002\u032b\u032a\u0003\u0002\u0002\u0002\u032b\u032c",
  "\u0003\u0002\u0002\u0002\u032c\u032d\u0003\u0002\u0002\u0002\u032d\u032f",
  "\u0007\u0083\u0002\u0002\u032e\u0329\u0003\u0002\u0002\u0002\u032e\u032f",
  "\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u0344",
  "\u0005\u0098M\u0002\u0331\u0332\u0007[\u0002\u0002\u0332\u0333\u0007",
  "\u0082\u0002\u0002\u0333\u0334\u0005\u0006\u0004\u0002\u0334\u0335\u0007",
  "\u0083\u0002\u0002\u0335\u0344\u0003\u0002\u0002\u0002\u0336\u0337\u0007",
  "C\u0002\u0002\u0337\u033d\u0007\u0082\u0002\u0002\u0338\u0339\u0005",
  "\u01a2\u00d2\u0002\u0339\u033a\u0007\u0084\u0002\u0002\u033a\u033c\u0003",
  "\u0002\u0002\u0002\u033b\u0338\u0003\u0002\u0002\u0002\u033c\u033f\u0003",
  "\u0002\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033d\u033e\u0003",
  "\u0002\u0002\u0002\u033e\u0340\u0003\u0002\u0002\u0002\u033f\u033d\u0003",
  "\u0002\u0002\u0002\u0340\u0341\u0005\u01a2\u00d2\u0002\u0341\u0342\u0007",
  "\u0083\u0002\u0002\u0342\u0344\u0003\u0002\u0002\u0002\u0343\u02d6\u0003",
  "\u0002\u0002\u0002\u0343\u02d7\u0003\u0002\u0002\u0002\u0343\u02d8\u0003",
  "\u0002\u0002\u0002\u0343\u02dc\u0003\u0002\u0002\u0002\u0343\u02dd\u0003",
  "\u0002\u0002\u0002\u0343\u02de\u0003\u0002\u0002\u0002\u0343\u02df\u0003",
  "\u0002\u0002\u0002\u0343\u02e0\u0003\u0002\u0002\u0002\u0343\u02e1\u0003",
  "\u0002\u0002\u0002\u0343\u02ed\u0003\u0002\u0002\u0002\u0343\u030c\u0003",
  "\u0002\u0002\u0002\u0343\u0314\u0003\u0002\u0002\u0002\u0343\u0319\u0003",
  "\u0002\u0002\u0002\u0343\u031e\u0003\u0002\u0002\u0002\u0343\u0326\u0003",
  "\u0002\u0002\u0002\u0343\u0331\u0003\u0002\u0002\u0002\u0343\u0336\u0003",
  "\u0002\u0002\u0002\u0344E\u0003\u0002\u0002\u0002\u0345\u0347\u0005",
  "\u01a2\u00d2\u0002\u0346\u0348\u0005\u0018\r\u0002\u0347\u0346\u0003",
  "\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348G\u0003",
  "\u0002\u0002\u0002\u0349\u034b\u0007\u0095\u0002\u0002\u034a\u0349\u0003",
  "\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034c\u0003",
  "\u0002\u0002\u0002\u034c\u034d\u0007\u0080\u0002\u0002\u034d\u0352\u0005",
  "J&\u0002\u034e\u034f\u0007\u0085\u0002\u0002\u034f\u0351\u0005J&\u0002",
  "\u0350\u034e\u0003\u0002\u0002\u0002\u0351\u0354\u0003\u0002\u0002\u0002",
  "\u0352\u0350\u0003\u0002\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002",
  "\u0353\u0355\u0003\u0002\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002",
  "\u0355\u0356\u0007\u0081\u0002\u0002\u0356I\u0003\u0002\u0002\u0002",
  "\u0357\u0358\u0005\u01a2\u00d2\u0002\u0358\u0359\u0007\u0086\u0002\u0002",
  "\u0359\u035b\u0003\u0002\u0002\u0002\u035a\u0357\u0003\u0002\u0002\u0002",
  "\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002\u0002",
  "\u035c\u035d\u0005 \u0011\u0002\u035dK\u0003\u0002\u0002\u0002\u035e",
  "\u035f\t\t\u0002\u0002\u035fM\u0003\u0002\u0002\u0002\u0360\u0365\u0005",
  " \u0011\u0002\u0361\u0362\u0007\u0085\u0002\u0002\u0362\u0364\u0005",
  " \u0011\u0002\u0363\u0361\u0003\u0002\u0002\u0002\u0364\u0367\u0003",
  "\u0002\u0002\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0365\u0366\u0003",
  "\u0002\u0002\u0002\u0366O\u0003\u0002\u0002\u0002\u0367\u0365\u0003",
  "\u0002\u0002\u0002\u0368\u036b\u0005R*\u0002\u0369\u036b\u0005Z.\u0002",
  "\u036a\u0368\u0003\u0002\u0002\u0002\u036a\u0369\u0003\u0002\u0002\u0002",
  "\u036bQ\u0003\u0002\u0002\u0002\u036c\u0371\u0007~\u0002\u0002\u036d",
  "\u036f\u0005T+\u0002\u036e\u0370\u0007\u0085\u0002\u0002\u036f\u036e",
  "\u0003\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0372",
  "\u0003\u0002\u0002\u0002\u0371\u036d\u0003\u0002\u0002\u0002\u0371\u0372",
  "\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0374",
  "\u0007\u007f\u0002\u0002\u0374S\u0003\u0002\u0002\u0002\u0375\u037a",
  "\u0005V,\u0002\u0376\u0377\u0007\u0085\u0002\u0002\u0377\u0379\u0005",
  "V,\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0379\u037c\u0003\u0002",
  "\u0002\u0002\u037a\u0378\u0003\u0002\u0002\u0002\u037a\u037b\u0003\u0002",
  "\u0002\u0002\u037bU\u0003\u0002\u0002\u0002\u037c\u037a\u0003\u0002",
  "\u0002\u0002\u037d\u0383\u0005\u01a2\u00d2\u0002\u037e\u037f\u0007\u0080",
  "\u0002\u0002\u037f\u0380\u0005 \u0011\u0002\u0380\u0381\u0007\u0081",
  "\u0002\u0002\u0381\u0383\u0003\u0002\u0002\u0002\u0382\u037d\u0003\u0002",
  "\u0002\u0002\u0382\u037e\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002",
  "\u0002\u0002\u0384\u0385\u0007\u0092\u0002\u0002\u0385\u0386\u0005X",
  "-\u0002\u0386W\u0003\u0002\u0002\u0002\u0387\u038a\u0005 \u0011\u0002",
  "\u0388\u038a\u0005P)\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389",
  "\u0388\u0003\u0002\u0002\u0002\u038aY\u0003\u0002\u0002\u0002\u038b",
  "\u038c\u0007~\u0002\u0002\u038c\u0391\u0005`1\u0002\u038d\u038e\u0007",
  "\u0085\u0002\u0002\u038e\u0390\u0005`1\u0002\u038f\u038d\u0003\u0002",
  "\u0002\u0002\u0390\u0393\u0003\u0002\u0002\u0002\u0391\u038f\u0003\u0002",
  "\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0395\u0003\u0002",
  "\u0002\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0394\u0396\u0007\u0085",
  "\u0002\u0002\u0395\u0394\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002",
  "\u0002\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397\u0398\u0007\u007f",
  "\u0002\u0002\u0398[\u0003\u0002\u0002\u0002\u0399\u039a\u0007\u0082",
  "\u0002\u0002\u039a\u039f\u0005^0\u0002\u039b\u039c\u0007\u0085\u0002",
  "\u0002\u039c\u039e\u0005^0\u0002\u039d\u039b\u0003\u0002\u0002\u0002",
  "\u039e\u03a1\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002",
  "\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002",
  "\u03a1\u039f\u0003\u0002\u0002\u0002\u03a2\u03a3\u0007\u0083\u0002\u0002",
  "\u03a3]\u0003\u0002\u0002\u0002\u03a4\u03a5\u0005\u01a2\u00d2\u0002",
  "\u03a5\u03a6\u0007\u0086\u0002\u0002\u03a6\u03a8\u0003\u0002\u0002\u0002",
  "\u03a7\u03a4\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002",
  '\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9\u03aa\u0005"\u0012\u0002',
  '\u03aa_\u0003\u0002\u0002\u0002\u03ab\u03b1\u0005"\u0012\u0002\u03ac',
  "\u03ad\u0007~\u0002\u0002\u03ad\u03ae\u0005N(\u0002\u03ae\u03af\u0007",
  "\u007f\u0002\u0002\u03af\u03b1\u0003\u0002\u0002\u0002\u03b0\u03ab\u0003",
  "\u0002\u0002\u0002\u03b0\u03ac\u0003\u0002\u0002\u0002\u03b1a\u0003",
  "\u0002\u0002\u0002\u03b2\u03b7\u0007~\u0002\u0002\u03b3\u03b5\u0005",
  "d3\u0002\u03b4\u03b6\u0007\u0085\u0002\u0002\u03b5\u03b4\u0003\u0002",
  "\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b8\u0003\u0002",
  "\u0002\u0002\u03b7\u03b3\u0003\u0002\u0002\u0002\u03b7\u03b8\u0003\u0002",
  "\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03ba\u0007\u007f",
  "\u0002\u0002\u03bac\u0003\u0002\u0002\u0002\u03bb\u03c0\u0005f4\u0002",
  "\u03bc\u03bd\u0007\u0085\u0002\u0002\u03bd\u03bf\u0005f4\u0002\u03be",
  "\u03bc\u0003\u0002\u0002\u0002\u03bf\u03c2\u0003\u0002\u0002\u0002\u03c0",
  "\u03be\u0003\u0002\u0002\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1",
  "e\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c3",
  '\u03c9\u0005B"\u0002\u03c4\u03c5\u0005\u01a2\u00d2\u0002\u03c5\u03c6',
  "\u0007\u0092\u0002\u0002\u03c6\u03c7\u0005 \u0011\u0002\u03c7\u03c9",
  "\u0003\u0002\u0002\u0002\u03c8\u03c3\u0003\u0002\u0002\u0002\u03c8\u03c4",
  "\u0003\u0002\u0002\u0002\u03c9g\u0003\u0002\u0002\u0002\u03ca\u03d3",
  "\u0005\u01a2\u00d2\u0002\u03cb\u03cd\u0005j6\u0002\u03cc\u03cb\u0003",
  "\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd\u03d4\u0003",
  "\u0002\u0002\u0002\u03ce\u03cf\u0007\u0096\u0002\u0002\u03cf\u03d1\u0005",
  "\u01a2\u00d2\u0002\u03d0\u03d2\u0005j6\u0002\u03d1\u03d0\u0003\u0002",
  "\u0002\u0002\u03d1\u03d2\u0003\u0002\u0002\u0002\u03d2\u03d4\u0003\u0002",
  "\u0002\u0002\u03d3\u03cc\u0003\u0002\u0002\u0002\u03d3\u03ce\u0003\u0002",
  "\u0002\u0002\u03d4\u03dc\u0003\u0002\u0002\u0002\u03d5\u03d6\u0007\u0084",
  "\u0002\u0002\u03d6\u03d8\u0005\u01a2\u00d2\u0002\u03d7\u03d9\u0005j",
  "6\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002",
  "\u0002\u0002\u03d9\u03db\u0003\u0002\u0002\u0002\u03da\u03d5\u0003\u0002",
  "\u0002\u0002\u03db\u03de\u0003\u0002\u0002\u0002\u03dc\u03da\u0003\u0002",
  "\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03ddi\u0003\u0002",
  "\u0002\u0002\u03de\u03dc\u0003\u0002\u0002\u0002\u03df\u03e3\u0007\u0093",
  "\u0002\u0002\u03e0\u03e2\u0007\u0085\u0002\u0002\u03e1\u03e0\u0003\u0002",
  "\u0002\u0002\u03e2\u03e5\u0003\u0002\u0002\u0002\u03e3\u03e1\u0003\u0002",
  "\u0002\u0002\u03e3\u03e4\u0003\u0002\u0002\u0002\u03e4\u03e6\u0003\u0002",
  "\u0002\u0002\u03e5\u03e3\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007\u0094",
  "\u0002\u0002\u03e7k\u0003\u0002\u0002\u0002\u03e8\u03ed\u0005\b\u0005",
  "\u0002\u03e9\u03ec\u0005\u0132\u009a\u0002\u03ea\u03ec\u0007\u008a\u0002",
  "\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ea\u0003\u0002\u0002",
  "\u0002\u03ec\u03ef\u0003\u0002\u0002\u0002\u03ed\u03eb\u0003\u0002\u0002",
  "\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002\u03ee\u03f1\u0003\u0002\u0002",
  "\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002\u03f0\u03f2\u0007\u0095\u0002",
  "\u0002\u03f1\u03f0\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002\u0002",
  "\u0002\u03f2\u03f4\u0003\u0002\u0002\u0002\u03f3\u03f5\u0005\u01a2\u00d2",
  "\u0002\u03f4\u03f3\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002",
  "\u0002\u03f5m\u0003\u0002\u0002\u0002\u03f6\u03f8\u0007\u0012\u0002",
  "\u0002\u03f7\u03f6\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002",
  "\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fa\u0005p9\u0002",
  "\u03fa\u03fb\u0005\u0166\u00b4\u0002\u03fb\u03fc\u0005x=\u0002\u03fc",
  "o\u0003\u0002\u0002\u0002\u03fd\u03fe\u0007\u0082\u0002\u0002\u03fe",
  "\u0409\u0007\u0083\u0002\u0002\u03ff\u0400\u0007\u0082\u0002\u0002\u0400",
  "\u0401\u0005r:\u0002\u0401\u0402\u0007\u0083\u0002\u0002\u0402\u0409",
  "\u0003\u0002\u0002\u0002\u0403\u0404\u0007\u0082\u0002\u0002\u0404\u0405",
  "\u0005v<\u0002\u0405\u0406\u0007\u0083\u0002\u0002\u0406\u0409\u0003",
  "\u0002\u0002\u0002\u0407\u0409\u0005\u01a2\u00d2\u0002\u0408\u03fd\u0003",
  "\u0002\u0002\u0002\u0408\u03ff\u0003\u0002\u0002\u0002\u0408\u0403\u0003",
  "\u0002\u0002\u0002\u0408\u0407\u0003\u0002\u0002\u0002\u0409q\u0003",
  "\u0002\u0002\u0002\u040a\u040f\u0005t;\u0002\u040b\u040c\u0007\u0085",
  "\u0002\u0002\u040c\u040e\u0005t;\u0002\u040d\u040b\u0003\u0002\u0002",
  "\u0002\u040e\u0411\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002",
  "\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410s\u0003\u0002\u0002",
  "\u0002\u0411\u040f\u0003\u0002\u0002\u0002\u0412\u0414\t\u0004\u0002",
  "\u0002\u0413\u0412\u0003\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002",
  "\u0002\u0414\u0415\u0003\u0002\u0002\u0002\u0415\u0416\u0005\u0006\u0004",
  "\u0002\u0416\u0417\u0005\u01a2\u00d2\u0002\u0417u\u0003\u0002\u0002",
  "\u0002\u0418\u041d\u0005\u01a2\u00d2\u0002\u0419\u041a\u0007\u0085\u0002",
  "\u0002\u041a\u041c\u0005\u01a2\u00d2\u0002\u041b\u0419\u0003\u0002\u0002",
  "\u0002\u041c\u041f\u0003\u0002\u0002\u0002\u041d\u041b\u0003\u0002\u0002",
  "\u0002\u041d\u041e\u0003\u0002\u0002\u0002\u041ew\u0003\u0002\u0002",
  "\u0002\u041f\u041d\u0003\u0002\u0002\u0002\u0420\u0423\u0005 \u0011",
  "\u0002\u0421\u0423\u0005\u0098M\u0002\u0422\u0420\u0003\u0002\u0002",
  "\u0002\u0422\u0421\u0003\u0002\u0002\u0002\u0423y\u0003\u0002\u0002",
  "\u0002\u0424\u0425\u0005|?\u0002\u0425\u0426\u0005~@\u0002\u0426{\u0003",
  "\u0002\u0002\u0002\u0427\u0429\u00073\u0002\u0002\u0428\u042a\u0005",
  "\u0006\u0004\u0002\u0429\u0428\u0003\u0002\u0002\u0002\u0429\u042a\u0003",
  "\u0002\u0002\u0002\u042a\u042b\u0003\u0002\u0002\u0002\u042b\u042c\u0005",
  "\u01a2\u00d2\u0002\u042c\u042d\u00079\u0002\u0002\u042d\u042e\u0005",
  " \u0011\u0002\u042e}\u0003\u0002\u0002\u0002\u042f\u0431\u0005\u0080",
  "A\u0002\u0430\u042f\u0003\u0002\u0002\u0002\u0431\u0434\u0003\u0002",
  "\u0002\u0002\u0432\u0430\u0003\u0002\u0002\u0002\u0432\u0433\u0003\u0002",
  "\u0002\u0002\u0433\u0435\u0003\u0002\u0002\u0002\u0434\u0432\u0003\u0002",
  "\u0002\u0002\u0435\u0437\u0005\u008cG\u0002\u0436\u0438\u0005\u008e",
  "H\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0437\u0438\u0003\u0002",
  "\u0002\u0002\u0438\u007f\u0003\u0002\u0002\u0002\u0439\u043f\u0005|",
  "?\u0002\u043a\u043f\u0005\u0082B\u0002\u043b\u043f\u0005\u0084C\u0002",
  "\u043c\u043f\u0005\u0086D\u0002\u043d\u043f\u0005\u0088E\u0002\u043e",
  "\u0439\u0003\u0002\u0002\u0002\u043e\u043a\u0003\u0002\u0002\u0002\u043e",
  "\u043b\u0003\u0002\u0002\u0002\u043e\u043c\u0003\u0002\u0002\u0002\u043e",
  "\u043d\u0003\u0002\u0002\u0002\u043f\u0081\u0003\u0002\u0002\u0002\u0440",
  "\u0441\u0007@\u0002\u0002\u0441\u0442\u0005\u01a2\u00d2\u0002\u0442",
  "\u0443\u0007\u0092\u0002\u0002\u0443\u0444\u0005 \u0011\u0002\u0444",
  "\u0083\u0003\u0002\u0002\u0002\u0445\u0446\u0007q\u0002\u0002\u0446",
  "\u0447\u0005 \u0011\u0002\u0447\u0085\u0003\u0002\u0002\u0002\u0448",
  "\u044a\u0007?\u0002\u0002\u0449\u044b\u0005\u0006\u0004\u0002\u044a",
  "\u0449\u0003\u0002\u0002\u0002\u044a\u044b\u0003\u0002\u0002\u0002\u044b",
  "\u044c\u0003\u0002\u0002\u0002\u044c\u044d\u0005\u01a2\u00d2\u0002\u044d",
  "\u044e\u00079\u0002\u0002\u044e\u044f\u0005 \u0011\u0002\u044f\u0450",
  "\u0007H\u0002\u0002\u0450\u0451\u0005 \u0011\u0002\u0451\u0452\u0007",
  ")\u0002\u0002\u0452\u0455\u0005 \u0011\u0002\u0453\u0454\u0007=\u0002",
  "\u0002\u0454\u0456\u0005\u01a2\u00d2\u0002\u0455\u0453\u0003\u0002\u0002",
  "\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u0087\u0003\u0002\u0002",
  "\u0002\u0457\u0458\u0007J\u0002\u0002\u0458\u045d\u0005\u008aF\u0002",
  "\u0459\u045a\u0007\u0085\u0002\u0002\u045a\u045c\u0005\u008aF\u0002",
  "\u045b\u0459\u0003\u0002\u0002\u0002\u045c\u045f\u0003\u0002\u0002\u0002",
  "\u045d\u045b\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002",
  "\u045e\u0089\u0003\u0002\u0002\u0002\u045f\u045d\u0003\u0002\u0002\u0002",
  "\u0460\u0462\u0005 \u0011\u0002\u0461\u0463\t\n\u0002\u0002\u0462\u0461",
  "\u0003\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u008b",
  "\u0003\u0002\u0002\u0002\u0464\u0465\u0007X\u0002\u0002\u0465\u046c",
  "\u0005 \u0011\u0002\u0466\u0467\u00076\u0002\u0002\u0467\u0468\u0005",
  " \u0011\u0002\u0468\u0469\u0007\u0017\u0002\u0002\u0469\u046a\u0005",
  " \u0011\u0002\u046a\u046c\u0003\u0002\u0002\u0002\u046b\u0464\u0003",
  "\u0002\u0002\u0002\u046b\u0466\u0003\u0002\u0002\u0002\u046c\u008d\u0003",
  "\u0002\u0002\u0002\u046d\u046e\u0007=\u0002\u0002\u046e\u046f\u0005",
  "\u01a2\u00d2\u0002\u046f\u0470\u0005~@\u0002\u0470\u008f\u0003\u0002",
  "\u0002\u0002\u0471\u047a\u0005\u0092J\u0002\u0472\u0475\u0005\u009a",
  "N\u0002\u0473\u0475\u0005\u00a4S\u0002\u0474\u0472\u0003\u0002\u0002",
  "\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002\u0002",
  "\u0002\u0476\u0477\u0007\u0087\u0002\u0002\u0477\u047a\u0003\u0002\u0002",
  "\u0002\u0478\u047a\u0005\u0094K\u0002\u0479\u0471\u0003\u0002\u0002",
  "\u0002\u0479\u0474\u0003\u0002\u0002\u0002\u0479\u0478\u0003\u0002\u0002",
  "\u0002\u047a\u0091\u0003\u0002\u0002\u0002\u047b\u047c\u0005\u01a2\u00d2",
  "\u0002\u047c\u047d\u0007\u0086\u0002\u0002\u047d\u047e\u0005\u0090I",
  "\u0002\u047e\u0093\u0003\u0002\u0002\u0002\u047f\u0482\u0005\u0098M",
  "\u0002\u0480\u0482\u0005\u0096L\u0002\u0481\u047f\u0003\u0002\u0002",
  "\u0002\u0481\u0480\u0003\u0002\u0002\u0002\u0482\u0095\u0003\u0002\u0002",
  "\u0002\u0483\u0503\u0007\u0087\u0002\u0002\u0484\u0485\u0005 \u0011",
  "\u0002\u0485\u0486\u0007\u0087\u0002\u0002\u0486\u0503\u0003\u0002\u0002",
  "\u0002\u0487\u0488\u00077\u0002\u0002\u0488\u0489\u0007\u0082\u0002",
  "\u0002\u0489\u048a\u0005 \u0011\u0002\u048a\u048b\u0007\u0083\u0002",
  "\u0002\u048b\u048e\u0005\u00a6T\u0002\u048c\u048d\u0007'\u0002\u0002",
  "\u048d\u048f\u0005\u00a6T\u0002\u048e\u048c\u0003\u0002\u0002\u0002",
  "\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0503\u0003\u0002\u0002\u0002",
  "\u0490\u0491\u0007`\u0002\u0002\u0491\u0492\u0007\u0082\u0002\u0002",
  "\u0492\u0493\u0005 \u0011\u0002\u0493\u0494\u0007\u0083\u0002\u0002",
  "\u0494\u0498\u0007~\u0002\u0002\u0495\u0497\u0005\u00a8U\u0002\u0496",
  "\u0495\u0003\u0002\u0002\u0002\u0497\u049a\u0003\u0002\u0002\u0002\u0498",
  "\u0496\u0003\u0002\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499",
  "\u049b\u0003\u0002\u0002\u0002\u049a\u0498\u0003\u0002\u0002\u0002\u049b",
  "\u049c\u0007\u007f\u0002\u0002\u049c\u0503\u0003\u0002\u0002\u0002\u049d",
  "\u049e\u0007r\u0002\u0002\u049e\u049f\u0007\u0082\u0002\u0002\u049f",
  "\u04a0\u0005 \u0011\u0002\u04a0\u04a1\u0007\u0083\u0002\u0002\u04a1",
  "\u04a2\u0005\u0094K\u0002\u04a2\u0503\u0003\u0002\u0002\u0002\u04a3",
  "\u04a4\u0007$\u0002\u0002\u04a4\u04a5\u0005\u0094K\u0002\u04a5\u04a6",
  "\u0007r\u0002\u0002\u04a6\u04a7\u0007\u0082\u0002\u0002\u04a7\u04a8",
  "\u0005 \u0011\u0002\u04a8\u04a9\u0007\u0083\u0002\u0002\u04a9\u04aa",
  "\u0007\u0087\u0002\u0002\u04aa\u0503\u0003\u0002\u0002\u0002\u04ab\u04ac",
  "\u00071\u0002\u0002\u04ac\u04ae\u0007\u0082\u0002\u0002\u04ad\u04af",
  "\u0005\u00b0Y\u0002\u04ae\u04ad\u0003\u0002\u0002\u0002\u04ae\u04af",
  "\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04b2",
  "\u0007\u0087\u0002\u0002\u04b1\u04b3\u0005 \u0011\u0002\u04b2\u04b1",
  "\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b4",
  "\u0003\u0002\u0002\u0002\u04b4\u04b6\u0007\u0087\u0002\u0002\u04b5\u04b7",
  "\u0005\u00b2Z\u0002\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b6\u04b7",
  "\u0003\u0002\u0002\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04b9",
  "\u0007\u0083\u0002\u0002\u04b9\u0503\u0005\u0094K\u0002\u04ba\u04bb",
  "\u00072\u0002\u0002\u04bb\u04bc\u0007\u0082\u0002\u0002\u04bc\u04bd",
  "\u0005\u009cO\u0002\u04bd\u04be\u0005\u01a2\u00d2\u0002\u04be\u04bf",
  "\u00079\u0002\u0002\u04bf\u04c0\u0005 \u0011\u0002\u04c0\u04c1\u0007",
  "\u0083\u0002\u0002\u04c1\u04c2\u0005\u0094K\u0002\u04c2\u0503\u0003",
  "\u0002\u0002\u0002\u04c3\u04c4\u0007\u0016\u0002\u0002\u04c4\u0503\u0007",
  "\u0087\u0002\u0002\u04c5\u04c6\u0007\u001f\u0002\u0002\u04c6\u0503\u0007",
  "\u0087\u0002\u0002\u04c7\u04cc\u00075\u0002\u0002\u04c8\u04cd\u0005",
  "\u01a2\u00d2\u0002\u04c9\u04ca\u0007\u0019\u0002\u0002\u04ca\u04cd\u0005",
  " \u0011\u0002\u04cb\u04cd\u0007!\u0002\u0002\u04cc\u04c8\u0003\u0002",
  "\u0002\u0002\u04cc\u04c9\u0003\u0002\u0002\u0002\u04cc\u04cb\u0003\u0002",
  "\u0002\u0002\u04cd\u04ce\u0003\u0002\u0002\u0002\u04ce\u0503\u0007\u0087",
  "\u0002\u0002\u04cf\u04d1\u0007U\u0002\u0002\u04d0\u04d2\u0005 \u0011",
  "\u0002\u04d1\u04d0\u0003\u0002\u0002\u0002\u04d1\u04d2\u0003\u0002\u0002",
  "\u0002\u04d2\u04d3\u0003\u0002\u0002\u0002\u04d3\u0503\u0007\u0087\u0002",
  "\u0002\u04d4\u04d6\u0007b\u0002\u0002\u04d5\u04d7\u0005 \u0011\u0002",
  "\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002\u0002",
  "\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u0503\u0007\u0087\u0002\u0002",
  "\u04d9\u04da\u0007d\u0002\u0002\u04da\u04e0\u0005\u0098M\u0002\u04db",
  "\u04dd\u0005\u00b4[\u0002\u04dc\u04de\u0005\u00bc_\u0002\u04dd\u04dc",
  "\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002\u0002\u0002\u04de\u04e1",
  "\u0003\u0002\u0002\u0002\u04df\u04e1\u0005\u00bc_\u0002\u04e0\u04db",
  "\u0003\u0002\u0002\u0002\u04e0\u04df\u0003\u0002\u0002\u0002\u04e1\u0503",
  "\u0003\u0002\u0002\u0002\u04e2\u04e3\u0007\u001c\u0002\u0002\u04e3\u0503",
  "\u0005\u0098M\u0002\u04e4\u04e5\u0007h\u0002\u0002\u04e5\u0503\u0005",
  "\u0098M\u0002\u04e6\u04e7\u0007A\u0002\u0002\u04e7\u04e8\u0007\u0082",
  "\u0002\u0002\u04e8\u04e9\u0005 \u0011\u0002\u04e9\u04ea\u0007\u0083",
  "\u0002\u0002\u04ea\u04eb\u0005\u0094K\u0002\u04eb\u0503\u0003\u0002",
  "\u0002\u0002\u04ec\u04ed\u0007k\u0002\u0002\u04ed\u04ee\u0007\u0082",
  "\u0002\u0002\u04ee\u04ef\u0005\u00be`\u0002\u04ef\u04f0\u0007\u0083",
  "\u0002\u0002\u04f0\u04f1\u0005\u0094K\u0002\u04f1\u0503\u0003\u0002",
  "\u0002\u0002\u04f2\u04f6\u0007s\u0002\u0002\u04f3\u04f4\u0007U\u0002",
  "\u0002\u04f4\u04f7\u0005 \u0011\u0002\u04f5\u04f7\u0007\u0016\u0002",
  "\u0002\u04f6\u04f3\u0003\u0002\u0002\u0002\u04f6\u04f5\u0003\u0002\u0002",
  "\u0002\u04f7\u04f8\u0003\u0002\u0002\u0002\u04f8\u0503\u0007\u0087\u0002",
  "\u0002\u04f9\u04fa\u0007i\u0002\u0002\u04fa\u0503\u0005\u0098M\u0002",
  "\u04fb\u04fc\u0007/\u0002\u0002\u04fc\u04fd\u0007\u0082\u0002\u0002",
  "\u04fd\u04fe\u0005\u015a\u00ae\u0002\u04fe\u04ff\u0005\u015c\u00af\u0002",
  "\u04ff\u0500\u0007\u0083\u0002\u0002\u0500\u0501\u0005\u0094K\u0002",
  "\u0501\u0503\u0003\u0002\u0002\u0002\u0502\u0483\u0003\u0002\u0002\u0002",
  "\u0502\u0484\u0003\u0002\u0002\u0002\u0502\u0487\u0003\u0002\u0002\u0002",
  "\u0502\u0490\u0003\u0002\u0002\u0002\u0502\u049d\u0003\u0002\u0002\u0002",
  "\u0502\u04a3\u0003\u0002\u0002\u0002\u0502\u04ab\u0003\u0002\u0002\u0002",
  "\u0502\u04ba\u0003\u0002\u0002\u0002\u0502\u04c3\u0003\u0002\u0002\u0002",
  "\u0502\u04c5\u0003\u0002\u0002\u0002\u0502\u04c7\u0003\u0002\u0002\u0002",
  "\u0502\u04cf\u0003\u0002\u0002\u0002\u0502\u04d4\u0003\u0002\u0002\u0002",
  "\u0502\u04d9\u0003\u0002\u0002\u0002\u0502\u04e2\u0003\u0002\u0002\u0002",
  "\u0502\u04e4\u0003\u0002\u0002\u0002\u0502\u04e6\u0003\u0002\u0002\u0002",
  "\u0502\u04ec\u0003\u0002\u0002\u0002\u0502\u04f2\u0003\u0002\u0002\u0002",
  "\u0502\u04f9\u0003\u0002\u0002\u0002\u0502\u04fb\u0003\u0002\u0002\u0002",
  "\u0503\u0097\u0003\u0002\u0002\u0002\u0504\u0506\u0007~\u0002\u0002",
  "\u0505\u0507\u0005\u00aeX\u0002\u0506\u0505\u0003\u0002\u0002\u0002",
  "\u0506\u0507\u0003\u0002\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002",
  "\u0508\u0509\u0007\u007f\u0002\u0002\u0509\u0099\u0003\u0002\u0002\u0002",
  "\u050a\u050b\u0005\u009cO\u0002\u050b\u0510\u0005\u009eP\u0002\u050c",
  "\u050d\u0007\u0085\u0002\u0002\u050d\u050f\u0005\u009eP\u0002\u050e",
  "\u050c\u0003\u0002\u0002\u0002\u050f\u0512\u0003\u0002\u0002\u0002\u0510",
  "\u050e\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511",
  "\u009b\u0003\u0002\u0002\u0002\u0512\u0510\u0003\u0002\u0002\u0002\u0513",
  "\u0516\u0007l\u0002\u0002\u0514\u0516\u0005\u0006\u0004\u0002\u0515",
  "\u0513\u0003\u0002\u0002\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0516",
  "\u009d\u0003\u0002\u0002\u0002\u0517\u051a\u0005\u00a0Q\u0002\u0518",
  "\u0519\u0007\u0092\u0002\u0002\u0519\u051b\u0005\u00a2R\u0002\u051a",
  "\u0518\u0003\u0002\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b",
  "\u009f\u0003\u0002\u0002\u0002\u051c\u0529\u0005\u01a2\u00d2\u0002\u051d",
  "\u051e\u0007\u0082\u0002\u0002\u051e\u0523\u0005\u01a2\u00d2\u0002\u051f",
  "\u0520\u0007\u0085\u0002\u0002\u0520\u0522\u0005\u01a2\u00d2\u0002\u0521",
  "\u051f\u0003\u0002\u0002\u0002\u0522\u0525\u0003\u0002\u0002\u0002\u0523",
  "\u0521\u0003\u0002\u0002\u0002\u0523\u0524\u0003\u0002\u0002\u0002\u0524",
  "\u0526\u0003\u0002\u0002\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0526",
  "\u0527\u0007\u0083\u0002\u0002\u0527\u0529\u0003\u0002\u0002\u0002\u0528",
  "\u051c\u0003\u0002\u0002\u0002\u0528\u051d\u0003\u0002\u0002\u0002\u0529",
  "\u00a1\u0003\u0002\u0002\u0002\u052a\u052e\u0005 \u0011\u0002\u052b",
  "\u052e\u0005\u0134\u009b\u0002\u052c\u052e\u0005\u0164\u00b3\u0002\u052d",
  "\u052a\u0003\u0002\u0002\u0002\u052d\u052b\u0003\u0002\u0002\u0002\u052d",
  "\u052c\u0003\u0002\u0002\u0002\u052e\u00a3\u0003\u0002\u0002\u0002\u052f",
  "\u0530\u0007\u001e\u0002\u0002\u0530\u0531\u0005\u0006\u0004\u0002\u0531",
  "\u0532\u0005\u00f8}\u0002\u0532\u00a5\u0003\u0002\u0002\u0002\u0533",
  "\u0536\u0005\u0098M\u0002\u0534\u0536\u0005\u0096L\u0002\u0535\u0533",
  "\u0003\u0002\u0002\u0002\u0535\u0534\u0003\u0002\u0002\u0002\u0536\u00a7",
  "\u0003\u0002\u0002\u0002\u0537\u0539\u0005\u00aaV\u0002\u0538\u0537",
  "\u0003\u0002\u0002\u0002\u0539\u053a\u0003\u0002\u0002\u0002\u053a\u0538",
  "\u0003\u0002\u0002\u0002\u053a\u053b\u0003\u0002\u0002\u0002\u053b\u053c",
  "\u0003\u0002\u0002\u0002\u053c\u053d\u0005\u00aeX\u0002\u053d\u00a9",
  "\u0003\u0002\u0002\u0002\u053e\u0540\u0007\u0019\u0002\u0002\u053f\u0541",
  "\u0005\u0006\u0004\u0002\u0540\u053f\u0003\u0002\u0002\u0002\u0540\u0541",
  "\u0003\u0002\u0002\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0542\u0544",
  "\u0005 \u0011\u0002\u0543\u0545\u0005\u00acW\u0002\u0544\u0543\u0003",
  "\u0002\u0002\u0002\u0544\u0545\u0003\u0002\u0002\u0002\u0545\u0546\u0003",
  "\u0002\u0002\u0002\u0546\u0547\u0007\u0086\u0002\u0002\u0547\u054b\u0003",
  "\u0002\u0002\u0002\u0548\u0549\u0007!\u0002\u0002\u0549\u054b\u0007",
  "\u0086\u0002\u0002\u054a\u053e\u0003\u0002\u0002\u0002\u054a\u0548\u0003",
  "\u0002\u0002\u0002\u054b\u00ab\u0003\u0002\u0002\u0002\u054c\u054d\u0007",
  "p\u0002\u0002\u054d\u054e\u0005(\u0015\u0002\u054e\u00ad\u0003\u0002",
  "\u0002\u0002\u054f\u0551\u0005\u0090I\u0002\u0550\u054f\u0003\u0002",
  "\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u0550\u0003\u0002",
  "\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002\u0553\u00af\u0003\u0002",
  "\u0002\u0002\u0554\u055e\u0005\u009aN\u0002\u0555\u055a\u0005 \u0011",
  "\u0002\u0556\u0557\u0007\u0085\u0002\u0002\u0557\u0559\u0005 \u0011",
  "\u0002\u0558\u0556\u0003\u0002\u0002\u0002\u0559\u055c\u0003\u0002\u0002",
  "\u0002\u055a\u0558\u0003\u0002\u0002\u0002\u055a\u055b\u0003\u0002\u0002",
  "\u0002\u055b\u055e\u0003\u0002\u0002\u0002\u055c\u055a\u0003\u0002\u0002",
  "\u0002\u055d\u0554\u0003\u0002\u0002\u0002\u055d\u0555\u0003\u0002\u0002",
  "\u0002\u055e\u00b1\u0003\u0002\u0002\u0002\u055f\u0564\u0005 \u0011",
  "\u0002\u0560\u0561\u0007\u0085\u0002\u0002\u0561\u0563\u0005 \u0011",
  "\u0002\u0562\u0560\u0003\u0002\u0002\u0002\u0563\u0566\u0003\u0002\u0002",
  "\u0002\u0564\u0562\u0003\u0002\u0002\u0002\u0564\u0565\u0003\u0002\u0002",
  "\u0002\u0565\u00b3\u0003\u0002\u0002\u0002\u0566\u0564\u0003\u0002\u0002",
  "\u0002\u0567\u056b\u0005\u00b6\\\u0002\u0568\u056a\u0005\u00b6\\\u0002",
  "\u0569\u0568\u0003\u0002\u0002\u0002\u056a\u056d\u0003\u0002\u0002\u0002",
  "\u056b\u0569\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002\u0002\u0002",
  "\u056c\u056f\u0003\u0002\u0002\u0002\u056d\u056b\u0003\u0002\u0002\u0002",
  "\u056e\u0570\u0005\u00b8]\u0002\u056f\u056e\u0003\u0002\u0002\u0002",
  "\u056f\u0570\u0003\u0002\u0002\u0002\u0570\u0573\u0003\u0002\u0002\u0002",
  "\u0571\u0573\u0005\u00b8]\u0002\u0572\u0567\u0003\u0002\u0002\u0002",
  "\u0572\u0571\u0003\u0002\u0002\u0002\u0573\u00b5\u0003\u0002\u0002\u0002",
  "\u0574\u0575\u0007\u001a\u0002\u0002\u0575\u0576\u0007\u0082\u0002\u0002",
  "\u0576\u0578\u0005\u0016\f\u0002\u0577\u0579\u0005\u01a2\u00d2\u0002",
  "\u0578\u0577\u0003\u0002\u0002\u0002\u0578\u0579\u0003\u0002\u0002\u0002",
  "\u0579\u057a\u0003\u0002\u0002\u0002\u057a\u057c\u0007\u0083\u0002\u0002",
  "\u057b\u057d\u0005\u00ba^\u0002\u057c\u057b\u0003\u0002\u0002\u0002",
  "\u057c\u057d\u0003\u0002\u0002\u0002\u057d\u057e\u0003\u0002\u0002\u0002",
  "\u057e\u057f\u0005\u0098M\u0002\u057f\u00b7\u0003\u0002\u0002\u0002",
  "\u0580\u0582\u0007\u001a\u0002\u0002\u0581\u0583\u0005\u00ba^\u0002",
  "\u0582\u0581\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002",
  "\u0583\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0005\u0098M\u0002",
  "\u0585\u00b9\u0003\u0002\u0002\u0002\u0586\u0587\u0007p\u0002\u0002",
  "\u0587\u0588\u0007\u0082\u0002\u0002\u0588\u0589\u0005 \u0011\u0002",
  "\u0589\u058a\u0007\u0083\u0002\u0002\u058a\u00bb\u0003\u0002\u0002\u0002",
  "\u058b\u058c\u0007.\u0002\u0002\u058c\u058d\u0005\u0098M\u0002\u058d",
  "\u00bd\u0003\u0002\u0002\u0002\u058e\u0591\u0005\u009aN\u0002\u058f",
  "\u0591\u0005 \u0011\u0002\u0590\u058e\u0003\u0002\u0002\u0002\u0590",
  "\u058f\u0003\u0002\u0002\u0002\u0591\u00bf\u0003\u0002\u0002\u0002\u0592",
  "\u0593\u0007D\u0002\u0002\u0593\u0594\u0005\u00c2b\u0002\u0594\u0596",
  "\u0005\u00c4c\u0002\u0595\u0597\u0007\u0087\u0002\u0002\u0596\u0595",
  "\u0003\u0002\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u00c1",
  "\u0003\u0002\u0002\u0002\u0598\u059d\u0005\u01a2\u00d2\u0002\u0599\u059a",
  "\u0007\u0084\u0002\u0002\u059a\u059c\u0005\u01a2\u00d2\u0002\u059b\u0599",
  "\u0003\u0002\u0002\u0002\u059c\u059f\u0003\u0002\u0002\u0002\u059d\u059b",
  "\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002\u0002\u0002\u059e\u00c3",
  "\u0003\u0002\u0002\u0002\u059f\u059d\u0003\u0002\u0002\u0002\u05a0\u05a2",
  "\u0007~\u0002\u0002\u05a1\u05a3\u0005\u00c6d\u0002\u05a2\u05a1\u0003",
  "\u0002\u0002\u0002\u05a2\u05a3\u0003\u0002\u0002\u0002\u05a3\u05a5\u0003",
  "\u0002\u0002\u0002\u05a4\u05a6\u0005\u00caf\u0002\u05a5\u05a4\u0003",
  "\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6\u05a8\u0003",
  "\u0002\u0002\u0002\u05a7\u05a9\u0005\u00ceh\u0002\u05a8\u05a7\u0003",
  "\u0002\u0002\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003",
  "\u0002\u0002\u0002\u05aa\u05ab\u0007\u007f\u0002\u0002\u05ab\u00c5\u0003",
  "\u0002\u0002\u0002\u05ac\u05ae\u0005\u00c8e\u0002\u05ad\u05ac\u0003",
  "\u0002\u0002\u0002\u05ae\u05af\u0003\u0002\u0002\u0002\u05af\u05ad\u0003",
  "\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002\u05b0\u00c7\u0003",
  "\u0002\u0002\u0002\u05b1\u05b2\u0007,\u0002\u0002\u05b2\u05b3\u0007",
  "\u000e\u0002\u0002\u05b3\u05b4\u0005\u01a2\u00d2\u0002\u05b4\u05b5\u0007",
  "\u0087\u0002\u0002\u05b5\u00c9\u0003\u0002\u0002\u0002\u05b6\u05b8\u0005",
  "\u00ccg\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b8\u05b9\u0003",
  "\u0002\u0002\u0002\u05b9\u05b7\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003",
  "\u0002\u0002\u0002\u05ba\u00cb\u0003\u0002\u0002\u0002\u05bb\u05bc\u0007",
  "k\u0002\u0002\u05bc\u05bd\u0005\u01a2\u00d2\u0002\u05bd\u05be\u0007",
  "\u0092\u0002\u0002\u05be\u05bf\u0005\u0004\u0003\u0002\u05bf\u05c0\u0007",
  "\u0087\u0002\u0002\u05c0\u05cb\u0003\u0002\u0002\u0002\u05c1\u05c2\u0007",
  "k\u0002\u0002\u05c2\u05c3\u0005\u0004\u0003\u0002\u05c3\u05c4\u0007",
  "\u0087\u0002\u0002\u05c4\u05cb\u0003\u0002\u0002\u0002\u05c5\u05c6\u0007",
  "k\u0002\u0002\u05c6\u05c7\u0007]\u0002\u0002\u05c7\u05c8\u0005\u0004",
  "\u0003\u0002\u05c8\u05c9\u0007\u0087\u0002\u0002\u05c9\u05cb\u0003\u0002",
  "\u0002\u0002\u05ca\u05bb\u0003\u0002\u0002\u0002\u05ca\u05c1\u0003\u0002",
  "\u0002\u0002\u05ca\u05c5\u0003\u0002\u0002\u0002\u05cb\u00cd\u0003\u0002",
  "\u0002\u0002\u05cc\u05ce\u0005\u00d0i\u0002\u05cd\u05cc\u0003\u0002",
  "\u0002\u0002\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf\u05cd\u0003\u0002",
  "\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0\u00cf\u0003\u0002",
  "\u0002\u0002\u05d1\u05d4\u0005\u00c0a\u0002\u05d2\u05d4\u0005\u00d2",
  "j\u0002\u05d3\u05d1\u0003\u0002\u0002\u0002\u05d3\u05d2\u0003\u0002",
  "\u0002\u0002\u05d4\u00d1\u0003\u0002\u0002\u0002\u05d5\u05d7\u0005\u014e",
  "\u00a8\u0002\u05d6\u05d5\u0003\u0002\u0002\u0002\u05d6\u05d7\u0003\u0002",
  "\u0002\u0002\u05d7\u05d9\u0003\u0002\u0002\u0002\u05d8\u05da\u0005\u00f0",
  "y\u0002\u05d9\u05d8\u0003\u0002\u0002\u0002\u05d9\u05da\u0003\u0002",
  "\u0002\u0002\u05da\u05e0\u0003\u0002\u0002\u0002\u05db\u05e1\u0005\u017e",
  "\u00c0\u0002\u05dc\u05e1\u0005\u0180\u00c1\u0002\u05dd\u05e1\u0005\u0182",
  "\u00c2\u0002\u05de\u05e1\u0005\u0184\u00c3\u0002\u05df\u05e1\u0005\u0186",
  "\u00c4\u0002\u05e0\u05db\u0003\u0002\u0002\u0002\u05e0\u05dc\u0003\u0002",
  "\u0002\u0002\u05e0\u05dd\u0003\u0002\u0002\u0002\u05e0\u05de\u0003\u0002",
  "\u0002\u0002\u05e0\u05df\u0003\u0002\u0002\u0002\u05e1\u00d3\u0003\u0002",
  "\u0002\u0002\u05e2\u05e3\u0005\u01a2\u00d2\u0002\u05e3\u05e4\u0007\u0096",
  "\u0002\u0002\u05e4\u05e6\u0005\u01a2\u00d2\u0002\u05e5\u05e7\u0005\u0018",
  "\r\u0002\u05e6\u05e5\u0003\u0002\u0002\u0002\u05e6\u05e7\u0003\u0002",
  "\u0002\u0002\u05e7\u00d5\u0003\u0002\u0002\u0002\u05e8\u05e9\u0007\u0093",
  "\u0002\u0002\u05e9\u05ee\u0005\u00d8m\u0002\u05ea\u05eb\u0007\u0085",
  "\u0002\u0002\u05eb\u05ed\u0005\u00d8m\u0002\u05ec\u05ea\u0003\u0002",
  "\u0002\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002\u05ee\u05ec\u0003\u0002",
  "\u0002\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002\u05ef\u05f1\u0003\u0002",
  "\u0002\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1\u05f2\u0007\u0094",
  "\u0002\u0002\u05f2\u00d7\u0003\u0002\u0002\u0002\u05f3\u05f5\u0005\u014e",
  "\u00a8\u0002\u05f4\u05f3\u0003\u0002\u0002\u0002\u05f4\u05f5\u0003\u0002",
  "\u0002\u0002\u05f5\u05f6\u0003\u0002\u0002\u0002\u05f6\u05f7\u0005\u01a2",
  "\u00d2\u0002\u05f7\u00d9\u0003\u0002\u0002\u0002\u05f8\u05f9\u0007\u0086",
  "\u0002\u0002\u05f9\u05fe\u0005\u0016\f\u0002\u05fa\u05fb\u0007\u0085",
  "\u0002\u0002\u05fb\u05fd\u0005\u0004\u0003\u0002\u05fc\u05fa\u0003\u0002",
  "\u0002\u0002\u05fd\u0600\u0003\u0002\u0002\u0002\u05fe\u05fc\u0003\u0002",
  "\u0002\u0002\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff\u00db\u0003\u0002",
  "\u0002\u0002\u0600\u05fe\u0003\u0002\u0002\u0002\u0601\u0606\u0005\u0004",
  "\u0003\u0002\u0602\u0603\u0007\u0085\u0002\u0002\u0603\u0605\u0005\u0004",
  "\u0003\u0002\u0604\u0602\u0003\u0002\u0002\u0002\u0605\u0608\u0003\u0002",
  "\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0606\u0607\u0003\u0002",
  "\u0002\u0002\u0607\u00dd\u0003\u0002\u0002\u0002\u0608\u0606\u0003\u0002",
  "\u0002\u0002\u0609\u060b\u0005\u00e0q\u0002\u060a\u0609\u0003\u0002",
  "\u0002\u0002\u060b\u060c\u0003\u0002\u0002\u0002\u060c\u060a\u0003\u0002",
  "\u0002\u0002\u060c\u060d\u0003\u0002\u0002\u0002\u060d\u00df\u0003\u0002",
  "\u0002\u0002\u060e\u060f\u0007q\u0002\u0002\u060f\u0610\u0005\u01a2",
  "\u00d2\u0002\u0610\u0611\u0007\u0086\u0002\u0002\u0611\u0612\u0005\u00e2",
  "r\u0002\u0612\u00e1\u0003\u0002\u0002\u0002\u0613\u061e\u0005\u00e8",
  "u\u0002\u0614\u0617\u0005\u00e4s\u0002\u0615\u0616\u0007\u0085\u0002",
  "\u0002\u0616\u0618\u0005\u00e6t\u0002\u0617\u0615\u0003\u0002\u0002",
  "\u0002\u0617\u0618\u0003\u0002\u0002\u0002\u0618\u061b\u0003\u0002\u0002",
  "\u0002\u0619\u061a\u0007\u0085\u0002\u0002\u061a\u061c\u0005\u00e8u",
  "\u0002\u061b\u0619\u0003\u0002\u0002\u0002\u061b\u061c\u0003\u0002\u0002",
  "\u0002\u061c\u061e\u0003\u0002\u0002\u0002\u061d\u0613\u0003\u0002\u0002",
  "\u0002\u061d\u0614\u0003\u0002\u0002\u0002\u061e\u00e3\u0003\u0002\u0002",
  "\u0002\u061f\u0623\u0005\u0016\f\u0002\u0620\u0623\u0007\u001d\u0002",
  "\u0002\u0621\u0623\u0007_\u0002\u0002\u0622\u061f\u0003\u0002\u0002",
  "\u0002\u0622\u0620\u0003\u0002\u0002\u0002\u0622\u0621\u0003\u0002\u0002",
  "\u0002\u0623\u00e5\u0003\u0002\u0002\u0002\u0624\u0629\u0005\u0004\u0003",
  "\u0002\u0625\u0626\u0007\u0085\u0002\u0002\u0626\u0628\u0005\u0004\u0003",
  "\u0002\u0627\u0625\u0003\u0002\u0002\u0002\u0628\u062b\u0003\u0002\u0002",
  "\u0002\u0629\u0627\u0003\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002",
  "\u0002\u062a\u00e7\u0003\u0002\u0002\u0002\u062b\u0629\u0003\u0002\u0002",
  "\u0002\u062c\u062d\u0007E\u0002\u0002\u062d\u062e\u0007\u0082\u0002",
  "\u0002\u062e\u062f\u0007\u0083\u0002\u0002\u062f\u00e9\u0003\u0002\u0002",
  "\u0002\u0630\u0632\u0007~\u0002\u0002\u0631\u0633\u0005\u00ecw\u0002",
  "\u0632\u0631\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002\u0002\u0002",
  "\u0633\u0634\u0003\u0002\u0002\u0002\u0634\u0635\u0007\u007f\u0002\u0002",
  "\u0635\u00eb\u0003\u0002\u0002\u0002\u0636\u0638\u0005\u00eex\u0002",
  "\u0637\u0636\u0003\u0002\u0002\u0002\u0638\u0639\u0003\u0002\u0002\u0002",
  "\u0639\u0637\u0003\u0002\u0002\u0002\u0639\u063a\u0003\u0002\u0002\u0002",
  "\u063a\u00ed\u0003\u0002\u0002\u0002\u063b\u063d\u0005\u014e\u00a8\u0002",
  "\u063c\u063b\u0003\u0002\u0002\u0002\u063c\u063d\u0003\u0002\u0002\u0002",
  "\u063d\u063f\u0003\u0002\u0002\u0002\u063e\u0640\u0005\u00f0y\u0002",
  "\u063f\u063e\u0003\u0002\u0002\u0002\u063f\u0640\u0003\u0002\u0002\u0002",
  "\u0640\u0643\u0003\u0002\u0002\u0002\u0641\u0644\u0005\u00f4{\u0002",
  "\u0642\u0644\u0005\u0192\u00ca\u0002\u0643\u0641\u0003\u0002\u0002\u0002",
  "\u0643\u0642\u0003\u0002\u0002\u0002\u0644\u00ef\u0003\u0002\u0002\u0002",
  "\u0645\u0647\u0005\u00f2z\u0002\u0646\u0645\u0003\u0002\u0002\u0002",
  "\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u0646\u0003\u0002\u0002\u0002",
  "\u0648\u0649\u0003\u0002\u0002\u0002\u0649\u00f1\u0003\u0002\u0002\u0002",
  "\u064a\u064b\t\u000b\u0002\u0002\u064b\u00f3\u0003\u0002\u0002\u0002",
  "\u064c\u0660\u0005\u018e\u00c8\u0002\u064d\u0660\u0005\u00f6|\u0002",
  "\u064e\u0660\u0005\u0188\u00c5\u0002\u064f\u0655\u0005\u0124\u0093\u0002",
  "\u0650\u0656\u0005\u0128\u0095\u0002\u0651\u0652\u0005\u0166\u00b4\u0002",
  "\u0652\u0653\u0005 \u0011\u0002\u0653\u0654\u0007\u0087\u0002\u0002",
  "\u0654\u0656\u0003\u0002\u0002\u0002\u0655\u0650\u0003\u0002\u0002\u0002",
  "\u0655\u0651\u0003\u0002\u0002\u0002\u0656\u0660\u0003\u0002\u0002\u0002",
  "\u0657\u0660\u0005\u0194\u00cb\u0002\u0658\u0659\u0007n\u0002\u0002",
  "\u0659\u0660\u0005\u0196\u00cc\u0002\u065a\u0660\u0005\u017e\u00c0\u0002",
  "\u065b\u0660\u0005\u0180\u00c1\u0002\u065c\u0660\u0005\u0182\u00c2\u0002",
  "\u065d\u0660\u0005\u0184\u00c3\u0002\u065e\u0660\u0005\u0186\u00c4\u0002",
  "\u065f\u064c\u0003\u0002\u0002\u0002\u065f\u064d\u0003\u0002\u0002\u0002",
  "\u065f\u064e\u0003\u0002\u0002\u0002\u065f\u064f\u0003\u0002\u0002\u0002",
  "\u065f\u0657\u0003\u0002\u0002\u0002\u065f\u0658\u0003\u0002\u0002\u0002",
  "\u065f\u065a\u0003\u0002\u0002\u0002\u065f\u065b\u0003\u0002\u0002\u0002",
  "\u065f\u065c\u0003\u0002\u0002\u0002\u065f\u065d\u0003\u0002\u0002\u0002",
  "\u065f\u065e\u0003\u0002\u0002\u0002\u0660\u00f5\u0003\u0002\u0002\u0002",
  "\u0661\u066b\u0005\u0006\u0004\u0002\u0662\u0663\u0005\u0004\u0003\u0002",
  "\u0663\u0664\u0007\u0084\u0002\u0002\u0664\u0665\u0005\u0190\u00c9\u0002",
  "\u0665\u066c\u0003\u0002\u0002\u0002\u0666\u066c\u0005\u0196\u00cc\u0002",
  "\u0667\u066c\u0005\u018c\u00c7\u0002\u0668\u066c\u0005\u0190\u00c9\u0002",
  "\u0669\u066c\u0005\u019a\u00ce\u0002\u066a\u066c\u0005\u018a\u00c6\u0002",
  "\u066b\u0662\u0003\u0002\u0002\u0002\u066b\u0666\u0003\u0002\u0002\u0002",
  "\u066b\u0667\u0003\u0002\u0002\u0002\u066b\u0668\u0003\u0002\u0002\u0002",
  "\u066b\u0669\u0003\u0002\u0002\u0002\u066b\u066a\u0003\u0002\u0002\u0002",
  "\u066c\u00f7\u0003\u0002\u0002\u0002\u066d\u0672\u0005\u00fa~\u0002",
  "\u066e\u066f\u0007\u0085\u0002\u0002\u066f\u0671\u0005\u00fa~\u0002",
  "\u0670\u066e\u0003\u0002\u0002\u0002\u0671\u0674\u0003\u0002\u0002\u0002",
  "\u0672\u0670\u0003\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002",
  "\u0673\u00f9\u0003\u0002\u0002\u0002\u0674\u0672\u0003\u0002\u0002\u0002",
  "\u0675\u0676\u0005\u01a2\u00d2\u0002\u0676\u0677\u0007\u0092\u0002\u0002",
  "\u0677\u0678\u0005 \u0011\u0002\u0678\u00fb\u0003\u0002\u0002\u0002",
  "\u0679\u067e\u0005\u00fe\u0080\u0002\u067a\u067b\u0007\u0085\u0002\u0002",
  "\u067b\u067d\u0005\u00fe\u0080\u0002\u067c\u067a\u0003\u0002\u0002\u0002",
  "\u067d\u0680\u0003\u0002\u0002\u0002\u067e\u067c\u0003\u0002\u0002\u0002",
  "\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u00fd\u0003\u0002\u0002\u0002",
  "\u0680\u067e\u0003\u0002\u0002\u0002\u0681\u0684\u0005\u01a2\u00d2\u0002",
  "\u0682\u0683\u0007\u0092\u0002\u0002\u0683\u0685\u0005\u0100\u0081\u0002",
  "\u0684\u0682\u0003\u0002\u0002\u0002\u0684\u0685\u0003\u0002\u0002\u0002",
  "\u0685\u00ff\u0003\u0002\u0002\u0002\u0686\u0689\u0005 \u0011\u0002",
  "\u0687\u0689\u0005\u0134\u009b\u0002\u0688\u0686\u0003\u0002\u0002\u0002",
  "\u0688\u0687\u0003\u0002\u0002\u0002\u0689\u0101\u0003\u0002\u0002\u0002",
  "\u068a\u068d\u0005\u0006\u0004\u0002\u068b\u068d\u0007n\u0002\u0002",
  "\u068c\u068a\u0003\u0002\u0002\u0002\u068c\u068b\u0003\u0002\u0002\u0002",
  "\u068d\u0103\u0003\u0002\u0002\u0002\u068e\u068f\u0005\u0004\u0003\u0002",
  "\u068f\u0105\u0003\u0002\u0002\u0002\u0690\u0693\u0005\u0098M\u0002",
  "\u0691\u0693\u0007\u0087\u0002\u0002\u0692\u0690\u0003\u0002\u0002\u0002",
  "\u0692\u0691\u0003\u0002\u0002\u0002\u0693\u0107\u0003\u0002\u0002\u0002",
  "\u0694\u069b\u0005\u0110\u0089\u0002\u0695\u0698\u0005\u010a\u0086\u0002",
  "\u0696\u0697\u0007\u0085\u0002\u0002\u0697\u0699\u0005\u0110\u0089\u0002",
  "\u0698\u0696\u0003\u0002\u0002\u0002\u0698\u0699\u0003\u0002\u0002\u0002",
  "\u0699\u069b\u0003\u0002\u0002\u0002\u069a\u0694\u0003\u0002\u0002\u0002",
  "\u069a\u0695\u0003\u0002\u0002\u0002\u069b\u0109\u0003\u0002\u0002\u0002",
  "\u069c\u06a1\u0005\u010c\u0087\u0002\u069d\u069e\u0007\u0085\u0002\u0002",
  "\u069e\u06a0\u0005\u010c\u0087\u0002\u069f\u069d\u0003\u0002\u0002\u0002",
  "\u06a0\u06a3\u0003\u0002\u0002\u0002\u06a1\u069f\u0003\u0002\u0002\u0002",
  "\u06a1\u06a2\u0003\u0002\u0002\u0002\u06a2\u010b\u0003\u0002\u0002\u0002",
  "\u06a3\u06a1\u0003\u0002\u0002\u0002\u06a4\u06a6\u0005\u014e\u00a8\u0002",
  "\u06a5\u06a4\u0003\u0002\u0002\u0002\u06a5\u06a6\u0003\u0002\u0002\u0002",
  "\u06a6\u06a8\u0003\u0002\u0002\u0002\u06a7\u06a9\u0005\u010e\u0088\u0002",
  "\u06a8\u06a7\u0003\u0002\u0002\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002",
  "\u06a9\u06aa\u0003\u0002\u0002\u0002\u06aa\u06ad\u0005\u019c\u00cf\u0002",
  "\u06ab\u06ad\u0007\u000f\u0002\u0002\u06ac\u06a5\u0003\u0002\u0002\u0002",
  "\u06ac\u06ab\u0003\u0002\u0002\u0002\u06ad\u010d\u0003\u0002\u0002\u0002",
  "\u06ae\u06af\t\f\u0002\u0002\u06af\u010f\u0003\u0002\u0002\u0002\u06b0",
  "\u06b2\u0005\u014e\u00a8\u0002\u06b1\u06b0\u0003\u0002\u0002\u0002\u06b1",
  "\u06b2\u0003\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3",
  "\u06b4\u0007M\u0002\u0002\u06b4\u06b5\u0005\u0130\u0099\u0002\u06b5",
  "\u06b6\u0005\u01a2\u00d2\u0002\u06b6\u0111\u0003\u0002\u0002\u0002\u06b7",
  "\u06b9\u0005\u014e\u00a8\u0002\u06b8\u06b7\u0003\u0002\u0002\u0002\u06b8",
  "\u06b9\u0003\u0002\u0002\u0002\u06b9\u06bb\u0003\u0002\u0002\u0002\u06ba",
  "\u06bc\u0005\u0118\u008d\u0002\u06bb\u06ba\u0003\u0002\u0002\u0002\u06bb",
  "\u06bc\u0003\u0002\u0002\u0002\u06bc\u06c7\u0003\u0002\u0002\u0002\u06bd",
  "\u06be\u00074\u0002\u0002\u06be\u06c0\u0005\u011a\u008e\u0002\u06bf",
  "\u06c1\u0005\u0116\u008c\u0002\u06c0\u06bf\u0003\u0002\u0002\u0002\u06c0",
  "\u06c1\u0003\u0002\u0002\u0002\u06c1\u06c8\u0003\u0002\u0002\u0002\u06c2",
  "\u06c3\u0007Y\u0002\u0002\u06c3\u06c5\u0005\u011a\u008e\u0002\u06c4",
  "\u06c6\u0005\u0114\u008b\u0002\u06c5\u06c4\u0003\u0002\u0002\u0002\u06c5",
  "\u06c6\u0003\u0002\u0002\u0002\u06c6\u06c8\u0003\u0002\u0002\u0002\u06c7",
  "\u06bd\u0003\u0002\u0002\u0002\u06c7\u06c2\u0003\u0002\u0002\u0002\u06c8",
  "\u0113\u0003\u0002\u0002\u0002\u06c9\u06cb\u0005\u014e\u00a8\u0002\u06ca",
  "\u06c9\u0003\u0002\u0002\u0002\u06ca\u06cb\u0003\u0002\u0002\u0002\u06cb",
  "\u06cd\u0003\u0002\u0002\u0002\u06cc\u06ce\u0005\u0118\u008d\u0002\u06cd",
  "\u06cc\u0003\u0002\u0002\u0002\u06cd\u06ce\u0003\u0002\u0002\u0002\u06ce",
  "\u06cf\u0003\u0002\u0002\u0002\u06cf\u06d0\u00074\u0002\u0002\u06d0",
  "\u06d1\u0005\u011a\u008e\u0002\u06d1\u0115\u0003\u0002\u0002\u0002\u06d2",
  "\u06d4\u0005\u014e\u00a8\u0002\u06d3\u06d2\u0003\u0002\u0002\u0002\u06d3",
  "\u06d4\u0003\u0002\u0002\u0002\u06d4\u06d6\u0003\u0002\u0002\u0002\u06d5",
  "\u06d7\u0005\u0118\u008d\u0002\u06d6\u06d5\u0003\u0002\u0002\u0002\u06d6",
  "\u06d7\u0003\u0002\u0002\u0002\u06d7\u06d8\u0003\u0002\u0002\u0002\u06d8",
  "\u06d9\u0007Y\u0002\u0002\u06d9\u06da\u0005\u011a\u008e\u0002\u06da",
  "\u0117\u0003\u0002\u0002\u0002\u06db\u06e3\u0007P\u0002\u0002\u06dc",
  "\u06e3\u0007<\u0002\u0002\u06dd\u06e3\u0007O\u0002\u0002\u06de\u06df",
  "\u0007P\u0002\u0002\u06df\u06e3\u0007<\u0002\u0002\u06e0\u06e1\u0007",
  "<\u0002\u0002\u06e1\u06e3\u0007P\u0002\u0002\u06e2\u06db\u0003\u0002",
  "\u0002\u0002\u06e2\u06dc\u0003\u0002\u0002\u0002\u06e2\u06dd\u0003\u0002",
  "\u0002\u0002\u06e2\u06de\u0003\u0002\u0002\u0002\u06e2\u06e0\u0003\u0002",
  "\u0002\u0002\u06e3\u0119\u0003\u0002\u0002\u0002\u06e4\u06e7\u0005\u0098",
  "M\u0002\u06e5\u06e7\u0007\u0087\u0002\u0002\u06e6\u06e4\u0003\u0002",
  "\u0002\u0002\u06e6\u06e5\u0003\u0002\u0002\u0002\u06e7\u011b\u0003\u0002",
  "\u0002\u0002\u06e8\u06ea\u0005\u014e\u00a8\u0002\u06e9\u06e8\u0003\u0002",
  "\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06f3\u0003\u0002",
  "\u0002\u0002\u06eb\u06ec\u0007\r\u0002\u0002\u06ec\u06ed\u0005\u0098",
  "M\u0002\u06ed\u06ee\u0005\u0120\u0091\u0002\u06ee\u06f4\u0003\u0002",
  "\u0002\u0002\u06ef\u06f0\u0007T\u0002\u0002\u06f0\u06f1\u0005\u0098",
  "M\u0002\u06f1\u06f2\u0005\u011e\u0090\u0002\u06f2\u06f4\u0003\u0002",
  "\u0002\u0002\u06f3\u06eb\u0003\u0002\u0002\u0002\u06f3\u06ef\u0003\u0002",
  "\u0002\u0002\u06f4\u011d\u0003\u0002\u0002\u0002\u06f5\u06f7\u0005\u014e",
  "\u00a8\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003\u0002",
  "\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9\u0007\r",
  "\u0002\u0002\u06f9\u06fa\u0005\u0098M\u0002\u06fa\u011f\u0003\u0002",
  "\u0002\u0002\u06fb\u06fd\u0005\u014e\u00a8\u0002\u06fc\u06fb\u0003\u0002",
  "\u0002\u0002\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd\u06fe\u0003\u0002",
  "\u0002\u0002\u06fe\u06ff\u0007T\u0002\u0002\u06ff\u0700\u0005\u0098",
  "M\u0002\u0700\u0121\u0003\u0002\u0002\u0002\u0701\u0718\u0007\u0088",
  "\u0002\u0002\u0702\u0718\u0007\u0089\u0002\u0002\u0703\u0718\u0007\u0090",
  "\u0002\u0002\u0704\u0718\u0007\u0091\u0002\u0002\u0705\u0718\u0007\u0098",
  "\u0002\u0002\u0706\u0718\u0007\u0099\u0002\u0002\u0707\u0718\u0007c",
  "\u0002\u0002\u0708\u0718\u0007-\u0002\u0002\u0709\u0718\u0007\u008a",
  "\u0002\u0002\u070a\u0718\u0007\u008b\u0002\u0002\u070b\u0718\u0007\u008c",
  "\u0002\u0002\u070c\u0718\u0007\u008d\u0002\u0002\u070d\u0718\u0007\u008e",
  "\u0002\u0002\u070e\u0718\u0007\u008f\u0002\u0002\u070f\u0718\u0007\u00a9",
  "\u0002\u0002\u0710\u0718\u0005\u0168\u00b5\u0002\u0711\u0718\u0007\u009d",
  "\u0002\u0002\u0712\u0718\u0007\u009e\u0002\u0002\u0713\u0718\u0007\u0094",
  "\u0002\u0002\u0714\u0718\u0007\u0093\u0002\u0002\u0715\u0718\u0007\u00a0",
  "\u0002\u0002\u0716\u0718\u0007\u009f\u0002\u0002\u0717\u0701\u0003\u0002",
  "\u0002\u0002\u0717\u0702\u0003\u0002\u0002\u0002\u0717\u0703\u0003\u0002",
  "\u0002\u0002\u0717\u0704\u0003\u0002\u0002\u0002\u0717\u0705\u0003\u0002",
  "\u0002\u0002\u0717\u0706\u0003\u0002\u0002\u0002\u0717\u0707\u0003\u0002",
  "\u0002\u0002\u0717\u0708\u0003\u0002\u0002\u0002\u0717\u0709\u0003\u0002",
  "\u0002\u0002\u0717\u070a\u0003\u0002\u0002\u0002\u0717\u070b\u0003\u0002",
  "\u0002\u0002\u0717\u070c\u0003\u0002\u0002\u0002\u0717\u070d\u0003\u0002",
  "\u0002\u0002\u0717\u070e\u0003\u0002\u0002\u0002\u0717\u070f\u0003\u0002",
  "\u0002\u0002\u0717\u0710\u0003\u0002\u0002\u0002\u0717\u0711\u0003\u0002",
  "\u0002\u0002\u0717\u0712\u0003\u0002\u0002\u0002\u0717\u0713\u0003\u0002",
  "\u0002\u0002\u0717\u0714\u0003\u0002\u0002\u0002\u0717\u0715\u0003\u0002",
  "\u0002\u0002\u0717\u0716\u0003\u0002\u0002\u0002\u0718\u0123\u0003\u0002",
  "\u0002\u0002\u0719\u071a\t\r\u0002\u0002\u071a\u071b\u0007I\u0002\u0002",
  "\u071b\u071c\u0005\u0006\u0004\u0002\u071c\u071d\u0007\u0082\u0002\u0002",
  "\u071d\u071e\u0005\u019c\u00cf\u0002\u071e\u071f\u0007\u0083\u0002\u0002",
  "\u071f\u0125\u0003\u0002\u0002\u0002\u0720\u0721\u0007\u0086\u0002\u0002",
  "\u0721\u0722\t\u000e\u0002\u0002\u0722\u0724\u0007\u0082\u0002\u0002",
  "\u0723\u0725\u0005\u001a\u000e\u0002\u0724\u0723\u0003\u0002\u0002\u0002",
  "\u0724\u0725\u0003\u0002\u0002\u0002\u0725\u0726\u0003\u0002\u0002\u0002",
  "\u0726\u0727\u0007\u0083\u0002\u0002\u0727\u0127\u0003\u0002\u0002\u0002",
  "\u0728\u072b\u0005\u0098M\u0002\u0729\u072b\u0007\u0087\u0002\u0002",
  "\u072a\u0728\u0003\u0002\u0002\u0002\u072a\u0729\u0003\u0002\u0002\u0002",
  "\u072b\u0129\u0003\u0002\u0002\u0002\u072c\u072d\u0007\u0086\u0002\u0002",
  "\u072d\u072e\u0005\u00dco\u0002\u072e\u012b\u0003\u0002\u0002\u0002",
  "\u072f\u0733\u0007~\u0002\u0002\u0730\u0732\u0005\u012e\u0098\u0002",
  "\u0731\u0730\u0003\u0002\u0002\u0002\u0732\u0735\u0003\u0002\u0002\u0002",
  "\u0733\u0731\u0003\u0002\u0002\u0002\u0733\u0734\u0003\u0002\u0002\u0002",
  "\u0734\u0736\u0003\u0002\u0002\u0002\u0735\u0733\u0003\u0002\u0002\u0002",
  "\u0736\u0737\u0007\u007f\u0002\u0002\u0737\u012d\u0003\u0002\u0002\u0002",
  "\u0738\u073a\u0005\u014e\u00a8\u0002\u0739\u0738\u0003\u0002\u0002\u0002",
  "\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u073c\u0003\u0002\u0002\u0002",
  "\u073b\u073d\u0005\u00f0y\u0002\u073c\u073b\u0003\u0002\u0002\u0002",
  "\u073c\u073d\u0003\u0002\u0002\u0002\u073d\u0748\u0003\u0002\u0002\u0002",
  "\u073e\u0749\u0005\u00f4{\u0002\u073f\u0740\u0007/\u0002\u0002\u0740",
  "\u0742\u0005\u0006\u0004\u0002\u0741\u0743\u0005\u0162\u00b2\u0002\u0742",
  "\u0741\u0003\u0002\u0002\u0002\u0743\u0744\u0003\u0002\u0002\u0002\u0744",
  "\u0742\u0003\u0002\u0002\u0002\u0744\u0745\u0003\u0002\u0002\u0002\u0745",
  "\u0746\u0003\u0002\u0002\u0002\u0746\u0747\u0007\u0087\u0002\u0002\u0747",
  "\u0749\u0003\u0002\u0002\u0002\u0748\u073e\u0003\u0002\u0002\u0002\u0748",
  "\u073f\u0003\u0002\u0002\u0002\u0749\u012f\u0003\u0002\u0002\u0002\u074a",
  "\u0752\u0005\b\u0005\u0002\u074b\u074d\t\u000f\u0002\u0002\u074c\u074b",
  "\u0003\u0002\u0002\u0002\u074d\u0750\u0003\u0002\u0002\u0002\u074e\u074c",
  "\u0003\u0002\u0002\u0002\u074e\u074f\u0003\u0002\u0002\u0002\u074f\u0751",
  "\u0003\u0002\u0002\u0002\u0750\u074e\u0003\u0002\u0002\u0002\u0751\u0753",
  "\u0005\u0132\u009a\u0002\u0752\u074e\u0003\u0002\u0002\u0002\u0753\u0754",
  "\u0003\u0002\u0002\u0002\u0754\u0752\u0003\u0002\u0002\u0002\u0754\u0755",
  "\u0003\u0002\u0002\u0002\u0755\u0131\u0003\u0002\u0002\u0002\u0756\u075a",
  "\u0007\u0080\u0002\u0002\u0757\u0759\u0007\u0085\u0002\u0002\u0758\u0757",
  "\u0003\u0002\u0002\u0002\u0759\u075c\u0003\u0002\u0002\u0002\u075a\u0758",
  "\u0003\u0002\u0002\u0002\u075a\u075b\u0003\u0002\u0002\u0002\u075b\u075d",
  "\u0003\u0002\u0002\u0002\u075c\u075a\u0003\u0002\u0002\u0002\u075d\u075e",
  "\u0007\u0081\u0002\u0002\u075e\u0133\u0003\u0002\u0002\u0002\u075f\u076b",
  "\u0007~\u0002\u0002\u0760\u0765\u0005\u0100\u0081\u0002\u0761\u0762",
  "\u0007\u0085\u0002\u0002\u0762\u0764\u0005\u0100\u0081\u0002\u0763\u0761",
  "\u0003\u0002\u0002\u0002\u0764\u0767\u0003\u0002\u0002\u0002\u0765\u0763",
  "\u0003\u0002\u0002\u0002\u0765\u0766\u0003\u0002\u0002\u0002\u0766\u0769",
  "\u0003\u0002\u0002\u0002\u0767\u0765\u0003\u0002\u0002\u0002\u0768\u076a",
  "\u0007\u0085\u0002\u0002\u0769\u0768\u0003\u0002\u0002\u0002\u0769\u076a",
  "\u0003\u0002\u0002\u0002\u076a\u076c\u0003\u0002\u0002\u0002\u076b\u0760",
  "\u0003\u0002\u0002\u0002\u076b\u076c\u0003\u0002\u0002\u0002\u076c\u076d",
  "\u0003\u0002\u0002\u0002\u076d\u076e\u0007\u007f\u0002\u0002\u076e\u0135",
  "\u0003\u0002\u0002\u0002\u076f\u0770\u0007\u0093\u0002\u0002\u0770\u0775",
  "\u0005\u0138\u009d\u0002\u0771\u0772\u0007\u0085\u0002\u0002\u0772\u0774",
  "\u0005\u0138\u009d\u0002\u0773\u0771\u0003\u0002\u0002\u0002\u0774\u0777",
  "\u0003\u0002\u0002\u0002\u0775\u0773\u0003\u0002\u0002\u0002\u0775\u0776",
  "\u0003\u0002\u0002\u0002\u0776\u0778\u0003\u0002\u0002\u0002\u0777\u0775",
  "\u0003\u0002\u0002\u0002\u0778\u0779\u0007\u0094\u0002\u0002\u0779\u0137",
  "\u0003\u0002\u0002\u0002\u077a\u077c\u0005\u014e\u00a8\u0002\u077b\u077a",
  "\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002\u0002\u0002\u077c\u077e",
  "\u0003\u0002\u0002\u0002\u077d\u077f\u0005\u013a\u009e\u0002\u077e\u077d",
  "\u0003\u0002\u0002\u0002\u077e\u077f\u0003\u0002\u0002\u0002\u077f\u0780",
  "\u0003\u0002\u0002\u0002\u0780\u0781\u0005\u01a2\u00d2\u0002\u0781\u0139",
  "\u0003\u0002\u0002\u0002\u0782\u0783\t\u0010\u0002\u0002\u0783\u013b",
  "\u0003\u0002\u0002\u0002\u0784\u0785\u0007\u0086\u0002\u0002\u0785\u0786",
  "\u0005\u00dco\u0002\u0786\u013d\u0003\u0002\u0002\u0002\u0787\u078b",
  "\u0007~\u0002\u0002\u0788\u078a\u0005\u0140\u00a1\u0002\u0789\u0788",
  "\u0003\u0002\u0002\u0002\u078a\u078d\u0003\u0002\u0002\u0002\u078b\u0789",
  "\u0003\u0002\u0002\u0002\u078b\u078c\u0003\u0002\u0002\u0002\u078c\u078e",
  "\u0003\u0002\u0002\u0002\u078d\u078b\u0003\u0002\u0002\u0002\u078e\u078f",
  "\u0007\u007f\u0002\u0002\u078f\u013f\u0003\u0002\u0002\u0002\u0790\u0792",
  "\u0005\u014e\u00a8\u0002\u0791\u0790\u0003\u0002\u0002\u0002\u0791\u0792",
  "\u0003\u0002\u0002\u0002\u0792\u0794\u0003\u0002\u0002\u0002\u0793\u0795",
  "\u0007E\u0002\u0002\u0794\u0793\u0003\u0002\u0002\u0002\u0794\u0795",
  "\u0003\u0002\u0002\u0002\u0795\u07ce\u0003\u0002\u0002\u0002\u0796\u0798",
  "\u0007i\u0002\u0002\u0797\u0796\u0003\u0002\u0002\u0002\u0797\u0798",
  "\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002\u0002\u0799\u07b5",
  "\u0005\u0006\u0004\u0002\u079a\u079c\u0005\u01a2\u00d2\u0002\u079b\u079d",
  "\u0005\u00d6l\u0002\u079c\u079b\u0003\u0002\u0002\u0002\u079c\u079d",
  "\u0003\u0002\u0002\u0002\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u07a0",
  "\u0007\u0082\u0002\u0002\u079f\u07a1\u0005\u0108\u0085\u0002\u07a0\u079f",
  "\u0003\u0002\u0002\u0002\u07a0\u07a1\u0003\u0002\u0002\u0002\u07a1\u07a2",
  "\u0003\u0002\u0002\u0002\u07a2\u07a4\u0007\u0083\u0002\u0002\u07a3\u07a5",
  "\u0005\u00dep\u0002\u07a4\u07a3\u0003\u0002\u0002\u0002\u07a4\u07a5",
  "\u0003\u0002\u0002\u0002\u07a5\u07a6\u0003\u0002\u0002\u0002\u07a6\u07a7",
  "\u0007\u0087\u0002\u0002\u07a7\u07b6\u0003\u0002\u0002\u0002\u07a8\u07a9",
  "\u0005\u01a2\u00d2\u0002\u07a9\u07aa\u0007~\u0002\u0002\u07aa\u07ab",
  "\u0005\u0142\u00a2\u0002\u07ab\u07ac\u0007\u007f\u0002\u0002\u07ac\u07b6",
  "\u0003\u0002\u0002\u0002\u07ad\u07ae\u0007a\u0002\u0002\u07ae\u07af",
  "\u0007\u0080\u0002\u0002\u07af\u07b0\u0005\u0108\u0085\u0002\u07b0\u07b1",
  "\u0007\u0081\u0002\u0002\u07b1\u07b2\u0007~\u0002\u0002\u07b2\u07b3",
  "\u0005\u0142\u00a2\u0002\u07b3\u07b4\u0007\u007f\u0002\u0002\u07b4\u07b6",
  "\u0003\u0002\u0002\u0002\u07b5\u079a\u0003\u0002\u0002\u0002\u07b5\u07a8",
  "\u0003\u0002\u0002\u0002\u07b5\u07ad\u0003\u0002\u0002\u0002\u07b6\u07cf",
  "\u0003\u0002\u0002\u0002\u07b7\u07b9\u0007i\u0002\u0002\u07b8\u07b7",
  "\u0003\u0002\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002\u0002\u07b9\u07ba",
  "\u0003\u0002\u0002\u0002\u07ba\u07bb\u0007n\u0002\u0002\u07bb\u07bd",
  "\u0005\u01a2\u00d2\u0002\u07bc\u07be\u0005\u00d6l\u0002\u07bd\u07bc",
  "\u0003\u0002\u0002\u0002\u07bd\u07be\u0003\u0002\u0002\u0002\u07be\u07bf",
  "\u0003\u0002\u0002\u0002\u07bf\u07c1\u0007\u0082\u0002\u0002\u07c0\u07c2",
  "\u0005\u0108\u0085\u0002\u07c1\u07c0\u0003\u0002\u0002\u0002\u07c1\u07c2",
  "\u0003\u0002\u0002\u0002\u07c2\u07c3\u0003\u0002\u0002\u0002\u07c3\u07c5",
  "\u0007\u0083\u0002\u0002\u07c4\u07c6\u0005\u00dep\u0002\u07c5\u07c4",
  "\u0003\u0002\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07c7",
  "\u0003\u0002\u0002\u0002\u07c7\u07c8\u0007\u0087\u0002\u0002\u07c8\u07cf",
  "\u0003\u0002\u0002\u0002\u07c9\u07ca\u0007*\u0002\u0002\u07ca\u07cb",
  "\u0005\u0006\u0004\u0002\u07cb\u07cc\u0005\u01a2\u00d2\u0002\u07cc\u07cd",
  "\u0007\u0087\u0002\u0002\u07cd\u07cf\u0003\u0002\u0002\u0002\u07ce\u0797",
  "\u0003\u0002\u0002\u0002\u07ce\u07b8\u0003\u0002\u0002\u0002\u07ce\u07c9",
  "\u0003\u0002\u0002\u0002\u07cf\u0141\u0003\u0002\u0002\u0002\u07d0\u07d2",
  "\u0005\u014e\u00a8\u0002\u07d1\u07d0\u0003\u0002\u0002\u0002\u07d1\u07d2",
  "\u0003\u0002\u0002\u0002\u07d2\u07e5\u0003\u0002\u0002\u0002\u07d3\u07d4",
  "\u00074\u0002\u0002\u07d4\u07da\u0007\u0087\u0002\u0002\u07d5\u07d7",
  "\u0005\u014e\u00a8\u0002\u07d6\u07d5\u0003\u0002\u0002\u0002\u07d6\u07d7",
  "\u0003\u0002\u0002\u0002\u07d7\u07d8\u0003\u0002\u0002\u0002\u07d8\u07d9",
  "\u0007Y\u0002\u0002\u07d9\u07db\u0007\u0087\u0002\u0002\u07da\u07d6",
  "\u0003\u0002\u0002\u0002\u07da\u07db\u0003\u0002\u0002\u0002\u07db\u07e6",
  "\u0003\u0002\u0002\u0002\u07dc\u07dd\u0007Y\u0002\u0002\u07dd\u07e3",
  "\u0007\u0087\u0002\u0002\u07de\u07e0\u0005\u014e\u00a8\u0002\u07df\u07de",
  "\u0003\u0002\u0002\u0002\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0\u07e1",
  "\u0003\u0002\u0002\u0002\u07e1\u07e2\u00074\u0002\u0002\u07e2\u07e4",
  "\u0007\u0087\u0002\u0002\u07e3\u07df\u0003\u0002\u0002\u0002\u07e3\u07e4",
  "\u0003\u0002\u0002\u0002\u07e4\u07e6\u0003\u0002\u0002\u0002\u07e5\u07d3",
  "\u0003\u0002\u0002\u0002\u07e5\u07dc\u0003\u0002\u0002\u0002\u07e6\u0143",
  "\u0003\u0002\u0002\u0002\u07e7\u07e8\u0007\u0086\u0002\u0002\u07e8\u07e9",
  "\u0005\u0006\u0004\u0002\u07e9\u0145\u0003\u0002\u0002\u0002\u07ea\u07f6",
  "\u0007~\u0002\u0002\u07eb\u07f0\u0005\u0148\u00a5\u0002\u07ec\u07ed",
  "\u0007\u0085\u0002\u0002\u07ed\u07ef\u0005\u0148\u00a5\u0002\u07ee\u07ec",
  "\u0003\u0002\u0002\u0002\u07ef\u07f2\u0003\u0002\u0002\u0002\u07f0\u07ee",
  "\u0003\u0002\u0002\u0002\u07f0\u07f1\u0003\u0002\u0002\u0002\u07f1\u07f4",
  "\u0003\u0002\u0002\u0002\u07f2\u07f0\u0003\u0002\u0002\u0002\u07f3\u07f5",
  "\u0007\u0085\u0002\u0002\u07f4\u07f3\u0003\u0002\u0002\u0002\u07f4\u07f5",
  "\u0003\u0002\u0002\u0002\u07f5\u07f7\u0003\u0002\u0002\u0002\u07f6\u07eb",
  "\u0003\u0002\u0002\u0002\u07f6\u07f7\u0003\u0002\u0002\u0002\u07f7\u07f8",
  "\u0003\u0002\u0002\u0002\u07f8\u07f9\u0007\u007f\u0002\u0002\u07f9\u0147",
  "\u0003\u0002\u0002\u0002\u07fa\u07fc\u0005\u014e\u00a8\u0002\u07fb\u07fa",
  "\u0003\u0002\u0002\u0002\u07fb\u07fc\u0003\u0002\u0002\u0002\u07fc\u07fd",
  "\u0003\u0002\u0002\u0002\u07fd\u0800\u0005\u01a2\u00d2\u0002\u07fe\u07ff",
  "\u0007\u0092\u0002\u0002\u07ff\u0801\u0005 \u0011\u0002\u0800\u07fe",
  "\u0003\u0002\u0002\u0002\u0800\u0801\u0003\u0002\u0002\u0002\u0801\u0149",
  "\u0003\u0002\u0002\u0002\u0802\u0803\u0007\u0080\u0002\u0002\u0803\u0804",
  "\u0005\u014c\u00a7\u0002\u0804\u0805\u0007\u0086\u0002\u0002\u0805\u0807",
  "\u0005\u0154\u00ab\u0002\u0806\u0808\u0007\u0085\u0002\u0002\u0807\u0806",
  "\u0003\u0002\u0002\u0002\u0807\u0808\u0003\u0002\u0002\u0002\u0808\u0809",
  "\u0003\u0002\u0002\u0002\u0809\u080a\u0007\u0081\u0002\u0002\u080a\u014b",
  "\u0003\u0002\u0002\u0002\u080b\u080e\u0005\u017c\u00bf\u0002\u080c\u080e",
  "\u0005\u01a2\u00d2\u0002\u080d\u080b\u0003\u0002\u0002\u0002\u080d\u080c",
  "\u0003\u0002\u0002\u0002\u080e\u014d\u0003\u0002\u0002\u0002\u080f\u0811",
  "\u0005\u0150\u00a9\u0002\u0810\u080f\u0003\u0002\u0002\u0002\u0811\u0812",
  "\u0003\u0002\u0002\u0002\u0812\u0810\u0003\u0002\u0002\u0002\u0812\u0813",
  "\u0003\u0002\u0002\u0002\u0813\u014f\u0003\u0002\u0002\u0002\u0814\u0818",
  "\u0007\u0080\u0002\u0002\u0815\u0816\u0005\u0152\u00aa\u0002\u0816\u0817",
  "\u0007\u0086\u0002\u0002\u0817\u0819\u0003\u0002\u0002\u0002\u0818\u0815",
  "\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002\u0819\u081a",
  "\u0003\u0002\u0002\u0002\u081a\u081c\u0005\u0154\u00ab\u0002\u081b\u081d",
  "\u0007\u0085\u0002\u0002\u081c\u081b\u0003\u0002\u0002\u0002\u081c\u081d",
  "\u0003\u0002\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u081f",
  "\u0007\u0081\u0002\u0002\u081f\u0151\u0003\u0002\u0002\u0002\u0820\u0823",
  "\u0005\u017c\u00bf\u0002\u0821\u0823\u0005\u01a2\u00d2\u0002\u0822\u0820",
  "\u0003\u0002\u0002\u0002\u0822\u0821\u0003\u0002\u0002\u0002\u0823\u0153",
  "\u0003\u0002\u0002\u0002\u0824\u0829\u0005\u0156\u00ac\u0002\u0825\u0826",
  "\u0007\u0085\u0002\u0002\u0826\u0828\u0005\u0156\u00ac\u0002\u0827\u0825",
  "\u0003\u0002\u0002\u0002\u0828\u082b\u0003\u0002\u0002\u0002\u0829\u0827",
  "\u0003\u0002\u0002\u0002\u0829\u082a\u0003\u0002\u0002\u0002\u082a\u0155",
  "\u0003\u0002\u0002\u0002\u082b\u0829\u0003\u0002\u0002\u0002\u082c\u0839",
  "\u0005\u0004\u0003\u0002\u082d\u0836\u0007\u0082\u0002\u0002\u082e\u0833",
  "\u0005\u0158\u00ad\u0002\u082f\u0830\u0007\u0085\u0002\u0002\u0830\u0832",
  "\u0005\u0158\u00ad\u0002\u0831\u082f\u0003\u0002\u0002\u0002\u0832\u0835",
  "\u0003\u0002\u0002\u0002\u0833\u0831\u0003\u0002\u0002\u0002\u0833\u0834",
  "\u0003\u0002\u0002\u0002\u0834\u0837\u0003\u0002\u0002\u0002\u0835\u0833",
  "\u0003\u0002\u0002\u0002\u0836\u082e\u0003\u0002\u0002\u0002\u0836\u0837",
  "\u0003\u0002\u0002\u0002\u0837\u0838\u0003\u0002\u0002\u0002\u0838\u083a",
  "\u0007\u0083\u0002\u0002\u0839\u082d\u0003\u0002\u0002\u0002\u0839\u083a",
  "\u0003\u0002\u0002\u0002\u083a\u0157\u0003\u0002\u0002\u0002\u083b\u083c",
  "\u0005\u01a2\u00d2\u0002\u083c\u083d\u0007\u0086\u0002\u0002\u083d\u083f",
  "\u0003\u0002\u0002\u0002\u083e\u083b\u0003\u0002\u0002\u0002\u083e\u083f",
  "\u0003\u0002\u0002\u0002\u083f\u0840\u0003\u0002\u0002\u0002\u0840\u0841",
  "\u0005 \u0011\u0002\u0841\u0159\u0003\u0002\u0002\u0002\u0842\u0845",
  "\u0005\n\u0006\u0002\u0843\u0845\u0005\u0016\f\u0002\u0844\u0842\u0003",
  "\u0002\u0002\u0002\u0844\u0843\u0003\u0002\u0002\u0002\u0845\u084a\u0003",
  "\u0002\u0002\u0002\u0846\u0849\u0005\u0132\u009a\u0002\u0847\u0849\u0007",
  "\u0095\u0002\u0002\u0848\u0846\u0003\u0002\u0002\u0002\u0848\u0847\u0003",
  "\u0002\u0002\u0002\u0849\u084c\u0003\u0002\u0002\u0002\u084a\u0848\u0003",
  "\u0002\u0002\u0002\u084a\u084b\u0003\u0002\u0002\u0002\u084b\u084d\u0003",
  "\u0002\u0002\u0002\u084c\u084a\u0003\u0002\u0002\u0002\u084d\u084e\u0007",
  "\u008a\u0002\u0002\u084e\u0852\u0003\u0002\u0002\u0002\u084f\u0850\u0007",
  "n\u0002\u0002\u0850\u0852\u0007\u008a\u0002\u0002\u0851\u0844\u0003",
  "\u0002\u0002\u0002\u0851\u084f\u0003\u0002\u0002\u0002\u0852\u015b\u0003",
  "\u0002\u0002\u0002\u0853\u0858\u0005\u015e\u00b0\u0002\u0854\u0855\u0007",
  "\u0085\u0002\u0002\u0855\u0857\u0005\u015e\u00b0\u0002\u0856\u0854\u0003",
  "\u0002\u0002\u0002\u0857\u085a\u0003\u0002\u0002\u0002\u0858\u0856\u0003",
  "\u0002\u0002\u0002\u0858\u0859\u0003\u0002\u0002\u0002\u0859\u015d\u0003",
  "\u0002\u0002\u0002\u085a\u0858\u0003\u0002\u0002\u0002\u085b\u085c\u0005",
  "\u01a2\u00d2\u0002\u085c\u085d\u0007\u0092\u0002\u0002\u085d\u085e\u0005",
  "\u0160\u00b1\u0002\u085e\u015f\u0003\u0002\u0002\u0002\u085f\u0861\u0007",
  "\u008d\u0002\u0002\u0860\u085f\u0003\u0002\u0002\u0002\u0860\u0861\u0003",
  "\u0002\u0002\u0002\u0861\u0862\u0003\u0002\u0002\u0002\u0862\u0865\u0005",
  " \u0011\u0002\u0863\u0865\u0005\u0164\u00b3\u0002\u0864\u0860\u0003",
  "\u0002\u0002\u0002\u0864\u0863\u0003\u0002\u0002\u0002\u0865\u0161\u0003",
  "\u0002\u0002\u0002\u0866\u0867\u0005\u01a2\u00d2\u0002\u0867\u0868\u0007",
  "\u0080\u0002\u0002\u0868\u0869\u0005 \u0011\u0002\u0869\u086a\u0007",
  "\u0081\u0002\u0002\u086a\u0163\u0003\u0002\u0002\u0002\u086b\u086c\u0007",
  "\\\u0002\u0002\u086c\u086d\u0005\u0006\u0004\u0002\u086d\u086e\u0007",
  "\u0080\u0002\u0002\u086e\u086f\u0005 \u0011\u0002\u086f\u0870\u0007",
  "\u0081\u0002\u0002\u0870\u0165\u0003\u0002\u0002\u0002\u0871\u0872\u0007",
  "\u0092\u0002\u0002\u0872\u0873\u0007\u0094\u0002\u0002\u0873\u0874\u0006",
  "\u00b4\u0002\u0003\u0874\u0167\u0003\u0002\u0002\u0002\u0875\u0876\u0007",
  "\u0094\u0002\u0002\u0876\u0877\u0007\u0094\u0002\u0002\u0877\u0878\u0006",
  "\u00b5\u0003\u0003\u0878\u0169\u0003\u0002\u0002\u0002\u0879\u087a\u0007",
  "\u0094\u0002\u0002\u087a\u087b\u0007\u00a0\u0002\u0002\u087b\u087c\u0006",
  "\u00b6\u0004\u0003\u087c\u016b\u0003\u0002\u0002\u0002\u087d\u0885\u0005",
  "\u016e\u00b8\u0002\u087e\u0885\u0005\u0170\u00b9\u0002\u087f\u0885\u0007",
  "v\u0002\u0002\u0880\u0885\u0007w\u0002\u0002\u0881\u0885\u0007x\u0002",
  "\u0002\u0882\u0885\u0007y\u0002\u0002\u0883\u0885\u0007F\u0002\u0002",
  "\u0884\u087d\u0003\u0002\u0002\u0002\u0884\u087e\u0003\u0002\u0002\u0002",
  "\u0884\u087f\u0003\u0002\u0002\u0002\u0884\u0880\u0003\u0002\u0002\u0002",
  "\u0884\u0881\u0003\u0002\u0002\u0002\u0884\u0882\u0003\u0002\u0002\u0002",
  "\u0884\u0883\u0003\u0002\u0002\u0002\u0885\u016d\u0003\u0002\u0002\u0002",
  "\u0886\u0887\t\u0011\u0002\u0002\u0887\u016f\u0003\u0002\u0002\u0002",
  "\u0888\u088d\u0005\u0172\u00ba\u0002\u0889\u088d\u0005\u0174\u00bb\u0002",
  "\u088a\u088d\u0007z\u0002\u0002\u088b\u088d\u0007{\u0002\u0002\u088c",
  "\u0888\u0003\u0002\u0002\u0002\u088c\u0889\u0003\u0002\u0002\u0002\u088c",
  "\u088a\u0003\u0002\u0002\u0002\u088c\u088b\u0003\u0002\u0002\u0002\u088d",
  "\u0171\u0003\u0002\u0002\u0002\u088e\u0892\u0007|\u0002\u0002\u088f",
  "\u0891\u0005\u0176\u00bc\u0002\u0890\u088f\u0003\u0002\u0002\u0002\u0891",
  "\u0894\u0003\u0002\u0002\u0002\u0892\u0890\u0003\u0002\u0002\u0002\u0892",
  "\u0893\u0003\u0002\u0002\u0002\u0893\u0895\u0003\u0002\u0002\u0002\u0894",
  "\u0892\u0003\u0002\u0002\u0002\u0895\u0896\u0007\u00af\u0002\u0002\u0896",
  "\u0173\u0003\u0002\u0002\u0002\u0897\u089b\u0007}\u0002\u0002\u0898",
  "\u089a\u0005\u0178\u00bd\u0002\u0899\u0898\u0003\u0002\u0002\u0002\u089a",
  "\u089d\u0003\u0002\u0002\u0002\u089b\u0899\u0003\u0002\u0002\u0002\u089b",
  "\u089c\u0003\u0002\u0002\u0002\u089c\u089e\u0003\u0002\u0002\u0002\u089d",
  "\u089b\u0003\u0002\u0002\u0002\u089e\u089f\u0007\u00af\u0002\u0002\u089f",
  "\u0175\u0003\u0002\u0002\u0002\u08a0\u08a5\u0005\u017a\u00be\u0002\u08a1",
  "\u08a5\u0007\u00ab\u0002\u0002\u08a2\u08a5\u0007\u00ad\u0002\u0002\u08a3",
  "\u08a5\u0007\u00b0\u0002\u0002\u08a4\u08a0\u0003\u0002\u0002\u0002\u08a4",
  "\u08a1\u0003\u0002\u0002\u0002\u08a4\u08a2\u0003\u0002\u0002\u0002\u08a4",
  "\u08a3\u0003\u0002\u0002\u0002\u08a5\u0177\u0003\u0002\u0002\u0002\u08a6",
  "\u08ab\u0005\u017a\u00be\u0002\u08a7\u08ab\u0007\u00ab\u0002\u0002\u08a8",
  "\u08ab\u0007\u00ae\u0002\u0002\u08a9\u08ab\u0007\u00b1\u0002\u0002\u08aa",
  "\u08a6\u0003\u0002\u0002\u0002\u08aa\u08a7\u0003\u0002\u0002\u0002\u08aa",
  "\u08a8\u0003\u0002\u0002\u0002\u08aa\u08a9\u0003\u0002\u0002\u0002\u08ab",
  "\u0179\u0003\u0002\u0002\u0002\u08ac\u08b1\u0005 \u0011\u0002\u08ad",
  "\u08ae\u0007\u0085\u0002\u0002\u08ae\u08b0\u0005 \u0011\u0002\u08af",
  "\u08ad\u0003\u0002\u0002\u0002\u08b0\u08b3\u0003\u0002\u0002\u0002\u08b1",
  "\u08af\u0003\u0002\u0002\u0002\u08b1\u08b2\u0003\u0002\u0002\u0002\u08b2",
  "\u08ba\u0003\u0002\u0002\u0002\u08b3\u08b1\u0003\u0002\u0002\u0002\u08b4",
  "\u08b6\u0007\u0086\u0002\u0002\u08b5\u08b7\u0007\u00b3\u0002\u0002\u08b6",
  "\u08b5\u0003\u0002\u0002\u0002\u08b7\u08b8\u0003\u0002\u0002\u0002\u08b8",
  "\u08b6\u0003\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9",
  "\u08bb\u0003\u0002\u0002\u0002\u08ba\u08b4\u0003\u0002\u0002\u0002\u08ba",
  "\u08bb\u0003\u0002\u0002\u0002\u08bb\u017b\u0003\u0002\u0002\u0002\u08bc",
  "\u08bd\t\u0012\u0002\u0002\u08bd\u017d\u0003\u0002\u0002\u0002\u08be",
  "\u08bf\u0007\u001d\u0002\u0002\u08bf\u08c1\u0005\u01a2\u00d2\u0002\u08c0",
  "\u08c2\u0005\u00d6l\u0002\u08c1\u08c0\u0003\u0002\u0002\u0002\u08c1",
  "\u08c2\u0003\u0002\u0002\u0002\u08c2\u08c4\u0003\u0002\u0002\u0002\u08c3",
  "\u08c5\u0005\u00dan\u0002\u08c4\u08c3\u0003\u0002\u0002\u0002\u08c4",
  "\u08c5\u0003\u0002\u0002\u0002\u08c5\u08c7\u0003\u0002\u0002\u0002\u08c6",
  "\u08c8\u0005\u00dep\u0002\u08c7\u08c6\u0003\u0002\u0002\u0002\u08c7",
  "\u08c8\u0003\u0002\u0002\u0002\u08c8\u08c9\u0003\u0002\u0002\u0002\u08c9",
  "\u08cb\u0005\u00eav\u0002\u08ca\u08cc\u0007\u0087\u0002\u0002\u08cb",
  "\u08ca\u0003\u0002\u0002\u0002\u08cb\u08cc\u0003\u0002\u0002\u0002\u08cc",
  "\u017f\u0003\u0002\u0002\u0002\u08cd\u08ce\u0007_\u0002\u0002\u08ce",
  "\u08d0\u0005\u01a2\u00d2\u0002\u08cf\u08d1\u0005\u00d6l\u0002\u08d0",
  "\u08cf\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002\u08d1",
  "\u08d3\u0003\u0002\u0002\u0002\u08d2\u08d4\u0005\u012a\u0096\u0002\u08d3",
  "\u08d2\u0003\u0002\u0002\u0002\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4",
  "\u08d6\u0003\u0002\u0002\u0002\u08d5\u08d7\u0005\u00dep\u0002\u08d6",
  "\u08d5\u0003\u0002\u0002\u0002\u08d6\u08d7\u0003\u0002\u0002\u0002\u08d7",
  "\u08d8\u0003\u0002\u0002\u0002\u08d8\u08da\u0005\u012c\u0097\u0002\u08d9",
  "\u08db\u0007\u0087\u0002\u0002\u08da\u08d9\u0003\u0002\u0002\u0002\u08da",
  "\u08db\u0003\u0002\u0002\u0002\u08db\u0181\u0003\u0002\u0002\u0002\u08dc",
  "\u08dd\u0007;\u0002\u0002\u08dd\u08df\u0005\u01a2\u00d2\u0002\u08de",
  "\u08e0\u0005\u0136\u009c\u0002\u08df\u08de\u0003\u0002\u0002\u0002\u08df",
  "\u08e0\u0003\u0002\u0002\u0002\u08e0\u08e2\u0003\u0002\u0002\u0002\u08e1",
  "\u08e3\u0005\u013c\u009f\u0002\u08e2\u08e1\u0003\u0002\u0002\u0002\u08e2",
  "\u08e3\u0003\u0002\u0002\u0002\u08e3\u08e5\u0003\u0002\u0002\u0002\u08e4",
  "\u08e6\u0005\u00dep\u0002\u08e5\u08e4\u0003\u0002\u0002\u0002\u08e5",
  "\u08e6\u0003\u0002\u0002\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002\u08e7",
  "\u08e9\u0005\u013e\u00a0\u0002\u08e8\u08ea\u0007\u0087\u0002\u0002\u08e9",
  "\u08e8\u0003\u0002\u0002\u0002\u08e9\u08ea\u0003\u0002\u0002\u0002\u08ea",
  "\u0183\u0003\u0002\u0002\u0002\u08eb\u08ec\u0007(\u0002\u0002\u08ec",
  "\u08ee\u0005\u01a2\u00d2\u0002\u08ed\u08ef\u0005\u0144\u00a3\u0002\u08ee",
  "\u08ed\u0003\u0002\u0002\u0002\u08ee\u08ef\u0003\u0002\u0002\u0002\u08ef",
  "\u08f0\u0003\u0002\u0002\u0002\u08f0\u08f2\u0005\u0146\u00a4\u0002\u08f1",
  "\u08f3\u0007\u0087\u0002\u0002\u08f2\u08f1\u0003\u0002\u0002\u0002\u08f2",
  "\u08f3\u0003\u0002\u0002\u0002\u08f3\u0185\u0003\u0002\u0002\u0002\u08f4",
  '\u08f5\u0007"\u0002\u0002\u08f5\u08f6\u0005\u0102\u0082\u0002\u08f6',
  "\u08f8\u0005\u01a2\u00d2\u0002\u08f7\u08f9\u0005\u0136\u009c\u0002\u08f8",
  "\u08f7\u0003\u0002\u0002\u0002\u08f8\u08f9\u0003\u0002\u0002\u0002\u08f9",
  "\u08fa\u0003\u0002\u0002\u0002\u08fa\u08fc\u0007\u0082\u0002\u0002\u08fb",
  "\u08fd\u0005\u0108\u0085\u0002\u08fc\u08fb\u0003\u0002\u0002\u0002\u08fc",
  "\u08fd\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002\u08fe",
  "\u0900\u0007\u0083\u0002\u0002\u08ff\u0901\u0005\u00dep\u0002\u0900",
  "\u08ff\u0003\u0002\u0002\u0002\u0900\u0901\u0003\u0002\u0002\u0002\u0901",
  "\u0902\u0003\u0002\u0002\u0002\u0902\u0903\u0007\u0087\u0002\u0002\u0903",
  "\u0187\u0003\u0002\u0002\u0002\u0904\u0905\u0007*\u0002\u0002\u0905",
  "\u090e\u0005\u0006\u0004\u0002\u0906\u0907\u0005\u00fc\u007f\u0002\u0907",
  "\u0908\u0007\u0087\u0002\u0002\u0908\u090f\u0003\u0002\u0002\u0002\u0909",
  "\u090a\u0005\u0104\u0083\u0002\u090a\u090b\u0007~\u0002\u0002\u090b",
  "\u090c\u0005\u011c\u008f\u0002\u090c\u090d\u0007\u007f\u0002\u0002\u090d",
  "\u090f\u0003\u0002\u0002\u0002\u090e\u0906\u0003\u0002\u0002\u0002\u090e",
  "\u0909\u0003\u0002\u0002\u0002\u090f\u0189\u0003\u0002\u0002\u0002\u0910",
  "\u0911\u0005\u00fc\u007f\u0002\u0911\u0912\u0007\u0087\u0002\u0002\u0912",
  "\u018b\u0003\u0002\u0002\u0002\u0913\u0921\u0005\u0104\u0083\u0002\u0914",
  "\u0915\u0007~\u0002\u0002\u0915\u0916\u0005\u0112\u008a\u0002\u0916",
  "\u091b\u0007\u007f\u0002\u0002\u0917\u0918\u0007\u0092\u0002\u0002\u0918",
  "\u0919\u0005\u0100\u0081\u0002\u0919\u091a\u0007\u0087\u0002\u0002\u091a",
  "\u091c\u0003\u0002\u0002\u0002\u091b\u0917\u0003\u0002\u0002\u0002\u091b",
  "\u091c\u0003\u0002\u0002\u0002\u091c\u0922\u0003\u0002\u0002\u0002\u091d",
  "\u091e\u0005\u0166\u00b4\u0002\u091e\u091f\u0005 \u0011\u0002\u091f",
  "\u0920\u0007\u0087\u0002\u0002\u0920\u0922\u0003\u0002\u0002\u0002\u0921",
  "\u0914\u0003\u0002\u0002\u0002\u0921\u091d\u0003\u0002\u0002\u0002\u0922",
  "\u018d\u0003\u0002\u0002\u0002\u0923\u0924\u0007\u001e\u0002\u0002\u0924",
  "\u0925\u0005\u0006\u0004\u0002\u0925\u0926\u0005\u00f8}\u0002\u0926",
  "\u0927\u0007\u0087\u0002\u0002\u0927\u018f\u0003\u0002\u0002\u0002\u0928",
  "\u0929\u0007a\u0002\u0002\u0929\u092a\u0007\u0080\u0002\u0002\u092a",
  "\u092b\u0005\u0108\u0085\u0002\u092b\u0934\u0007\u0081\u0002\u0002\u092c",
  "\u092d\u0007~\u0002\u0002\u092d\u092e\u0005\u0112\u008a\u0002\u092e",
  "\u092f\u0007\u007f\u0002\u0002\u092f\u0935\u0003\u0002\u0002\u0002\u0930",
  "\u0931\u0005\u0166\u00b4\u0002\u0931\u0932\u0005 \u0011\u0002\u0932",
  "\u0933\u0007\u0087\u0002\u0002\u0933\u0935\u0003\u0002\u0002\u0002\u0934",
  "\u092c\u0003\u0002\u0002\u0002\u0934\u0930\u0003\u0002\u0002\u0002\u0935",
  "\u0191\u0003\u0002\u0002\u0002\u0936\u0937\u0007\u0091\u0002\u0002\u0937",
  "\u0938\u0005\u01a2\u00d2\u0002\u0938\u0939\u0007\u0082\u0002\u0002\u0939",
  "\u093a\u0007\u0083\u0002\u0002\u093a\u093b\u0005\u0128\u0095\u0002\u093b",
  "\u0193\u0003\u0002\u0002\u0002\u093c\u093d\u0005\u01a2\u00d2\u0002\u093d",
  "\u093f\u0007\u0082\u0002\u0002\u093e\u0940\u0005\u0108\u0085\u0002\u093f",
  "\u093e\u0003\u0002\u0002\u0002\u093f\u0940\u0003\u0002\u0002\u0002\u0940",
  "\u0941\u0003\u0002\u0002\u0002\u0941\u0943\u0007\u0083\u0002\u0002\u0942",
  "\u0944\u0005\u0126\u0094\u0002\u0943\u0942\u0003\u0002\u0002\u0002\u0943",
  "\u0944\u0003\u0002\u0002\u0002\u0944\u0945\u0003\u0002\u0002\u0002\u0945",
  "\u0946\u0005\u0128\u0095\u0002\u0946\u0195\u0003\u0002\u0002\u0002\u0947",
  "\u0949\u0005\u0198\u00cd\u0002\u0948\u094a\u0005\u00d6l\u0002\u0949",
  "\u0948\u0003\u0002\u0002\u0002\u0949\u094a\u0003\u0002\u0002\u0002\u094a",
  "\u094b\u0003\u0002\u0002\u0002\u094b\u094d\u0007\u0082\u0002\u0002\u094c",
  "\u094e\u0005\u0108\u0085\u0002\u094d\u094c\u0003\u0002\u0002\u0002\u094d",
  "\u094e\u0003\u0002\u0002\u0002\u094e\u094f\u0003\u0002\u0002\u0002\u094f",
  "\u0951\u0007\u0083\u0002\u0002\u0950\u0952\u0005\u00dep\u0002\u0951",
  "\u0950\u0003\u0002\u0002\u0002\u0951\u0952\u0003\u0002\u0002\u0002\u0952",
  "\u0958\u0003\u0002\u0002\u0002\u0953\u0959\u0005\u0106\u0084\u0002\u0954",
  "\u0955\u0005\u0166\u00b4\u0002\u0955\u0956\u0005 \u0011\u0002\u0956",
  "\u0957\u0007\u0087\u0002\u0002\u0957\u0959\u0003\u0002\u0002\u0002\u0958",
  "\u0953\u0003\u0002\u0002\u0002\u0958\u0954\u0003\u0002\u0002\u0002\u0959",
  "\u0197\u0003\u0002\u0002\u0002\u095a\u0960\u0005\u01a2\u00d2\u0002\u095b",
  "\u095c\u0005\u01a2\u00d2\u0002\u095c\u095d\u0007\u0096\u0002\u0002\u095d",
  "\u095e\u0005\u01a2\u00d2\u0002\u095e\u0960\u0003\u0002\u0002\u0002\u095f",
  "\u095a\u0003\u0002\u0002\u0002\u095f\u095b\u0003\u0002\u0002\u0002\u0960",
  "\u0968\u0003\u0002\u0002\u0002\u0961\u0963\u0005\u0018\r\u0002\u0962",
  "\u0961\u0003\u0002\u0002\u0002\u0962\u0963\u0003\u0002\u0002\u0002\u0963",
  "\u0964\u0003\u0002\u0002\u0002\u0964\u0965\u0007\u0084\u0002\u0002\u0965",
  "\u0967\u0005\u01a2\u00d2\u0002\u0966\u0962\u0003\u0002\u0002\u0002\u0967",
  "\u096a\u0003\u0002\u0002\u0002\u0968\u0966\u0003\u0002\u0002\u0002\u0968",
  "\u0969\u0003\u0002\u0002\u0002\u0969\u0199\u0003\u0002\u0002\u0002\u096a",
  "\u0968\u0003\u0002\u0002\u0002\u096b\u096c\u0007I\u0002\u0002\u096c",
  "\u096d\u0005\u0122\u0092\u0002\u096d\u096e\u0007\u0082\u0002\u0002\u096e",
  "\u0971\u0005\u019c\u00cf\u0002\u096f\u0970\u0007\u0085\u0002\u0002\u0970",
  "\u0972\u0005\u019c\u00cf\u0002\u0971\u096f\u0003\u0002\u0002\u0002\u0971",
  "\u0972\u0003\u0002\u0002\u0002\u0972\u0973\u0003\u0002\u0002\u0002\u0973",
  "\u0979\u0007\u0083\u0002\u0002\u0974\u097a\u0005\u0128\u0095\u0002\u0975",
  "\u0976\u0005\u0166\u00b4\u0002\u0976\u0977\u0005 \u0011\u0002\u0977",
  "\u0978\u0007\u0087\u0002\u0002\u0978\u097a\u0003\u0002\u0002\u0002\u0979",
  "\u0974\u0003\u0002\u0002\u0002\u0979\u0975\u0003\u0002\u0002\u0002\u097a",
  "\u019b\u0003\u0002\u0002\u0002\u097b\u097c\u0005\u0006\u0004\u0002\u097c",
  "\u097f\u0005\u01a2\u00d2\u0002\u097d\u097e\u0007\u0092\u0002\u0002\u097e",
  "\u0980\u0005 \u0011\u0002\u097f\u097d\u0003\u0002\u0002\u0002\u097f",
  "\u0980\u0003\u0002\u0002\u0002\u0980\u019d\u0003\u0002\u0002\u0002\u0981",
  "\u0983\u0007\u0082\u0002\u0002\u0982\u0984\u0005\u001a\u000e\u0002\u0983",
  "\u0982\u0003\u0002\u0002\u0002\u0983\u0984\u0003\u0002\u0002\u0002\u0984",
  "\u0985\u0003\u0002\u0002\u0002\u0985\u0986\u0007\u0083\u0002\u0002\u0986",
  "\u019f\u0003\u0002\u0002\u0002\u0987\u0989\u0007\u0082\u0002\u0002\u0988",
  "\u098a\u0005\u001a\u000e\u0002\u0989\u0988\u0003\u0002\u0002\u0002\u0989",
  "\u098a\u0003\u0002\u0002\u0002\u098a\u098b\u0003\u0002\u0002\u0002\u098b",
  "\u098d\u0007\u0083\u0002\u0002\u098c\u098e\u0005P)\u0002\u098d\u098c",
  "\u0003\u0002\u0002\u0002\u098d\u098e\u0003\u0002\u0002\u0002\u098e\u01a1",
  "\u0003\u0002\u0002\u0002\u098f\u0990\t\u0013\u0002\u0002\u0990\u01a3",
  "\u0003\u0002\u0002\u0002\u0136\u01a5\u01a8\u01ab\u01b0\u01b4\u01ba\u01bd",
  "\u01c2\u01c6\u01cd\u01cf\u01d7\u01db\u01e0\u01ec\u01f3\u01f9\u0201\u020b",
  "\u0211\u0214\u021b\u021e\u0222\u0227\u0238\u0240\u0245\u024c\u0254\u025c",
  "\u0264\u026c\u0274\u027e\u0280\u0286\u028b\u0293\u029b\u02b6\u02bc\u02c0",
  "\u02c9\u02ce\u02d3\u02e5\u02eb\u02f7\u02fb\u0300\u0304\u030a\u0311\u0323",
  "\u0326\u032b\u032e\u033d\u0343\u0347\u034a\u0352\u035a\u0365\u036a\u036f",
  "\u0371\u037a\u0382\u0389\u0391\u0395\u039f\u03a7\u03b0\u03b5\u03b7\u03c0",
  "\u03c8\u03cc\u03d1\u03d3\u03d8\u03dc\u03e3\u03eb\u03ed\u03f1\u03f4\u03f7",
  "\u0408\u040f\u0413\u041d\u0422\u0429\u0432\u0437\u043e\u044a\u0455\u045d",
  "\u0462\u046b\u0474\u0479\u0481\u048e\u0498\u04ae\u04b2\u04b6\u04cc\u04d1",
  "\u04d6\u04dd\u04e0\u04f6\u0502\u0506\u0510\u0515\u051a\u0523\u0528\u052d",
  "\u0535\u053a\u0540\u0544\u054a\u0552\u055a\u055d\u0564\u056b\u056f\u0572",
  "\u0578\u057c\u0582\u0590\u0596\u059d\u05a2\u05a5\u05a8\u05af\u05b9\u05ca",
  "\u05cf\u05d3\u05d6\u05d9\u05e0\u05e6\u05ee\u05f4\u05fe\u0606\u060c\u0617",
  "\u061b\u061d\u0622\u0629\u0632\u0639\u063c\u063f\u0643\u0648\u0655\u065f",
  "\u066b\u0672\u067e\u0684\u0688\u068c\u0692\u0698\u069a\u06a1\u06a5\u06a8",
  "\u06ac\u06b1\u06b8\u06bb\u06c0\u06c5\u06c7\u06ca\u06cd\u06d3\u06d6\u06e2",
  "\u06e6\u06e9\u06f3\u06f6\u06fc\u0717\u0724\u072a\u0733\u0739\u073c\u0744",
  "\u0748\u074e\u0754\u075a\u0765\u0769\u076b\u0775\u077b\u077e\u078b\u0791",
  "\u0794\u0797\u079c\u07a0\u07a4\u07b5\u07b8\u07bd\u07c1\u07c5\u07ce\u07d1",
  "\u07d6\u07da\u07df\u07e3\u07e5\u07f0\u07f4\u07f6\u07fb\u0800\u0807\u080d",
  "\u0812\u0818\u081c\u0822\u0829\u0833\u0836\u0839\u083e\u0844\u0848\u084a",
  "\u0851\u0858\u0860\u0864\u0884\u088c\u0892\u089b\u08a4\u08aa\u08b1\u08b8",
  "\u08ba\u08c1\u08c4\u08c7\u08cb\u08d0\u08d3\u08d6\u08da\u08df\u08e2\u08e5",
  "\u08e9\u08ee\u08f2\u08f8\u08fc\u0900\u090e\u091b\u0921\u0934\u093f\u0943",
  "\u0949\u094d\u0951\u0958\u095f\u0962\u0968\u0971\u0979\u097f\u0983\u0989",
  "\u098d"
].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function(ds, index) {
  return new antlr4.dfa.DFA(ds, index);
});

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [
  null,
  "'\u00EF\u00BB\u00BF'",
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  "'#'",
  "'abstract'",
  "'add'",
  "'alias'",
  "'__arglist'",
  "'as'",
  "'ascending'",
  "'async'",
  "'await'",
  "'base'",
  "'bool'",
  "'break'",
  "'by'",
  "'byte'",
  "'case'",
  "'catch'",
  "'char'",
  "'checked'",
  "'class'",
  "'const'",
  "'continue'",
  "'decimal'",
  "'default'",
  "'delegate'",
  "'descending'",
  "'do'",
  "'double'",
  "'dynamic'",
  "'else'",
  "'enum'",
  "'equals'",
  "'event'",
  "'explicit'",
  "'extern'",
  "'false'",
  "'finally'",
  "'fixed'",
  "'float'",
  "'for'",
  "'foreach'",
  "'from'",
  "'get'",
  "'goto'",
  "'group'",
  "'if'",
  "'implicit'",
  "'in'",
  "'int'",
  "'interface'",
  "'internal'",
  "'into'",
  "'is'",
  "'join'",
  "'let'",
  "'lock'",
  "'long'",
  "'nameof'",
  "'namespace'",
  "'new'",
  "'null'",
  "'object'",
  "'on'",
  "'operator'",
  "'orderby'",
  "'out'",
  "'override'",
  "'params'",
  "'partial'",
  "'private'",
  "'protected'",
  "'public'",
  "'readonly'",
  "'ref'",
  "'remove'",
  "'return'",
  "'sbyte'",
  "'sealed'",
  "'select'",
  "'set'",
  "'short'",
  "'sizeof'",
  "'stackalloc'",
  "'static'",
  "'string'",
  "'struct'",
  "'switch'",
  "'this'",
  "'throw'",
  "'true'",
  "'try'",
  "'typeof'",
  "'uint'",
  "'ulong'",
  "'unchecked'",
  "'unsafe'",
  "'ushort'",
  "'using'",
  "'var'",
  "'virtual'",
  "'void'",
  "'volatile'",
  "'when'",
  "'where'",
  "'while'",
  "'yield'",
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  "'{'",
  "'}'",
  "'['",
  "']'",
  "'('",
  "')'",
  "'.'",
  "','",
  "':'",
  "';'",
  "'+'",
  "'-'",
  "'*'",
  "'/'",
  "'%'",
  "'&'",
  "'|'",
  "'^'",
  "'!'",
  "'~'",
  "'='",
  "'<'",
  "'>'",
  "'?'",
  "'::'",
  "'??'",
  "'++'",
  "'--'",
  "'&&'",
  "'||'",
  "'->'",
  "'=='",
  "'!='",
  "'<='",
  "'>='",
  "'+='",
  "'-='",
  "'*='",
  "'/='",
  "'%='",
  "'&='",
  "'|='",
  "'^='",
  "'<<'",
  "'<<='",
  "'{{'",
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  "'define'",
  "'undef'",
  "'elif'",
  "'endif'",
  "'line'",
  null,
  null,
  null,
  null,
  null,
  "'hidden'",
  null,
  null,
  null,
  "'}}'"
];

var symbolicNames = [
  null,
  "BYTE_ORDER_MARK",
  "SINGLE_LINE_DOC_COMMENT",
  "DELIMITED_DOC_COMMENT",
  "SINGLE_LINE_COMMENT",
  "DELIMITED_COMMENT",
  "SINGLE_LINE_DIRECTIVE",
  "ELSEIF_DIRECTIVE",
  "WHITESPACES",
  "SHARP",
  "ABSTRACT",
  "ADD",
  "ALIAS",
  "ARGLIST",
  "AS",
  "ASCENDING",
  "ASYNC",
  "AWAIT",
  "BASE",
  "BOOL",
  "BREAK",
  "BY",
  "BYTE",
  "CASE",
  "CATCH",
  "CHAR",
  "CHECKED",
  "CLASS",
  "CONST",
  "CONTINUE",
  "DECIMAL",
  "DEFAULT",
  "DELEGATE",
  "DESCENDING",
  "DO",
  "DOUBLE",
  "DYNAMIC",
  "ELSE",
  "ENUM",
  "EQUALS",
  "EVENT",
  "EXPLICIT",
  "EXTERN",
  "FALSE",
  "FINALLY",
  "FIXED",
  "FLOAT",
  "FOR",
  "FOREACH",
  "FROM",
  "GET",
  "GOTO",
  "GROUP",
  "IF",
  "IMPLICIT",
  "IN",
  "INT",
  "INTERFACE",
  "INTERNAL",
  "INTO",
  "IS",
  "JOIN",
  "LET",
  "LOCK",
  "LONG",
  "NAMEOF",
  "NAMESPACE",
  "NEW",
  "NULL",
  "OBJECT",
  "ON",
  "OPERATOR",
  "ORDERBY",
  "OUT",
  "OVERRIDE",
  "PARAMS",
  "PARTIAL",
  "PRIVATE",
  "PROTECTED",
  "PUBLIC",
  "READONLY",
  "REF",
  "REMOVE",
  "RETURN",
  "SBYTE",
  "SEALED",
  "SELECT",
  "SET",
  "SHORT",
  "SIZEOF",
  "STACKALLOC",
  "STATIC",
  "STRING",
  "STRUCT",
  "SWITCH",
  "THIS",
  "THROW",
  "TRUE",
  "TRY",
  "TYPEOF",
  "UINT",
  "ULONG",
  "UNCHECKED",
  "UNSAFE",
  "USHORT",
  "USING",
  "VAR",
  "VIRTUAL",
  "VOID",
  "VOLATILE",
  "WHEN",
  "WHERE",
  "WHILE",
  "YIELD",
  "IDENTIFIER",
  "LITERAL_ACCESS",
  "INTEGER_LITERAL",
  "HEX_INTEGER_LITERAL",
  "REAL_LITERAL",
  "CHARACTER_LITERAL",
  "REGULAR_STRING",
  "VERBATIUM_STRING",
  "INTERPOLATED_REGULAR_STRING_START",
  "INTERPOLATED_VERBATIUM_STRING_START",
  "OPEN_BRACE",
  "CLOSE_BRACE",
  "OPEN_BRACKET",
  "CLOSE_BRACKET",
  "OPEN_PARENS",
  "CLOSE_PARENS",
  "DOT",
  "COMMA",
  "COLON",
  "SEMICOLON",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "PERCENT",
  "AMP",
  "BITWISE_OR",
  "CARET",
  "BANG",
  "TILDE",
  "ASSIGNMENT",
  "LT",
  "GT",
  "INTERR",
  "DOUBLE_COLON",
  "OP_COALESCING",
  "OP_INC",
  "OP_DEC",
  "OP_AND",
  "OP_OR",
  "OP_PTR",
  "OP_EQ",
  "OP_NE",
  "OP_LE",
  "OP_GE",
  "OP_ADD_ASSIGNMENT",
  "OP_SUB_ASSIGNMENT",
  "OP_MULT_ASSIGNMENT",
  "OP_DIV_ASSIGNMENT",
  "OP_MOD_ASSIGNMENT",
  "OP_AND_ASSIGNMENT",
  "OP_OR_ASSIGNMENT",
  "OP_XOR_ASSIGNMENT",
  "OP_LEFT_SHIFT",
  "OP_LEFT_SHIFT_ASSIGNMENT",
  "DOUBLE_CURLY_INSIDE",
  "OPEN_BRACE_INSIDE",
  "REGULAR_CHAR_INSIDE",
  "VERBATIUM_DOUBLE_QUOTE_INSIDE",
  "DOUBLE_QUOTE_INSIDE",
  "REGULAR_STRING_INSIDE",
  "VERBATIUM_INSIDE_STRING",
  "CLOSE_BRACE_INSIDE",
  "FORMAT_STRING",
  "DIRECTIVE_WHITESPACES",
  "DIGITS",
  "DEFINE",
  "UNDEF",
  "ELIF",
  "ENDIF",
  "LINE",
  "ERROR",
  "WARNING",
  "REGION",
  "ENDREGION",
  "PRAGMA",
  "DIRECTIVE_HIDDEN",
  "CONDITIONAL_SYMBOL",
  "DIRECTIVE_NEW_LINE",
  "TEXT",
  "DOUBLE_CURLY_CLOSE_INSIDE"
];

var ruleNames = [
  "compilation_unit",
  "namespace_or_type_name",
  "type",
  "base_type",
  "simple_type",
  "numeric_type",
  "integral_type",
  "floating_point_type",
  "tuple_type",
  "tuple_element_type",
  "class_type",
  "type_argument_list",
  "argument_list",
  "argument",
  "typed_argument",
  "expression",
  "non_assignment_expression",
  "assignment",
  "assignment_operator",
  "conditional_expression",
  "null_coalescing_expression",
  "conditional_or_expression",
  "conditional_and_expression",
  "inclusive_or_expression",
  "exclusive_or_expression",
  "and_expression",
  "equality_expression",
  "relational_expression",
  "shift_expression",
  "additive_expression",
  "multiplicative_expression",
  "unary_expression",
  "primary_expression",
  "primary_expression_start",
  "simple_name",
  "bracket_expression",
  "indexer_argument",
  "predefined_type",
  "expression_list",
  "object_or_collection_initializer",
  "object_initializer",
  "member_initializer_list",
  "member_initializer",
  "initializer_value",
  "collection_initializer",
  "tuple_initializer",
  "tuple_element_initializer",
  "element_initializer",
  "anonymous_object_initializer",
  "member_declarator_list",
  "member_declarator",
  "unbound_type_name",
  "generic_dimension_specifier",
  "isType",
  "lambda_expression",
  "anonymous_function_signature",
  "explicit_anonymous_function_parameter_list",
  "explicit_anonymous_function_parameter",
  "implicit_anonymous_function_parameter_list",
  "anonymous_function_body",
  "query_expression",
  "from_clause",
  "query_body",
  "query_body_clause",
  "let_clause",
  "where_clause",
  "combined_join_clause",
  "orderby_clause",
  "ordering",
  "select_or_group_clause",
  "query_continuation",
  "statement",
  "labeled_statement",
  "embedded_statement",
  "simple_embedded_statement",
  "block",
  "local_variable_declaration",
  "local_variable_type",
  "local_variable_declarator",
  "local_variable_identifier",
  "local_variable_initializer",
  "local_constant_declaration",
  "if_body",
  "switch_section",
  "switch_label",
  "switch_filter",
  "statement_list",
  "for_initializer",
  "for_iterator",
  "catch_clauses",
  "specific_catch_clause",
  "general_catch_clause",
  "exception_filter",
  "finally_clause",
  "resource_acquisition",
  "namespace_declaration",
  "qualified_identifier",
  "namespace_body",
  "extern_alias_directives",
  "extern_alias_directive",
  "using_directives",
  "using_directive",
  "namespace_member_declarations",
  "namespace_member_declaration",
  "type_declaration",
  "qualified_alias_member",
  "type_parameter_list",
  "type_parameter",
  "class_base",
  "interface_type_list",
  "type_parameter_constraints_clauses",
  "type_parameter_constraints_clause",
  "type_parameter_constraints",
  "primary_constraint",
  "secondary_constraints",
  "constructor_constraint",
  "class_body",
  "class_member_declarations",
  "class_member_declaration",
  "all_member_modifiers",
  "all_member_modifier",
  "common_member_declaration",
  "typed_member_declaration",
  "constant_declarators",
  "constant_declarator",
  "variable_declarators",
  "variable_declarator",
  "variable_initializer",
  "return_type",
  "member_name",
  "method_body",
  "formal_parameter_list",
  "fixed_parameters",
  "fixed_parameter",
  "parameter_modifier",
  "parameter_array",
  "accessor_declarations",
  "get_accessor_declaration",
  "set_accessor_declaration",
  "accessor_modifier",
  "accessor_body",
  "event_accessor_declarations",
  "add_accessor_declaration",
  "remove_accessor_declaration",
  "overloadable_operator",
  "conversion_operator_declarator",
  "constructor_initializer",
  "body",
  "struct_interfaces",
  "struct_body",
  "struct_member_declaration",
  "array_type",
  "rank_specifier",
  "array_initializer",
  "variant_type_parameter_list",
  "variant_type_parameter",
  "variance_annotation",
  "interface_base",
  "interface_body",
  "interface_member_declaration",
  "interface_accessors",
  "enum_base",
  "enum_body",
  "enum_member_declaration",
  "global_attribute_section",
  "global_attribute_target",
  "attributes",
  "attribute_section",
  "attribute_target",
  "attribute_list",
  "attribute",
  "attribute_argument",
  "pointer_type",
  "fixed_pointer_declarators",
  "fixed_pointer_declarator",
  "fixed_pointer_initializer",
  "fixed_size_buffer_declarator",
  "local_variable_initializer_unsafe",
  "right_arrow",
  "right_shift",
  "right_shift_assignment",
  "literal",
  "boolean_literal",
  "string_literal",
  "interpolated_regular_string",
  "interpolated_verbatium_string",
  "interpolated_regular_string_part",
  "interpolated_verbatium_string_part",
  "interpolated_string_expression",
  "keyword",
  "class_definition",
  "struct_definition",
  "interface_definition",
  "enum_definition",
  "delegate_definition",
  "event_declaration",
  "field_declaration",
  "property_declaration",
  "constant_declaration",
  "indexer_declaration",
  "destructor_definition",
  "constructor_declaration",
  "method_declaration",
  "method_member_name",
  "operator_declaration",
  "arg_declaration",
  "method_invocation",
  "object_creation_expression",
  "identifier"
];

function CSharpParser(input) {
  antlr4.Parser.call(this, input);
  this._interp = new antlr4.atn.ParserATNSimulator(
    this,
    atn,
    decisionsToDFA,
    sharedContextCache
  );
  this.ruleNames = ruleNames;
  this.literalNames = literalNames;
  this.symbolicNames = symbolicNames;
  return this;
}

CSharpParser.prototype = Object.create(antlr4.Parser.prototype);
CSharpParser.prototype.constructor = CSharpParser;

Object.defineProperty(CSharpParser.prototype, "atn", {
  get: function() {
    return atn;
  }
});

CSharpParser.EOF = antlr4.Token.EOF;
CSharpParser.BYTE_ORDER_MARK = 1;
CSharpParser.SINGLE_LINE_DOC_COMMENT = 2;
CSharpParser.DELIMITED_DOC_COMMENT = 3;
CSharpParser.SINGLE_LINE_COMMENT = 4;
CSharpParser.DELIMITED_COMMENT = 5;
CSharpParser.SINGLE_LINE_DIRECTIVE = 6;
CSharpParser.ELSEIF_DIRECTIVE = 7;
CSharpParser.WHITESPACES = 8;
CSharpParser.SHARP = 9;
CSharpParser.ABSTRACT = 10;
CSharpParser.ADD = 11;
CSharpParser.ALIAS = 12;
CSharpParser.ARGLIST = 13;
CSharpParser.AS = 14;
CSharpParser.ASCENDING = 15;
CSharpParser.ASYNC = 16;
CSharpParser.AWAIT = 17;
CSharpParser.BASE = 18;
CSharpParser.BOOL = 19;
CSharpParser.BREAK = 20;
CSharpParser.BY = 21;
CSharpParser.BYTE = 22;
CSharpParser.CASE = 23;
CSharpParser.CATCH = 24;
CSharpParser.CHAR = 25;
CSharpParser.CHECKED = 26;
CSharpParser.CLASS = 27;
CSharpParser.CONST = 28;
CSharpParser.CONTINUE = 29;
CSharpParser.DECIMAL = 30;
CSharpParser.DEFAULT = 31;
CSharpParser.DELEGATE = 32;
CSharpParser.DESCENDING = 33;
CSharpParser.DO = 34;
CSharpParser.DOUBLE = 35;
CSharpParser.DYNAMIC = 36;
CSharpParser.ELSE = 37;
CSharpParser.ENUM = 38;
CSharpParser.EQUALS = 39;
CSharpParser.EVENT = 40;
CSharpParser.EXPLICIT = 41;
CSharpParser.EXTERN = 42;
CSharpParser.FALSE = 43;
CSharpParser.FINALLY = 44;
CSharpParser.FIXED = 45;
CSharpParser.FLOAT = 46;
CSharpParser.FOR = 47;
CSharpParser.FOREACH = 48;
CSharpParser.FROM = 49;
CSharpParser.GET = 50;
CSharpParser.GOTO = 51;
CSharpParser.GROUP = 52;
CSharpParser.IF = 53;
CSharpParser.IMPLICIT = 54;
CSharpParser.IN = 55;
CSharpParser.INT = 56;
CSharpParser.INTERFACE = 57;
CSharpParser.INTERNAL = 58;
CSharpParser.INTO = 59;
CSharpParser.IS = 60;
CSharpParser.JOIN = 61;
CSharpParser.LET = 62;
CSharpParser.LOCK = 63;
CSharpParser.LONG = 64;
CSharpParser.NAMEOF = 65;
CSharpParser.NAMESPACE = 66;
CSharpParser.NEW = 67;
CSharpParser.NULL = 68;
CSharpParser.OBJECT = 69;
CSharpParser.ON = 70;
CSharpParser.OPERATOR = 71;
CSharpParser.ORDERBY = 72;
CSharpParser.OUT = 73;
CSharpParser.OVERRIDE = 74;
CSharpParser.PARAMS = 75;
CSharpParser.PARTIAL = 76;
CSharpParser.PRIVATE = 77;
CSharpParser.PROTECTED = 78;
CSharpParser.PUBLIC = 79;
CSharpParser.READONLY = 80;
CSharpParser.REF = 81;
CSharpParser.REMOVE = 82;
CSharpParser.RETURN = 83;
CSharpParser.SBYTE = 84;
CSharpParser.SEALED = 85;
CSharpParser.SELECT = 86;
CSharpParser.SET = 87;
CSharpParser.SHORT = 88;
CSharpParser.SIZEOF = 89;
CSharpParser.STACKALLOC = 90;
CSharpParser.STATIC = 91;
CSharpParser.STRING = 92;
CSharpParser.STRUCT = 93;
CSharpParser.SWITCH = 94;
CSharpParser.THIS = 95;
CSharpParser.THROW = 96;
CSharpParser.TRUE = 97;
CSharpParser.TRY = 98;
CSharpParser.TYPEOF = 99;
CSharpParser.UINT = 100;
CSharpParser.ULONG = 101;
CSharpParser.UNCHECKED = 102;
CSharpParser.UNSAFE = 103;
CSharpParser.USHORT = 104;
CSharpParser.USING = 105;
CSharpParser.VAR = 106;
CSharpParser.VIRTUAL = 107;
CSharpParser.VOID = 108;
CSharpParser.VOLATILE = 109;
CSharpParser.WHEN = 110;
CSharpParser.WHERE = 111;
CSharpParser.WHILE = 112;
CSharpParser.YIELD = 113;
CSharpParser.IDENTIFIER = 114;
CSharpParser.LITERAL_ACCESS = 115;
CSharpParser.INTEGER_LITERAL = 116;
CSharpParser.HEX_INTEGER_LITERAL = 117;
CSharpParser.REAL_LITERAL = 118;
CSharpParser.CHARACTER_LITERAL = 119;
CSharpParser.REGULAR_STRING = 120;
CSharpParser.VERBATIUM_STRING = 121;
CSharpParser.INTERPOLATED_REGULAR_STRING_START = 122;
CSharpParser.INTERPOLATED_VERBATIUM_STRING_START = 123;
CSharpParser.OPEN_BRACE = 124;
CSharpParser.CLOSE_BRACE = 125;
CSharpParser.OPEN_BRACKET = 126;
CSharpParser.CLOSE_BRACKET = 127;
CSharpParser.OPEN_PARENS = 128;
CSharpParser.CLOSE_PARENS = 129;
CSharpParser.DOT = 130;
CSharpParser.COMMA = 131;
CSharpParser.COLON = 132;
CSharpParser.SEMICOLON = 133;
CSharpParser.PLUS = 134;
CSharpParser.MINUS = 135;
CSharpParser.STAR = 136;
CSharpParser.DIV = 137;
CSharpParser.PERCENT = 138;
CSharpParser.AMP = 139;
CSharpParser.BITWISE_OR = 140;
CSharpParser.CARET = 141;
CSharpParser.BANG = 142;
CSharpParser.TILDE = 143;
CSharpParser.ASSIGNMENT = 144;
CSharpParser.LT = 145;
CSharpParser.GT = 146;
CSharpParser.INTERR = 147;
CSharpParser.DOUBLE_COLON = 148;
CSharpParser.OP_COALESCING = 149;
CSharpParser.OP_INC = 150;
CSharpParser.OP_DEC = 151;
CSharpParser.OP_AND = 152;
CSharpParser.OP_OR = 153;
CSharpParser.OP_PTR = 154;
CSharpParser.OP_EQ = 155;
CSharpParser.OP_NE = 156;
CSharpParser.OP_LE = 157;
CSharpParser.OP_GE = 158;
CSharpParser.OP_ADD_ASSIGNMENT = 159;
CSharpParser.OP_SUB_ASSIGNMENT = 160;
CSharpParser.OP_MULT_ASSIGNMENT = 161;
CSharpParser.OP_DIV_ASSIGNMENT = 162;
CSharpParser.OP_MOD_ASSIGNMENT = 163;
CSharpParser.OP_AND_ASSIGNMENT = 164;
CSharpParser.OP_OR_ASSIGNMENT = 165;
CSharpParser.OP_XOR_ASSIGNMENT = 166;
CSharpParser.OP_LEFT_SHIFT = 167;
CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT = 168;
CSharpParser.DOUBLE_CURLY_INSIDE = 169;
CSharpParser.OPEN_BRACE_INSIDE = 170;
CSharpParser.REGULAR_CHAR_INSIDE = 171;
CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE = 172;
CSharpParser.DOUBLE_QUOTE_INSIDE = 173;
CSharpParser.REGULAR_STRING_INSIDE = 174;
CSharpParser.VERBATIUM_INSIDE_STRING = 175;
CSharpParser.CLOSE_BRACE_INSIDE = 176;
CSharpParser.FORMAT_STRING = 177;
CSharpParser.DIRECTIVE_WHITESPACES = 178;
CSharpParser.DIGITS = 179;
CSharpParser.DEFINE = 180;
CSharpParser.UNDEF = 181;
CSharpParser.ELIF = 182;
CSharpParser.ENDIF = 183;
CSharpParser.LINE = 184;
CSharpParser.ERROR = 185;
CSharpParser.WARNING = 186;
CSharpParser.REGION = 187;
CSharpParser.ENDREGION = 188;
CSharpParser.PRAGMA = 189;
CSharpParser.DIRECTIVE_HIDDEN = 190;
CSharpParser.CONDITIONAL_SYMBOL = 191;
CSharpParser.DIRECTIVE_NEW_LINE = 192;
CSharpParser.TEXT = 193;
CSharpParser.DOUBLE_CURLY_CLOSE_INSIDE = 194;

CSharpParser.RULE_compilation_unit = 0;
CSharpParser.RULE_namespace_or_type_name = 1;
CSharpParser.RULE_type = 2;
CSharpParser.RULE_base_type = 3;
CSharpParser.RULE_simple_type = 4;
CSharpParser.RULE_numeric_type = 5;
CSharpParser.RULE_integral_type = 6;
CSharpParser.RULE_floating_point_type = 7;
CSharpParser.RULE_tuple_type = 8;
CSharpParser.RULE_tuple_element_type = 9;
CSharpParser.RULE_class_type = 10;
CSharpParser.RULE_type_argument_list = 11;
CSharpParser.RULE_argument_list = 12;
CSharpParser.RULE_argument = 13;
CSharpParser.RULE_typed_argument = 14;
CSharpParser.RULE_expression = 15;
CSharpParser.RULE_non_assignment_expression = 16;
CSharpParser.RULE_assignment = 17;
CSharpParser.RULE_assignment_operator = 18;
CSharpParser.RULE_conditional_expression = 19;
CSharpParser.RULE_null_coalescing_expression = 20;
CSharpParser.RULE_conditional_or_expression = 21;
CSharpParser.RULE_conditional_and_expression = 22;
CSharpParser.RULE_inclusive_or_expression = 23;
CSharpParser.RULE_exclusive_or_expression = 24;
CSharpParser.RULE_and_expression = 25;
CSharpParser.RULE_equality_expression = 26;
CSharpParser.RULE_relational_expression = 27;
CSharpParser.RULE_shift_expression = 28;
CSharpParser.RULE_additive_expression = 29;
CSharpParser.RULE_multiplicative_expression = 30;
CSharpParser.RULE_unary_expression = 31;
CSharpParser.RULE_primary_expression = 32;
CSharpParser.RULE_primary_expression_start = 33;
CSharpParser.RULE_simple_name = 34;
CSharpParser.RULE_bracket_expression = 35;
CSharpParser.RULE_indexer_argument = 36;
CSharpParser.RULE_predefined_type = 37;
CSharpParser.RULE_expression_list = 38;
CSharpParser.RULE_object_or_collection_initializer = 39;
CSharpParser.RULE_object_initializer = 40;
CSharpParser.RULE_member_initializer_list = 41;
CSharpParser.RULE_member_initializer = 42;
CSharpParser.RULE_initializer_value = 43;
CSharpParser.RULE_collection_initializer = 44;
CSharpParser.RULE_tuple_initializer = 45;
CSharpParser.RULE_tuple_element_initializer = 46;
CSharpParser.RULE_element_initializer = 47;
CSharpParser.RULE_anonymous_object_initializer = 48;
CSharpParser.RULE_member_declarator_list = 49;
CSharpParser.RULE_member_declarator = 50;
CSharpParser.RULE_unbound_type_name = 51;
CSharpParser.RULE_generic_dimension_specifier = 52;
CSharpParser.RULE_isType = 53;
CSharpParser.RULE_lambda_expression = 54;
CSharpParser.RULE_anonymous_function_signature = 55;
CSharpParser.RULE_explicit_anonymous_function_parameter_list = 56;
CSharpParser.RULE_explicit_anonymous_function_parameter = 57;
CSharpParser.RULE_implicit_anonymous_function_parameter_list = 58;
CSharpParser.RULE_anonymous_function_body = 59;
CSharpParser.RULE_query_expression = 60;
CSharpParser.RULE_from_clause = 61;
CSharpParser.RULE_query_body = 62;
CSharpParser.RULE_query_body_clause = 63;
CSharpParser.RULE_let_clause = 64;
CSharpParser.RULE_where_clause = 65;
CSharpParser.RULE_combined_join_clause = 66;
CSharpParser.RULE_orderby_clause = 67;
CSharpParser.RULE_ordering = 68;
CSharpParser.RULE_select_or_group_clause = 69;
CSharpParser.RULE_query_continuation = 70;
CSharpParser.RULE_statement = 71;
CSharpParser.RULE_labeled_statement = 72;
CSharpParser.RULE_embedded_statement = 73;
CSharpParser.RULE_simple_embedded_statement = 74;
CSharpParser.RULE_block = 75;
CSharpParser.RULE_local_variable_declaration = 76;
CSharpParser.RULE_local_variable_type = 77;
CSharpParser.RULE_local_variable_declarator = 78;
CSharpParser.RULE_local_variable_identifier = 79;
CSharpParser.RULE_local_variable_initializer = 80;
CSharpParser.RULE_local_constant_declaration = 81;
CSharpParser.RULE_if_body = 82;
CSharpParser.RULE_switch_section = 83;
CSharpParser.RULE_switch_label = 84;
CSharpParser.RULE_switch_filter = 85;
CSharpParser.RULE_statement_list = 86;
CSharpParser.RULE_for_initializer = 87;
CSharpParser.RULE_for_iterator = 88;
CSharpParser.RULE_catch_clauses = 89;
CSharpParser.RULE_specific_catch_clause = 90;
CSharpParser.RULE_general_catch_clause = 91;
CSharpParser.RULE_exception_filter = 92;
CSharpParser.RULE_finally_clause = 93;
CSharpParser.RULE_resource_acquisition = 94;
CSharpParser.RULE_namespace_declaration = 95;
CSharpParser.RULE_qualified_identifier = 96;
CSharpParser.RULE_namespace_body = 97;
CSharpParser.RULE_extern_alias_directives = 98;
CSharpParser.RULE_extern_alias_directive = 99;
CSharpParser.RULE_using_directives = 100;
CSharpParser.RULE_using_directive = 101;
CSharpParser.RULE_namespace_member_declarations = 102;
CSharpParser.RULE_namespace_member_declaration = 103;
CSharpParser.RULE_type_declaration = 104;
CSharpParser.RULE_qualified_alias_member = 105;
CSharpParser.RULE_type_parameter_list = 106;
CSharpParser.RULE_type_parameter = 107;
CSharpParser.RULE_class_base = 108;
CSharpParser.RULE_interface_type_list = 109;
CSharpParser.RULE_type_parameter_constraints_clauses = 110;
CSharpParser.RULE_type_parameter_constraints_clause = 111;
CSharpParser.RULE_type_parameter_constraints = 112;
CSharpParser.RULE_primary_constraint = 113;
CSharpParser.RULE_secondary_constraints = 114;
CSharpParser.RULE_constructor_constraint = 115;
CSharpParser.RULE_class_body = 116;
CSharpParser.RULE_class_member_declarations = 117;
CSharpParser.RULE_class_member_declaration = 118;
CSharpParser.RULE_all_member_modifiers = 119;
CSharpParser.RULE_all_member_modifier = 120;
CSharpParser.RULE_common_member_declaration = 121;
CSharpParser.RULE_typed_member_declaration = 122;
CSharpParser.RULE_constant_declarators = 123;
CSharpParser.RULE_constant_declarator = 124;
CSharpParser.RULE_variable_declarators = 125;
CSharpParser.RULE_variable_declarator = 126;
CSharpParser.RULE_variable_initializer = 127;
CSharpParser.RULE_return_type = 128;
CSharpParser.RULE_member_name = 129;
CSharpParser.RULE_method_body = 130;
CSharpParser.RULE_formal_parameter_list = 131;
CSharpParser.RULE_fixed_parameters = 132;
CSharpParser.RULE_fixed_parameter = 133;
CSharpParser.RULE_parameter_modifier = 134;
CSharpParser.RULE_parameter_array = 135;
CSharpParser.RULE_accessor_declarations = 136;
CSharpParser.RULE_get_accessor_declaration = 137;
CSharpParser.RULE_set_accessor_declaration = 138;
CSharpParser.RULE_accessor_modifier = 139;
CSharpParser.RULE_accessor_body = 140;
CSharpParser.RULE_event_accessor_declarations = 141;
CSharpParser.RULE_add_accessor_declaration = 142;
CSharpParser.RULE_remove_accessor_declaration = 143;
CSharpParser.RULE_overloadable_operator = 144;
CSharpParser.RULE_conversion_operator_declarator = 145;
CSharpParser.RULE_constructor_initializer = 146;
CSharpParser.RULE_body = 147;
CSharpParser.RULE_struct_interfaces = 148;
CSharpParser.RULE_struct_body = 149;
CSharpParser.RULE_struct_member_declaration = 150;
CSharpParser.RULE_array_type = 151;
CSharpParser.RULE_rank_specifier = 152;
CSharpParser.RULE_array_initializer = 153;
CSharpParser.RULE_variant_type_parameter_list = 154;
CSharpParser.RULE_variant_type_parameter = 155;
CSharpParser.RULE_variance_annotation = 156;
CSharpParser.RULE_interface_base = 157;
CSharpParser.RULE_interface_body = 158;
CSharpParser.RULE_interface_member_declaration = 159;
CSharpParser.RULE_interface_accessors = 160;
CSharpParser.RULE_enum_base = 161;
CSharpParser.RULE_enum_body = 162;
CSharpParser.RULE_enum_member_declaration = 163;
CSharpParser.RULE_global_attribute_section = 164;
CSharpParser.RULE_global_attribute_target = 165;
CSharpParser.RULE_attributes = 166;
CSharpParser.RULE_attribute_section = 167;
CSharpParser.RULE_attribute_target = 168;
CSharpParser.RULE_attribute_list = 169;
CSharpParser.RULE_attribute = 170;
CSharpParser.RULE_attribute_argument = 171;
CSharpParser.RULE_pointer_type = 172;
CSharpParser.RULE_fixed_pointer_declarators = 173;
CSharpParser.RULE_fixed_pointer_declarator = 174;
CSharpParser.RULE_fixed_pointer_initializer = 175;
CSharpParser.RULE_fixed_size_buffer_declarator = 176;
CSharpParser.RULE_local_variable_initializer_unsafe = 177;
CSharpParser.RULE_right_arrow = 178;
CSharpParser.RULE_right_shift = 179;
CSharpParser.RULE_right_shift_assignment = 180;
CSharpParser.RULE_literal = 181;
CSharpParser.RULE_boolean_literal = 182;
CSharpParser.RULE_string_literal = 183;
CSharpParser.RULE_interpolated_regular_string = 184;
CSharpParser.RULE_interpolated_verbatium_string = 185;
CSharpParser.RULE_interpolated_regular_string_part = 186;
CSharpParser.RULE_interpolated_verbatium_string_part = 187;
CSharpParser.RULE_interpolated_string_expression = 188;
CSharpParser.RULE_keyword = 189;
CSharpParser.RULE_class_definition = 190;
CSharpParser.RULE_struct_definition = 191;
CSharpParser.RULE_interface_definition = 192;
CSharpParser.RULE_enum_definition = 193;
CSharpParser.RULE_delegate_definition = 194;
CSharpParser.RULE_event_declaration = 195;
CSharpParser.RULE_field_declaration = 196;
CSharpParser.RULE_property_declaration = 197;
CSharpParser.RULE_constant_declaration = 198;
CSharpParser.RULE_indexer_declaration = 199;
CSharpParser.RULE_destructor_definition = 200;
CSharpParser.RULE_constructor_declaration = 201;
CSharpParser.RULE_method_declaration = 202;
CSharpParser.RULE_method_member_name = 203;
CSharpParser.RULE_operator_declaration = 204;
CSharpParser.RULE_arg_declaration = 205;
CSharpParser.RULE_method_invocation = 206;
CSharpParser.RULE_object_creation_expression = 207;
CSharpParser.RULE_identifier = 208;

function Compilation_unitContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_compilation_unit;
  return this;
}

Compilation_unitContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Compilation_unitContext.prototype.constructor = Compilation_unitContext;

Compilation_unitContext.prototype.EOF = function() {
  return this.getToken(CSharpParser.EOF, 0);
};

Compilation_unitContext.prototype.BYTE_ORDER_MARK = function() {
  return this.getToken(CSharpParser.BYTE_ORDER_MARK, 0);
};

Compilation_unitContext.prototype.extern_alias_directives = function() {
  return this.getTypedRuleContext(Extern_alias_directivesContext, 0);
};

Compilation_unitContext.prototype.using_directives = function() {
  return this.getTypedRuleContext(Using_directivesContext, 0);
};

Compilation_unitContext.prototype.global_attribute_section = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Global_attribute_sectionContext);
  } else {
    return this.getTypedRuleContext(Global_attribute_sectionContext, i);
  }
};

Compilation_unitContext.prototype.namespace_member_declarations = function() {
  return this.getTypedRuleContext(Namespace_member_declarationsContext, 0);
};

Compilation_unitContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCompilation_unit(this);
  }
};

Compilation_unitContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCompilation_unit(this);
  }
};

CSharpParser.Compilation_unitContext = Compilation_unitContext;

CSharpParser.prototype.compilation_unit = function() {
  var localctx = new Compilation_unitContext(this, this._ctx, this.state);
  this.enterRule(localctx, 0, CSharpParser.RULE_compilation_unit);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 419;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.BYTE_ORDER_MARK) {
      this.state = 418;
      this.match(CSharpParser.BYTE_ORDER_MARK);
    }

    this.state = 422;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
    if (la_ === 1) {
      this.state = 421;
      this.extern_alias_directives();
    }
    this.state = 425;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.USING) {
      this.state = 424;
      this.using_directives();
    }

    this.state = 430;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 427;
        this.global_attribute_section();
      }
      this.state = 432;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
    }

    this.state = 434;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ABSTRACT) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.CLASS))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.ENUM - 32)) |
            (1 << (CSharpParser.EXTERN - 32)) |
            (1 << (CSharpParser.INTERFACE - 32)) |
            (1 << (CSharpParser.INTERNAL - 32)))) !==
          0) ||
      (((_la - 66) & ~0x1f) == 0 &&
        ((1 << (_la - 66)) &
          ((1 << (CSharpParser.NAMESPACE - 66)) |
            (1 << (CSharpParser.NEW - 66)) |
            (1 << (CSharpParser.OVERRIDE - 66)) |
            (1 << (CSharpParser.PARTIAL - 66)) |
            (1 << (CSharpParser.PRIVATE - 66)) |
            (1 << (CSharpParser.PROTECTED - 66)) |
            (1 << (CSharpParser.PUBLIC - 66)) |
            (1 << (CSharpParser.READONLY - 66)) |
            (1 << (CSharpParser.SEALED - 66)) |
            (1 << (CSharpParser.STATIC - 66)) |
            (1 << (CSharpParser.STRUCT - 66)))) !==
          0) ||
      (((_la - 103) & ~0x1f) == 0 &&
        ((1 << (_la - 103)) &
          ((1 << (CSharpParser.UNSAFE - 103)) |
            (1 << (CSharpParser.VIRTUAL - 103)) |
            (1 << (CSharpParser.VOLATILE - 103)) |
            (1 << (CSharpParser.OPEN_BRACKET - 103)))) !==
          0)
    ) {
      this.state = 433;
      this.namespace_member_declarations();
    }

    this.state = 436;
    this.match(CSharpParser.EOF);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Namespace_or_type_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_namespace_or_type_name;
  return this;
}

Namespace_or_type_nameContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Namespace_or_type_nameContext.prototype.constructor = Namespace_or_type_nameContext;

Namespace_or_type_nameContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Namespace_or_type_nameContext.prototype.qualified_alias_member = function() {
  return this.getTypedRuleContext(Qualified_alias_memberContext, 0);
};

Namespace_or_type_nameContext.prototype.type_argument_list = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Type_argument_listContext);
  } else {
    return this.getTypedRuleContext(Type_argument_listContext, i);
  }
};

Namespace_or_type_nameContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNamespace_or_type_name(this);
  }
};

Namespace_or_type_nameContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNamespace_or_type_name(this);
  }
};

CSharpParser.Namespace_or_type_nameContext = Namespace_or_type_nameContext;

CSharpParser.prototype.namespace_or_type_name = function() {
  var localctx = new Namespace_or_type_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 2, CSharpParser.RULE_namespace_or_type_name);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 443;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
    switch (la_) {
      case 1:
        this.state = 438;
        this.identifier();
        this.state = 440;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 5, this._ctx);
        if (la_ === 1) {
          this.state = 439;
          this.type_argument_list();
        }
        break;

      case 2:
        this.state = 442;
        this.qualified_alias_member();
        break;
    }
    this.state = 452;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 445;
        this.match(CSharpParser.DOT);
        this.state = 446;
        this.identifier();
        this.state = 448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
        if (la_ === 1) {
          this.state = 447;
          this.type_argument_list();
        }
      }
      this.state = 454;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function TypeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type;
  return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.base_type = function() {
  return this.getTypedRuleContext(Base_typeContext, 0);
};

TypeContext.prototype.rank_specifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Rank_specifierContext);
  } else {
    return this.getTypedRuleContext(Rank_specifierContext, i);
  }
};

TypeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType(this);
  }
};

TypeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType(this);
  }
};

CSharpParser.TypeContext = TypeContext;

CSharpParser.prototype.type = function() {
  var localctx = new TypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 4, CSharpParser.RULE_type);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 455;
    this.base_type();
    this.state = 461;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 10, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 459;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.INTERR:
            this.state = 456;
            this.match(CSharpParser.INTERR);
            break;
          case CSharpParser.OPEN_BRACKET:
            this.state = 457;
            this.rank_specifier();
            break;
          case CSharpParser.STAR:
            this.state = 458;
            this.match(CSharpParser.STAR);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
      }
      this.state = 463;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 10, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Base_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_base_type;
  return this;
}

Base_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Base_typeContext.prototype.constructor = Base_typeContext;

Base_typeContext.prototype.simple_type = function() {
  return this.getTypedRuleContext(Simple_typeContext, 0);
};

Base_typeContext.prototype.class_type = function() {
  return this.getTypedRuleContext(Class_typeContext, 0);
};

Base_typeContext.prototype.tuple_type = function() {
  return this.getTypedRuleContext(Tuple_typeContext, 0);
};

Base_typeContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};

Base_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBase_type(this);
  }
};

Base_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBase_type(this);
  }
};

CSharpParser.Base_typeContext = Base_typeContext;

CSharpParser.prototype.base_type = function() {
  var localctx = new Base_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 6, CSharpParser.RULE_base_type);
  try {
    this.state = 469;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.BOOL:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.DECIMAL:
      case CSharpParser.DOUBLE:
      case CSharpParser.FLOAT:
      case CSharpParser.INT:
      case CSharpParser.LONG:
      case CSharpParser.SBYTE:
      case CSharpParser.SHORT:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.USHORT:
        this.enterOuterAlt(localctx, 1);
        this.state = 464;
        this.simple_type();
        break;
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.STRING:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 2);
        this.state = 465;
        this.class_type();
        break;
      case CSharpParser.OPEN_PARENS:
        this.enterOuterAlt(localctx, 3);
        this.state = 466;
        this.tuple_type();
        break;
      case CSharpParser.VOID:
        this.enterOuterAlt(localctx, 4);
        this.state = 467;
        this.match(CSharpParser.VOID);
        this.state = 468;
        this.match(CSharpParser.STAR);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Simple_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_simple_type;
  return this;
}

Simple_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Simple_typeContext.prototype.constructor = Simple_typeContext;

Simple_typeContext.prototype.numeric_type = function() {
  return this.getTypedRuleContext(Numeric_typeContext, 0);
};

Simple_typeContext.prototype.BOOL = function() {
  return this.getToken(CSharpParser.BOOL, 0);
};

Simple_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSimple_type(this);
  }
};

Simple_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSimple_type(this);
  }
};

CSharpParser.Simple_typeContext = Simple_typeContext;

CSharpParser.prototype.simple_type = function() {
  var localctx = new Simple_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 8, CSharpParser.RULE_simple_type);
  try {
    this.state = 473;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.DECIMAL:
      case CSharpParser.DOUBLE:
      case CSharpParser.FLOAT:
      case CSharpParser.INT:
      case CSharpParser.LONG:
      case CSharpParser.SBYTE:
      case CSharpParser.SHORT:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.USHORT:
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.numeric_type();
        break;
      case CSharpParser.BOOL:
        this.enterOuterAlt(localctx, 2);
        this.state = 472;
        this.match(CSharpParser.BOOL);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Numeric_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_numeric_type;
  return this;
}

Numeric_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Numeric_typeContext.prototype.constructor = Numeric_typeContext;

Numeric_typeContext.prototype.integral_type = function() {
  return this.getTypedRuleContext(Integral_typeContext, 0);
};

Numeric_typeContext.prototype.floating_point_type = function() {
  return this.getTypedRuleContext(Floating_point_typeContext, 0);
};

Numeric_typeContext.prototype.DECIMAL = function() {
  return this.getToken(CSharpParser.DECIMAL, 0);
};

Numeric_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNumeric_type(this);
  }
};

Numeric_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNumeric_type(this);
  }
};

CSharpParser.Numeric_typeContext = Numeric_typeContext;

CSharpParser.prototype.numeric_type = function() {
  var localctx = new Numeric_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 10, CSharpParser.RULE_numeric_type);
  try {
    this.state = 478;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.INT:
      case CSharpParser.LONG:
      case CSharpParser.SBYTE:
      case CSharpParser.SHORT:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.USHORT:
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this.integral_type();
        break;
      case CSharpParser.DOUBLE:
      case CSharpParser.FLOAT:
        this.enterOuterAlt(localctx, 2);
        this.state = 476;
        this.floating_point_type();
        break;
      case CSharpParser.DECIMAL:
        this.enterOuterAlt(localctx, 3);
        this.state = 477;
        this.match(CSharpParser.DECIMAL);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Integral_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_integral_type;
  return this;
}

Integral_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Integral_typeContext.prototype.constructor = Integral_typeContext;

Integral_typeContext.prototype.SBYTE = function() {
  return this.getToken(CSharpParser.SBYTE, 0);
};

Integral_typeContext.prototype.BYTE = function() {
  return this.getToken(CSharpParser.BYTE, 0);
};

Integral_typeContext.prototype.SHORT = function() {
  return this.getToken(CSharpParser.SHORT, 0);
};

Integral_typeContext.prototype.USHORT = function() {
  return this.getToken(CSharpParser.USHORT, 0);
};

Integral_typeContext.prototype.INT = function() {
  return this.getToken(CSharpParser.INT, 0);
};

Integral_typeContext.prototype.UINT = function() {
  return this.getToken(CSharpParser.UINT, 0);
};

Integral_typeContext.prototype.LONG = function() {
  return this.getToken(CSharpParser.LONG, 0);
};

Integral_typeContext.prototype.ULONG = function() {
  return this.getToken(CSharpParser.ULONG, 0);
};

Integral_typeContext.prototype.CHAR = function() {
  return this.getToken(CSharpParser.CHAR, 0);
};

Integral_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIntegral_type(this);
  }
};

Integral_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIntegral_type(this);
  }
};

CSharpParser.Integral_typeContext = Integral_typeContext;

CSharpParser.prototype.integral_type = function() {
  var localctx = new Integral_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 12, CSharpParser.RULE_integral_type);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 480;
    _la = this._input.LA(1);
    if (
      !(
        _la === CSharpParser.BYTE ||
        _la === CSharpParser.CHAR ||
        (((_la - 56) & ~0x1f) == 0 &&
          ((1 << (_la - 56)) &
            ((1 << (CSharpParser.INT - 56)) |
              (1 << (CSharpParser.LONG - 56)) |
              (1 << (CSharpParser.SBYTE - 56)))) !==
            0) ||
        (((_la - 88) & ~0x1f) == 0 &&
          ((1 << (_la - 88)) &
            ((1 << (CSharpParser.SHORT - 88)) |
              (1 << (CSharpParser.UINT - 88)) |
              (1 << (CSharpParser.ULONG - 88)) |
              (1 << (CSharpParser.USHORT - 88)))) !==
            0)
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Floating_point_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_floating_point_type;
  return this;
}

Floating_point_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Floating_point_typeContext.prototype.constructor = Floating_point_typeContext;

Floating_point_typeContext.prototype.FLOAT = function() {
  return this.getToken(CSharpParser.FLOAT, 0);
};

Floating_point_typeContext.prototype.DOUBLE = function() {
  return this.getToken(CSharpParser.DOUBLE, 0);
};

Floating_point_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFloating_point_type(this);
  }
};

Floating_point_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFloating_point_type(this);
  }
};

CSharpParser.Floating_point_typeContext = Floating_point_typeContext;

CSharpParser.prototype.floating_point_type = function() {
  var localctx = new Floating_point_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 14, CSharpParser.RULE_floating_point_type);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 482;
    _la = this._input.LA(1);
    if (!(_la === CSharpParser.DOUBLE || _la === CSharpParser.FLOAT)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Tuple_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_tuple_type;
  return this;
}

Tuple_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_typeContext.prototype.constructor = Tuple_typeContext;

Tuple_typeContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Tuple_typeContext.prototype.tuple_element_type = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Tuple_element_typeContext);
  } else {
    return this.getTypedRuleContext(Tuple_element_typeContext, i);
  }
};

Tuple_typeContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Tuple_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTuple_type(this);
  }
};

Tuple_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTuple_type(this);
  }
};

CSharpParser.Tuple_typeContext = Tuple_typeContext;

CSharpParser.prototype.tuple_type = function() {
  var localctx = new Tuple_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 16, CSharpParser.RULE_tuple_type);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 484;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 485;
    this.tuple_element_type();
    this.state = 490;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 486;
      this.match(CSharpParser.COMMA);
      this.state = 487;
      this.tuple_element_type();
      this.state = 492;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 493;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Tuple_element_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_tuple_element_type;
  return this;
}

Tuple_element_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Tuple_element_typeContext.prototype.constructor = Tuple_element_typeContext;

Tuple_element_typeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Tuple_element_typeContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Tuple_element_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTuple_element_type(this);
  }
};

Tuple_element_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTuple_element_type(this);
  }
};

CSharpParser.Tuple_element_typeContext = Tuple_element_typeContext;

CSharpParser.prototype.tuple_element_type = function() {
  var localctx = new Tuple_element_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 18, CSharpParser.RULE_tuple_element_type);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 495;
    this.type();
    this.state = 497;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BY))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)))) !==
          0) ||
      (((_la - 106) & ~0x1f) == 0 &&
        ((1 << (_la - 106)) &
          ((1 << (CSharpParser.VAR - 106)) |
            (1 << (CSharpParser.WHEN - 106)) |
            (1 << (CSharpParser.WHERE - 106)) |
            (1 << (CSharpParser.YIELD - 106)) |
            (1 << (CSharpParser.IDENTIFIER - 106)))) !==
          0)
    ) {
      this.state = 496;
      this.identifier();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_class_type;
  return this;
}

Class_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_typeContext.prototype.constructor = Class_typeContext;

Class_typeContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};

Class_typeContext.prototype.OBJECT = function() {
  return this.getToken(CSharpParser.OBJECT, 0);
};

Class_typeContext.prototype.DYNAMIC = function() {
  return this.getToken(CSharpParser.DYNAMIC, 0);
};

Class_typeContext.prototype.STRING = function() {
  return this.getToken(CSharpParser.STRING, 0);
};

Class_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterClass_type(this);
  }
};

Class_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitClass_type(this);
  }
};

CSharpParser.Class_typeContext = Class_typeContext;

CSharpParser.prototype.class_type = function() {
  var localctx = new Class_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 20, CSharpParser.RULE_class_type);
  try {
    this.state = 503;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.namespace_or_type_name();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 500;
        this.match(CSharpParser.OBJECT);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 501;
        this.match(CSharpParser.DYNAMIC);
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 502;
        this.match(CSharpParser.STRING);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_argument_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_argument_list;
  return this;
}

Type_argument_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_argument_listContext.prototype.constructor = Type_argument_listContext;

Type_argument_listContext.prototype.type = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TypeContext);
  } else {
    return this.getTypedRuleContext(TypeContext, i);
  }
};

Type_argument_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_argument_list(this);
  }
};

Type_argument_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_argument_list(this);
  }
};

CSharpParser.Type_argument_listContext = Type_argument_listContext;

CSharpParser.prototype.type_argument_list = function() {
  var localctx = new Type_argument_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 22, CSharpParser.RULE_type_argument_list);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 505;
    this.match(CSharpParser.LT);
    this.state = 506;
    this.type();
    this.state = 511;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 507;
      this.match(CSharpParser.COMMA);
      this.state = 508;
      this.type();
      this.state = 513;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 514;
    this.match(CSharpParser.GT);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Argument_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_argument_list;
  return this;
}

Argument_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Argument_listContext.prototype.constructor = Argument_listContext;

Argument_listContext.prototype.argument = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ArgumentContext);
  } else {
    return this.getTypedRuleContext(ArgumentContext, i);
  }
};

Argument_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterArgument_list(this);
  }
};

Argument_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitArgument_list(this);
  }
};

CSharpParser.Argument_listContext = Argument_listContext;

CSharpParser.prototype.argument_list = function() {
  var localctx = new Argument_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 24, CSharpParser.RULE_argument_list);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 516;
    this.argument();
    this.state = 521;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 517;
      this.match(CSharpParser.COMMA);
      this.state = 518;
      this.argument();
      this.state = 523;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_argument;
  this.refout = null; // Token
  return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.typed_argument = function() {
  return this.getTypedRuleContext(Typed_argumentContext, 0);
};

ArgumentContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ArgumentContext.prototype.REF = function() {
  return this.getToken(CSharpParser.REF, 0);
};

ArgumentContext.prototype.OUT = function() {
  return this.getToken(CSharpParser.OUT, 0);
};

ArgumentContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterArgument(this);
  }
};

ArgumentContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitArgument(this);
  }
};

CSharpParser.ArgumentContext = ArgumentContext;

CSharpParser.prototype.argument = function() {
  var localctx = new ArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 26, CSharpParser.RULE_argument);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 527;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);
    if (la_ === 1) {
      this.state = 524;
      this.identifier();
      this.state = 525;
      this.match(CSharpParser.COLON);
    }
    this.state = 530;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OUT || _la === CSharpParser.REF) {
      this.state = 529;
      localctx.refout = this._input.LT(1);
      _la = this._input.LA(1);
      if (!(_la === CSharpParser.OUT || _la === CSharpParser.REF)) {
        localctx.refout = this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    }

    this.state = 532;
    this.typed_argument();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Typed_argumentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_typed_argument;
  return this;
}

Typed_argumentContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Typed_argumentContext.prototype.constructor = Typed_argumentContext;

Typed_argumentContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Typed_argumentContext.prototype.VAR = function() {
  return this.getToken(CSharpParser.VAR, 0);
};

Typed_argumentContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Typed_argumentContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTyped_argument(this);
  }
};

Typed_argumentContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTyped_argument(this);
  }
};

CSharpParser.Typed_argumentContext = Typed_argumentContext;

CSharpParser.prototype.typed_argument = function() {
  var localctx = new Typed_argumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 28, CSharpParser.RULE_typed_argument);
  try {
    this.state = 540;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.expression();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 21, this._ctx);
        switch (la_) {
          case 1:
            this.state = 535;
            this.match(CSharpParser.VAR);
            break;

          case 2:
            this.state = 536;
            this.type();
            break;
        }
        this.state = 539;
        this.expression();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_expression;
  return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignment = function() {
  return this.getTypedRuleContext(AssignmentContext, 0);
};

ExpressionContext.prototype.non_assignment_expression = function() {
  return this.getTypedRuleContext(Non_assignment_expressionContext, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExpression(this);
  }
};

ExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExpression(this);
  }
};

CSharpParser.ExpressionContext = ExpressionContext;

CSharpParser.prototype.expression = function() {
  var localctx = new ExpressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 30, CSharpParser.RULE_expression);
  try {
    this.state = 544;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 23, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this.assignment();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 543;
        this.non_assignment_expression();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Non_assignment_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_non_assignment_expression;
  return this;
}

Non_assignment_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Non_assignment_expressionContext.prototype.constructor = Non_assignment_expressionContext;

Non_assignment_expressionContext.prototype.lambda_expression = function() {
  return this.getTypedRuleContext(Lambda_expressionContext, 0);
};

Non_assignment_expressionContext.prototype.query_expression = function() {
  return this.getTypedRuleContext(Query_expressionContext, 0);
};

Non_assignment_expressionContext.prototype.conditional_expression = function() {
  return this.getTypedRuleContext(Conditional_expressionContext, 0);
};

Non_assignment_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNon_assignment_expression(this);
  }
};

Non_assignment_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNon_assignment_expression(this);
  }
};

CSharpParser.Non_assignment_expressionContext = Non_assignment_expressionContext;

CSharpParser.prototype.non_assignment_expression = function() {
  var localctx = new Non_assignment_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 32, CSharpParser.RULE_non_assignment_expression);
  try {
    this.state = 549;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.lambda_expression();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 547;
        this.query_expression();
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 548;
        this.conditional_expression();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AssignmentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_assignment;
  return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.unary_expression = function() {
  return this.getTypedRuleContext(Unary_expressionContext, 0);
};

AssignmentContext.prototype.assignment_operator = function() {
  return this.getTypedRuleContext(Assignment_operatorContext, 0);
};

AssignmentContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

AssignmentContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAssignment(this);
  }
};

AssignmentContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAssignment(this);
  }
};

CSharpParser.AssignmentContext = AssignmentContext;

CSharpParser.prototype.assignment = function() {
  var localctx = new AssignmentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 34, CSharpParser.RULE_assignment);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 551;
    this.unary_expression();
    this.state = 552;
    this.assignment_operator();
    this.state = 553;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Assignment_operatorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_assignment_operator;
  return this;
}

Assignment_operatorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Assignment_operatorContext.prototype.constructor = Assignment_operatorContext;

Assignment_operatorContext.prototype.right_shift_assignment = function() {
  return this.getTypedRuleContext(Right_shift_assignmentContext, 0);
};

Assignment_operatorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAssignment_operator(this);
  }
};

Assignment_operatorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAssignment_operator(this);
  }
};

CSharpParser.Assignment_operatorContext = Assignment_operatorContext;

CSharpParser.prototype.assignment_operator = function() {
  var localctx = new Assignment_operatorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 36, CSharpParser.RULE_assignment_operator);
  try {
    this.state = 566;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ASSIGNMENT:
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        this.match(CSharpParser.ASSIGNMENT);
        break;
      case CSharpParser.OP_ADD_ASSIGNMENT:
        this.enterOuterAlt(localctx, 2);
        this.state = 556;
        this.match(CSharpParser.OP_ADD_ASSIGNMENT);
        break;
      case CSharpParser.OP_SUB_ASSIGNMENT:
        this.enterOuterAlt(localctx, 3);
        this.state = 557;
        this.match(CSharpParser.OP_SUB_ASSIGNMENT);
        break;
      case CSharpParser.OP_MULT_ASSIGNMENT:
        this.enterOuterAlt(localctx, 4);
        this.state = 558;
        this.match(CSharpParser.OP_MULT_ASSIGNMENT);
        break;
      case CSharpParser.OP_DIV_ASSIGNMENT:
        this.enterOuterAlt(localctx, 5);
        this.state = 559;
        this.match(CSharpParser.OP_DIV_ASSIGNMENT);
        break;
      case CSharpParser.OP_MOD_ASSIGNMENT:
        this.enterOuterAlt(localctx, 6);
        this.state = 560;
        this.match(CSharpParser.OP_MOD_ASSIGNMENT);
        break;
      case CSharpParser.OP_AND_ASSIGNMENT:
        this.enterOuterAlt(localctx, 7);
        this.state = 561;
        this.match(CSharpParser.OP_AND_ASSIGNMENT);
        break;
      case CSharpParser.OP_OR_ASSIGNMENT:
        this.enterOuterAlt(localctx, 8);
        this.state = 562;
        this.match(CSharpParser.OP_OR_ASSIGNMENT);
        break;
      case CSharpParser.OP_XOR_ASSIGNMENT:
        this.enterOuterAlt(localctx, 9);
        this.state = 563;
        this.match(CSharpParser.OP_XOR_ASSIGNMENT);
        break;
      case CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT:
        this.enterOuterAlt(localctx, 10);
        this.state = 564;
        this.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT);
        break;
      case CSharpParser.GT:
        this.enterOuterAlt(localctx, 11);
        this.state = 565;
        this.right_shift_assignment();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Conditional_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_conditional_expression;
  return this;
}

Conditional_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Conditional_expressionContext.prototype.constructor = Conditional_expressionContext;

Conditional_expressionContext.prototype.null_coalescing_expression = function() {
  return this.getTypedRuleContext(Null_coalescing_expressionContext, 0);
};

Conditional_expressionContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

Conditional_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConditional_expression(this);
  }
};

Conditional_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConditional_expression(this);
  }
};

CSharpParser.Conditional_expressionContext = Conditional_expressionContext;

CSharpParser.prototype.conditional_expression = function() {
  var localctx = new Conditional_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 38, CSharpParser.RULE_conditional_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 568;
    this.null_coalescing_expression();
    this.state = 574;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.INTERR) {
      this.state = 569;
      this.match(CSharpParser.INTERR);
      this.state = 570;
      this.expression();
      this.state = 571;
      this.match(CSharpParser.COLON);
      this.state = 572;
      this.expression();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Null_coalescing_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_null_coalescing_expression;
  return this;
}

Null_coalescing_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Null_coalescing_expressionContext.prototype.constructor = Null_coalescing_expressionContext;

Null_coalescing_expressionContext.prototype.conditional_or_expression = function() {
  return this.getTypedRuleContext(Conditional_or_expressionContext, 0);
};

Null_coalescing_expressionContext.prototype.null_coalescing_expression = function() {
  return this.getTypedRuleContext(Null_coalescing_expressionContext, 0);
};

Null_coalescing_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNull_coalescing_expression(this);
  }
};

Null_coalescing_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNull_coalescing_expression(this);
  }
};

CSharpParser.Null_coalescing_expressionContext = Null_coalescing_expressionContext;

CSharpParser.prototype.null_coalescing_expression = function() {
  var localctx = new Null_coalescing_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 40, CSharpParser.RULE_null_coalescing_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 576;
    this.conditional_or_expression();
    this.state = 579;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OP_COALESCING) {
      this.state = 577;
      this.match(CSharpParser.OP_COALESCING);
      this.state = 578;
      this.null_coalescing_expression();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Conditional_or_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_conditional_or_expression;
  return this;
}

Conditional_or_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Conditional_or_expressionContext.prototype.constructor = Conditional_or_expressionContext;

Conditional_or_expressionContext.prototype.conditional_and_expression = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Conditional_and_expressionContext);
  } else {
    return this.getTypedRuleContext(Conditional_and_expressionContext, i);
  }
};

Conditional_or_expressionContext.prototype.OP_OR = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.OP_OR);
  } else {
    return this.getToken(CSharpParser.OP_OR, i);
  }
};

Conditional_or_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConditional_or_expression(this);
  }
};

Conditional_or_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConditional_or_expression(this);
  }
};

CSharpParser.Conditional_or_expressionContext = Conditional_or_expressionContext;

CSharpParser.prototype.conditional_or_expression = function() {
  var localctx = new Conditional_or_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 42, CSharpParser.RULE_conditional_or_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 581;
    this.conditional_and_expression();
    this.state = 586;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.OP_OR) {
      this.state = 582;
      this.match(CSharpParser.OP_OR);
      this.state = 583;
      this.conditional_and_expression();
      this.state = 588;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Conditional_and_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_conditional_and_expression;
  return this;
}

Conditional_and_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Conditional_and_expressionContext.prototype.constructor = Conditional_and_expressionContext;

Conditional_and_expressionContext.prototype.inclusive_or_expression = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Inclusive_or_expressionContext);
  } else {
    return this.getTypedRuleContext(Inclusive_or_expressionContext, i);
  }
};

Conditional_and_expressionContext.prototype.OP_AND = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.OP_AND);
  } else {
    return this.getToken(CSharpParser.OP_AND, i);
  }
};

Conditional_and_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConditional_and_expression(this);
  }
};

Conditional_and_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConditional_and_expression(this);
  }
};

CSharpParser.Conditional_and_expressionContext = Conditional_and_expressionContext;

CSharpParser.prototype.conditional_and_expression = function() {
  var localctx = new Conditional_and_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 44, CSharpParser.RULE_conditional_and_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 589;
    this.inclusive_or_expression();
    this.state = 594;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.OP_AND) {
      this.state = 590;
      this.match(CSharpParser.OP_AND);
      this.state = 591;
      this.inclusive_or_expression();
      this.state = 596;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Inclusive_or_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_inclusive_or_expression;
  return this;
}

Inclusive_or_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Inclusive_or_expressionContext.prototype.constructor = Inclusive_or_expressionContext;

Inclusive_or_expressionContext.prototype.exclusive_or_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Exclusive_or_expressionContext);
  } else {
    return this.getTypedRuleContext(Exclusive_or_expressionContext, i);
  }
};

Inclusive_or_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInclusive_or_expression(this);
  }
};

Inclusive_or_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInclusive_or_expression(this);
  }
};

CSharpParser.Inclusive_or_expressionContext = Inclusive_or_expressionContext;

CSharpParser.prototype.inclusive_or_expression = function() {
  var localctx = new Inclusive_or_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 46, CSharpParser.RULE_inclusive_or_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 597;
    this.exclusive_or_expression();
    this.state = 602;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.BITWISE_OR) {
      this.state = 598;
      this.match(CSharpParser.BITWISE_OR);
      this.state = 599;
      this.exclusive_or_expression();
      this.state = 604;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Exclusive_or_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_exclusive_or_expression;
  return this;
}

Exclusive_or_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Exclusive_or_expressionContext.prototype.constructor = Exclusive_or_expressionContext;

Exclusive_or_expressionContext.prototype.and_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(And_expressionContext);
  } else {
    return this.getTypedRuleContext(And_expressionContext, i);
  }
};

Exclusive_or_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExclusive_or_expression(this);
  }
};

Exclusive_or_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExclusive_or_expression(this);
  }
};

CSharpParser.Exclusive_or_expressionContext = Exclusive_or_expressionContext;

CSharpParser.prototype.exclusive_or_expression = function() {
  var localctx = new Exclusive_or_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 48, CSharpParser.RULE_exclusive_or_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 605;
    this.and_expression();
    this.state = 610;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.CARET) {
      this.state = 606;
      this.match(CSharpParser.CARET);
      this.state = 607;
      this.and_expression();
      this.state = 612;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function And_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_and_expression;
  return this;
}

And_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
And_expressionContext.prototype.constructor = And_expressionContext;

And_expressionContext.prototype.equality_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Equality_expressionContext);
  } else {
    return this.getTypedRuleContext(Equality_expressionContext, i);
  }
};

And_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAnd_expression(this);
  }
};

And_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAnd_expression(this);
  }
};

CSharpParser.And_expressionContext = And_expressionContext;

CSharpParser.prototype.and_expression = function() {
  var localctx = new And_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 50, CSharpParser.RULE_and_expression);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 613;
    this.equality_expression();
    this.state = 618;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 32, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 614;
        this.match(CSharpParser.AMP);
        this.state = 615;
        this.equality_expression();
      }
      this.state = 620;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 32, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Equality_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_equality_expression;
  return this;
}

Equality_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Equality_expressionContext.prototype.constructor = Equality_expressionContext;

Equality_expressionContext.prototype.relational_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Relational_expressionContext);
  } else {
    return this.getTypedRuleContext(Relational_expressionContext, i);
  }
};

Equality_expressionContext.prototype.OP_EQ = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.OP_EQ);
  } else {
    return this.getToken(CSharpParser.OP_EQ, i);
  }
};

Equality_expressionContext.prototype.OP_NE = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.OP_NE);
  } else {
    return this.getToken(CSharpParser.OP_NE, i);
  }
};

Equality_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEquality_expression(this);
  }
};

Equality_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEquality_expression(this);
  }
};

CSharpParser.Equality_expressionContext = Equality_expressionContext;

CSharpParser.prototype.equality_expression = function() {
  var localctx = new Equality_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 52, CSharpParser.RULE_equality_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 621;
    this.relational_expression();
    this.state = 626;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.OP_EQ || _la === CSharpParser.OP_NE) {
      this.state = 622;
      _la = this._input.LA(1);
      if (!(_la === CSharpParser.OP_EQ || _la === CSharpParser.OP_NE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 623;
      this.relational_expression();
      this.state = 628;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Relational_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_relational_expression;
  return this;
}

Relational_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Relational_expressionContext.prototype.constructor = Relational_expressionContext;

Relational_expressionContext.prototype.shift_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Shift_expressionContext);
  } else {
    return this.getTypedRuleContext(Shift_expressionContext, i);
  }
};

Relational_expressionContext.prototype.IS = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.IS);
  } else {
    return this.getToken(CSharpParser.IS, i);
  }
};

Relational_expressionContext.prototype.isType = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IsTypeContext);
  } else {
    return this.getTypedRuleContext(IsTypeContext, i);
  }
};

Relational_expressionContext.prototype.AS = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.AS);
  } else {
    return this.getToken(CSharpParser.AS, i);
  }
};

Relational_expressionContext.prototype.type = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TypeContext);
  } else {
    return this.getTypedRuleContext(TypeContext, i);
  }
};

Relational_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterRelational_expression(this);
  }
};

Relational_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitRelational_expression(this);
  }
};

CSharpParser.Relational_expressionContext = Relational_expressionContext;

CSharpParser.prototype.relational_expression = function() {
  var localctx = new Relational_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 54, CSharpParser.RULE_relational_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 629;
    this.shift_expression();
    this.state = 638;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (
      _la === CSharpParser.AS ||
      _la === CSharpParser.IS ||
      (((_la - 145) & ~0x1f) == 0 &&
        ((1 << (_la - 145)) &
          ((1 << (CSharpParser.LT - 145)) |
            (1 << (CSharpParser.GT - 145)) |
            (1 << (CSharpParser.OP_LE - 145)) |
            (1 << (CSharpParser.OP_GE - 145)))) !==
          0)
    ) {
      this.state = 636;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case CSharpParser.LT:
        case CSharpParser.GT:
        case CSharpParser.OP_LE:
        case CSharpParser.OP_GE:
          this.state = 630;
          _la = this._input.LA(1);
          if (
            !(
              ((_la - 145) & ~0x1f) == 0 &&
              ((1 << (_la - 145)) &
                ((1 << (CSharpParser.LT - 145)) |
                  (1 << (CSharpParser.GT - 145)) |
                  (1 << (CSharpParser.OP_LE - 145)) |
                  (1 << (CSharpParser.OP_GE - 145)))) !==
                0
            )
          ) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 631;
          this.shift_expression();
          break;
        case CSharpParser.IS:
          this.state = 632;
          this.match(CSharpParser.IS);
          this.state = 633;
          this.isType();
          break;
        case CSharpParser.AS:
          this.state = 634;
          this.match(CSharpParser.AS);
          this.state = 635;
          this.type();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 640;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Shift_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_shift_expression;
  return this;
}

Shift_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Shift_expressionContext.prototype.constructor = Shift_expressionContext;

Shift_expressionContext.prototype.additive_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Additive_expressionContext);
  } else {
    return this.getTypedRuleContext(Additive_expressionContext, i);
  }
};

Shift_expressionContext.prototype.right_shift = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Right_shiftContext);
  } else {
    return this.getTypedRuleContext(Right_shiftContext, i);
  }
};

Shift_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterShift_expression(this);
  }
};

Shift_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitShift_expression(this);
  }
};

CSharpParser.Shift_expressionContext = Shift_expressionContext;

CSharpParser.prototype.shift_expression = function() {
  var localctx = new Shift_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 56, CSharpParser.RULE_shift_expression);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 641;
    this.additive_expression();
    this.state = 649;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 644;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.OP_LEFT_SHIFT:
            this.state = 642;
            this.match(CSharpParser.OP_LEFT_SHIFT);
            break;
          case CSharpParser.GT:
            this.state = 643;
            this.right_shift();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 646;
        this.additive_expression();
      }
      this.state = 651;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Additive_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_additive_expression;
  return this;
}

Additive_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Additive_expressionContext.prototype.constructor = Additive_expressionContext;

Additive_expressionContext.prototype.multiplicative_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Multiplicative_expressionContext);
  } else {
    return this.getTypedRuleContext(Multiplicative_expressionContext, i);
  }
};

Additive_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAdditive_expression(this);
  }
};

Additive_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAdditive_expression(this);
  }
};

CSharpParser.Additive_expressionContext = Additive_expressionContext;

CSharpParser.prototype.additive_expression = function() {
  var localctx = new Additive_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 58, CSharpParser.RULE_additive_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 652;
    this.multiplicative_expression();
    this.state = 657;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 38, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 653;
        _la = this._input.LA(1);
        if (!(_la === CSharpParser.PLUS || _la === CSharpParser.MINUS)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 654;
        this.multiplicative_expression();
      }
      this.state = 659;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 38, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Multiplicative_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_multiplicative_expression;
  return this;
}

Multiplicative_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Multiplicative_expressionContext.prototype.constructor = Multiplicative_expressionContext;

Multiplicative_expressionContext.prototype.unary_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Unary_expressionContext);
  } else {
    return this.getTypedRuleContext(Unary_expressionContext, i);
  }
};

Multiplicative_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMultiplicative_expression(this);
  }
};

Multiplicative_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMultiplicative_expression(this);
  }
};

CSharpParser.Multiplicative_expressionContext = Multiplicative_expressionContext;

CSharpParser.prototype.multiplicative_expression = function() {
  var localctx = new Multiplicative_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 60, CSharpParser.RULE_multiplicative_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 660;
    this.unary_expression();
    this.state = 665;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 661;
        _la = this._input.LA(1);
        if (
          !(
            ((_la - 136) & ~0x1f) == 0 &&
            ((1 << (_la - 136)) &
              ((1 << (CSharpParser.STAR - 136)) |
                (1 << (CSharpParser.DIV - 136)) |
                (1 << (CSharpParser.PERCENT - 136)))) !==
              0
          )
        ) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 662;
        this.unary_expression();
      }
      this.state = 667;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Unary_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_unary_expression;
  return this;
}

Unary_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Unary_expressionContext.prototype.constructor = Unary_expressionContext;

Unary_expressionContext.prototype.primary_expression = function() {
  return this.getTypedRuleContext(Primary_expressionContext, 0);
};

Unary_expressionContext.prototype.unary_expression = function() {
  return this.getTypedRuleContext(Unary_expressionContext, 0);
};

Unary_expressionContext.prototype.BANG = function() {
  return this.getToken(CSharpParser.BANG, 0);
};

Unary_expressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Unary_expressionContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Unary_expressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Unary_expressionContext.prototype.AWAIT = function() {
  return this.getToken(CSharpParser.AWAIT, 0);
};

Unary_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUnary_expression(this);
  }
};

Unary_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUnary_expression(this);
  }
};

CSharpParser.Unary_expressionContext = Unary_expressionContext;

CSharpParser.prototype.unary_expression = function() {
  var localctx = new Unary_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 62, CSharpParser.RULE_unary_expression);
  try {
    this.state = 692;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.primary_expression();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 669;
        this.match(CSharpParser.PLUS);
        this.state = 670;
        this.unary_expression();
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 671;
        this.match(CSharpParser.MINUS);
        this.state = 672;
        this.unary_expression();
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 673;
        this.match(CSharpParser.BANG);
        this.state = 674;
        this.unary_expression();
        break;

      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 675;
        this.match(CSharpParser.TILDE);
        this.state = 676;
        this.unary_expression();
        break;

      case 6:
        this.enterOuterAlt(localctx, 6);
        this.state = 677;
        this.match(CSharpParser.OP_INC);
        this.state = 678;
        this.unary_expression();
        break;

      case 7:
        this.enterOuterAlt(localctx, 7);
        this.state = 679;
        this.match(CSharpParser.OP_DEC);
        this.state = 680;
        this.unary_expression();
        break;

      case 8:
        this.enterOuterAlt(localctx, 8);
        this.state = 681;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 682;
        this.type();
        this.state = 683;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 684;
        this.unary_expression();
        break;

      case 9:
        this.enterOuterAlt(localctx, 9);
        this.state = 686;
        this.match(CSharpParser.AWAIT);
        this.state = 687;
        this.unary_expression();
        break;

      case 10:
        this.enterOuterAlt(localctx, 10);
        this.state = 688;
        this.match(CSharpParser.AMP);
        this.state = 689;
        this.unary_expression();
        break;

      case 11:
        this.enterOuterAlt(localctx, 11);
        this.state = 690;
        this.match(CSharpParser.STAR);
        this.state = 691;
        this.unary_expression();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Primary_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_primary_expression;
  return this;
}

Primary_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Primary_expressionContext.prototype.constructor = Primary_expressionContext;

Primary_expressionContext.prototype.primary_expression_start = function() {
  return this.getTypedRuleContext(Primary_expression_startContext, 0);
};

Primary_expressionContext.prototype.bracket_expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Bracket_expressionContext);
  } else {
    return this.getTypedRuleContext(Bracket_expressionContext, i);
  }
};

Primary_expressionContext.prototype.method_invocation = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Method_invocationContext);
  } else {
    return this.getTypedRuleContext(Method_invocationContext, i);
  }
};

Primary_expressionContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Primary_expressionContext.prototype.simple_name = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Simple_nameContext);
  } else {
    return this.getTypedRuleContext(Simple_nameContext, i);
  }
};

Primary_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterPrimary_expression(this);
  }
};

Primary_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitPrimary_expression(this);
  }
};

CSharpParser.Primary_expressionContext = Primary_expressionContext;

CSharpParser.prototype.primary_expression = function() {
  var localctx = new Primary_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 64, CSharpParser.RULE_primary_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 694;
    this.primary_expression_start();
    this.state = 698;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 695;
        this.bracket_expression();
      }
      this.state = 700;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
    }

    this.state = 721;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 711;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.DOT:
          case CSharpParser.INTERR:
            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CSharpParser.INTERR) {
              this.state = 701;
              this.match(CSharpParser.INTERR);
            }

            this.state = 704;
            this.match(CSharpParser.DOT);
            this.state = 705;
            this.simple_name();
            break;
          case CSharpParser.OPEN_PARENS:
            this.state = 706;
            this.method_invocation();
            break;
          case CSharpParser.OP_INC:
            this.state = 707;
            this.match(CSharpParser.OP_INC);
            break;
          case CSharpParser.OP_DEC:
            this.state = 708;
            this.match(CSharpParser.OP_DEC);
            break;
          case CSharpParser.OP_PTR:
            this.state = 709;
            this.match(CSharpParser.OP_PTR);
            this.state = 710;
            this.identifier();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 716;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 713;
            this.bracket_expression();
          }
          this.state = 718;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
        }
      }
      this.state = 723;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Primary_expression_startContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_primary_expression_start;
  return this;
}

Primary_expression_startContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Primary_expression_startContext.prototype.constructor = Primary_expression_startContext;

Primary_expression_startContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LiteralAccessExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LiteralAccessExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
LiteralAccessExpressionContext.prototype.constructor = LiteralAccessExpressionContext;

CSharpParser.LiteralAccessExpressionContext = LiteralAccessExpressionContext;

LiteralAccessExpressionContext.prototype.LITERAL_ACCESS = function() {
  return this.getToken(CSharpParser.LITERAL_ACCESS, 0);
};
LiteralAccessExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLiteralAccessExpression(this);
  }
};

LiteralAccessExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLiteralAccessExpression(this);
  }
};

function DefaultValueExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DefaultValueExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
DefaultValueExpressionContext.prototype.constructor = DefaultValueExpressionContext;

CSharpParser.DefaultValueExpressionContext = DefaultValueExpressionContext;

DefaultValueExpressionContext.prototype.DEFAULT = function() {
  return this.getToken(CSharpParser.DEFAULT, 0);
};

DefaultValueExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

DefaultValueExpressionContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

DefaultValueExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
DefaultValueExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterDefaultValueExpression(this);
  }
};

DefaultValueExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitDefaultValueExpression(this);
  }
};

function NewExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

NewExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
NewExpressionContext.prototype.constructor = NewExpressionContext;

CSharpParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.NEW = function() {
  return this.getToken(CSharpParser.NEW, 0);
};

NewExpressionContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

NewExpressionContext.prototype.anonymous_object_initializer = function() {
  return this.getTypedRuleContext(Anonymous_object_initializerContext, 0);
};

NewExpressionContext.prototype.rank_specifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Rank_specifierContext);
  } else {
    return this.getTypedRuleContext(Rank_specifierContext, i);
  }
};

NewExpressionContext.prototype.array_initializer = function() {
  return this.getTypedRuleContext(Array_initializerContext, 0);
};

NewExpressionContext.prototype.object_creation_expression = function() {
  return this.getTypedRuleContext(Object_creation_expressionContext, 0);
};

NewExpressionContext.prototype.object_or_collection_initializer = function() {
  return this.getTypedRuleContext(Object_or_collection_initializerContext, 0);
};

NewExpressionContext.prototype.expression_list = function() {
  return this.getTypedRuleContext(Expression_listContext, 0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNewExpression(this);
  }
};

NewExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNewExpression(this);
  }
};

function QualifiedAliasMemberExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

QualifiedAliasMemberExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
QualifiedAliasMemberExpressionContext.prototype.constructor = QualifiedAliasMemberExpressionContext;

CSharpParser.QualifiedAliasMemberExpressionContext = QualifiedAliasMemberExpressionContext;

QualifiedAliasMemberExpressionContext.prototype.qualified_alias_member = function() {
  return this.getTypedRuleContext(Qualified_alias_memberContext, 0);
};
QualifiedAliasMemberExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQualifiedAliasMemberExpression(this);
  }
};

QualifiedAliasMemberExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQualifiedAliasMemberExpression(this);
  }
};

function BaseAccessExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BaseAccessExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
BaseAccessExpressionContext.prototype.constructor = BaseAccessExpressionContext;

CSharpParser.BaseAccessExpressionContext = BaseAccessExpressionContext;

BaseAccessExpressionContext.prototype.BASE = function() {
  return this.getToken(CSharpParser.BASE, 0);
};

BaseAccessExpressionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

BaseAccessExpressionContext.prototype.expression_list = function() {
  return this.getTypedRuleContext(Expression_listContext, 0);
};

BaseAccessExpressionContext.prototype.type_argument_list = function() {
  return this.getTypedRuleContext(Type_argument_listContext, 0);
};
BaseAccessExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBaseAccessExpression(this);
  }
};

BaseAccessExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBaseAccessExpression(this);
  }
};

function SizeofExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

SizeofExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
SizeofExpressionContext.prototype.constructor = SizeofExpressionContext;

CSharpParser.SizeofExpressionContext = SizeofExpressionContext;

SizeofExpressionContext.prototype.SIZEOF = function() {
  return this.getToken(CSharpParser.SIZEOF, 0);
};

SizeofExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

SizeofExpressionContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

SizeofExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
SizeofExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSizeofExpression(this);
  }
};

SizeofExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSizeofExpression(this);
  }
};

function ParenthesisExpressionsContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ParenthesisExpressionsContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
ParenthesisExpressionsContext.prototype.constructor = ParenthesisExpressionsContext;

CSharpParser.ParenthesisExpressionsContext = ParenthesisExpressionsContext;

ParenthesisExpressionsContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ParenthesisExpressionsContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

ParenthesisExpressionsContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
ParenthesisExpressionsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterParenthesisExpressions(this);
  }
};

ParenthesisExpressionsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitParenthesisExpressions(this);
  }
};

function ThisReferenceExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ThisReferenceExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
ThisReferenceExpressionContext.prototype.constructor = ThisReferenceExpressionContext;

CSharpParser.ThisReferenceExpressionContext = ThisReferenceExpressionContext;

ThisReferenceExpressionContext.prototype.THIS = function() {
  return this.getToken(CSharpParser.THIS, 0);
};
ThisReferenceExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterThisReferenceExpression(this);
  }
};

ThisReferenceExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitThisReferenceExpression(this);
  }
};

function AnonymousMethodExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

AnonymousMethodExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
AnonymousMethodExpressionContext.prototype.constructor = AnonymousMethodExpressionContext;

CSharpParser.AnonymousMethodExpressionContext = AnonymousMethodExpressionContext;

AnonymousMethodExpressionContext.prototype.DELEGATE = function() {
  return this.getToken(CSharpParser.DELEGATE, 0);
};

AnonymousMethodExpressionContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

AnonymousMethodExpressionContext.prototype.ASYNC = function() {
  return this.getToken(CSharpParser.ASYNC, 0);
};

AnonymousMethodExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

AnonymousMethodExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

AnonymousMethodExpressionContext.prototype.explicit_anonymous_function_parameter_list = function() {
  return this.getTypedRuleContext(
    Explicit_anonymous_function_parameter_listContext,
    0
  );
};
AnonymousMethodExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAnonymousMethodExpression(this);
  }
};

AnonymousMethodExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAnonymousMethodExpression(this);
  }
};

function TypeofExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TypeofExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

CSharpParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.TYPEOF = function() {
  return this.getToken(CSharpParser.TYPEOF, 0);
};

TypeofExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

TypeofExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

TypeofExpressionContext.prototype.unbound_type_name = function() {
  return this.getTypedRuleContext(Unbound_type_nameContext, 0);
};

TypeofExpressionContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

TypeofExpressionContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};
TypeofExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTypeofExpression(this);
  }
};

TypeofExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTypeofExpression(this);
  }
};

function TupleExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TupleExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
TupleExpressionContext.prototype.constructor = TupleExpressionContext;

CSharpParser.TupleExpressionContext = TupleExpressionContext;

TupleExpressionContext.prototype.tuple_initializer = function() {
  return this.getTypedRuleContext(Tuple_initializerContext, 0);
};
TupleExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTupleExpression(this);
  }
};

TupleExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTupleExpression(this);
  }
};

function PredefinedTypeExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

PredefinedTypeExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
PredefinedTypeExpressionContext.prototype.constructor = PredefinedTypeExpressionContext;

CSharpParser.PredefinedTypeExpressionContext = PredefinedTypeExpressionContext;

PredefinedTypeExpressionContext.prototype.predefined_type = function() {
  return this.getTypedRuleContext(Predefined_typeContext, 0);
};
PredefinedTypeExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterPredefinedTypeExpression(this);
  }
};

PredefinedTypeExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitPredefinedTypeExpression(this);
  }
};

function UncheckedExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UncheckedExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
UncheckedExpressionContext.prototype.constructor = UncheckedExpressionContext;

CSharpParser.UncheckedExpressionContext = UncheckedExpressionContext;

UncheckedExpressionContext.prototype.UNCHECKED = function() {
  return this.getToken(CSharpParser.UNCHECKED, 0);
};

UncheckedExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

UncheckedExpressionContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

UncheckedExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
UncheckedExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUncheckedExpression(this);
  }
};

UncheckedExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUncheckedExpression(this);
  }
};

function SimpleNameExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

SimpleNameExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
SimpleNameExpressionContext.prototype.constructor = SimpleNameExpressionContext;

CSharpParser.SimpleNameExpressionContext = SimpleNameExpressionContext;

SimpleNameExpressionContext.prototype.simple_name = function() {
  return this.getTypedRuleContext(Simple_nameContext, 0);
};
SimpleNameExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSimpleNameExpression(this);
  }
};

SimpleNameExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSimpleNameExpression(this);
  }
};

function CheckedExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

CheckedExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
CheckedExpressionContext.prototype.constructor = CheckedExpressionContext;

CSharpParser.CheckedExpressionContext = CheckedExpressionContext;

CheckedExpressionContext.prototype.CHECKED = function() {
  return this.getToken(CSharpParser.CHECKED, 0);
};

CheckedExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

CheckedExpressionContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

CheckedExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
CheckedExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCheckedExpression(this);
  }
};

CheckedExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCheckedExpression(this);
  }
};

function LiteralExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LiteralExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

CSharpParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
  return this.getTypedRuleContext(LiteralContext, 0);
};
LiteralExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLiteralExpression(this);
  }
};

LiteralExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLiteralExpression(this);
  }
};

function NameofExpressionContext(parser, ctx) {
  Primary_expression_startContext.call(this, parser);
  Primary_expression_startContext.prototype.copyFrom.call(this, ctx);
  return this;
}

NameofExpressionContext.prototype = Object.create(
  Primary_expression_startContext.prototype
);
NameofExpressionContext.prototype.constructor = NameofExpressionContext;

CSharpParser.NameofExpressionContext = NameofExpressionContext;

NameofExpressionContext.prototype.NAMEOF = function() {
  return this.getToken(CSharpParser.NAMEOF, 0);
};

NameofExpressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

NameofExpressionContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

NameofExpressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
NameofExpressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNameofExpression(this);
  }
};

NameofExpressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNameofExpression(this);
  }
};

CSharpParser.Primary_expression_startContext = Primary_expression_startContext;

CSharpParser.prototype.primary_expression_start = function() {
  var localctx = new Primary_expression_startContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 66, CSharpParser.RULE_primary_expression_start);
  var _la = 0; // Token type
  try {
    this.state = 833;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
    switch (la_) {
      case 1:
        localctx = new LiteralExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.literal();
        break;

      case 2:
        localctx = new SimpleNameExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 725;
        this.simple_name();
        break;

      case 3:
        localctx = new ParenthesisExpressionsContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 726;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 727;
        this.expression();
        this.state = 728;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 4:
        localctx = new TupleExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 4);
        this.state = 730;
        this.tuple_initializer();
        break;

      case 5:
        localctx = new PredefinedTypeExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 5);
        this.state = 731;
        this.predefined_type();
        break;

      case 6:
        localctx = new QualifiedAliasMemberExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 6);
        this.state = 732;
        this.qualified_alias_member();
        break;

      case 7:
        localctx = new LiteralAccessExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 7);
        this.state = 733;
        this.match(CSharpParser.LITERAL_ACCESS);
        break;

      case 8:
        localctx = new ThisReferenceExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 8);
        this.state = 734;
        this.match(CSharpParser.THIS);
        break;

      case 9:
        localctx = new BaseAccessExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 9);
        this.state = 735;
        this.match(CSharpParser.BASE);
        this.state = 745;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.DOT:
            this.state = 736;
            this.match(CSharpParser.DOT);
            this.state = 737;
            this.identifier();
            this.state = 739;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);
            if (la_ === 1) {
              this.state = 738;
              this.type_argument_list();
            }
            break;
          case CSharpParser.OPEN_BRACKET:
            this.state = 741;
            this.match(CSharpParser.OPEN_BRACKET);
            this.state = 742;
            this.expression_list();
            this.state = 743;
            this.match(CSharpParser.CLOSE_BRACKET);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;

      case 10:
        localctx = new NewExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 10);
        this.state = 747;
        this.match(CSharpParser.NEW);
        this.state = 776;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.ADD:
          case CSharpParser.ALIAS:
          case CSharpParser.ARGLIST:
          case CSharpParser.ASCENDING:
          case CSharpParser.ASYNC:
          case CSharpParser.AWAIT:
          case CSharpParser.BOOL:
          case CSharpParser.BY:
          case CSharpParser.BYTE:
          case CSharpParser.CHAR:
          case CSharpParser.DECIMAL:
          case CSharpParser.DESCENDING:
          case CSharpParser.DOUBLE:
          case CSharpParser.DYNAMIC:
          case CSharpParser.EQUALS:
          case CSharpParser.FLOAT:
          case CSharpParser.FROM:
          case CSharpParser.GET:
          case CSharpParser.GROUP:
          case CSharpParser.INT:
          case CSharpParser.INTO:
          case CSharpParser.JOIN:
          case CSharpParser.LET:
          case CSharpParser.LONG:
          case CSharpParser.NAMEOF:
          case CSharpParser.OBJECT:
          case CSharpParser.ON:
          case CSharpParser.ORDERBY:
          case CSharpParser.PARTIAL:
          case CSharpParser.REMOVE:
          case CSharpParser.SBYTE:
          case CSharpParser.SELECT:
          case CSharpParser.SET:
          case CSharpParser.SHORT:
          case CSharpParser.STRING:
          case CSharpParser.UINT:
          case CSharpParser.ULONG:
          case CSharpParser.USHORT:
          case CSharpParser.VAR:
          case CSharpParser.VOID:
          case CSharpParser.WHEN:
          case CSharpParser.WHERE:
          case CSharpParser.YIELD:
          case CSharpParser.IDENTIFIER:
          case CSharpParser.OPEN_PARENS:
            this.state = 748;
            this.type();
            this.state = 770;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
            switch (la_) {
              case 1:
                this.state = 749;
                this.object_creation_expression();
                break;

              case 2:
                this.state = 750;
                this.object_or_collection_initializer();
                break;

              case 3:
                this.state = 751;
                this.match(CSharpParser.OPEN_BRACKET);
                this.state = 752;
                this.expression_list();
                this.state = 753;
                this.match(CSharpParser.CLOSE_BRACKET);
                this.state = 757;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(
                  this._input,
                  48,
                  this._ctx
                );
                while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                  if (_alt === 1) {
                    this.state = 754;
                    this.rank_specifier();
                  }
                  this.state = 759;
                  this._errHandler.sync(this);
                  _alt = this._interp.adaptivePredict(
                    this._input,
                    48,
                    this._ctx
                  );
                }

                this.state = 761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === CSharpParser.OPEN_BRACE) {
                  this.state = 760;
                  this.array_initializer();
                }

                break;

              case 4:
                this.state = 764;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                  this.state = 763;
                  this.rank_specifier();
                  this.state = 766;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                } while (_la === CSharpParser.OPEN_BRACKET);
                this.state = 768;
                this.array_initializer();
                break;
            }
            break;
          case CSharpParser.OPEN_BRACE:
            this.state = 772;
            this.anonymous_object_initializer();
            break;
          case CSharpParser.OPEN_BRACKET:
            this.state = 773;
            this.rank_specifier();
            this.state = 774;
            this.array_initializer();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;

      case 11:
        localctx = new TypeofExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 11);
        this.state = 778;
        this.match(CSharpParser.TYPEOF);
        this.state = 779;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 783;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 53, this._ctx);
        switch (la_) {
          case 1:
            this.state = 780;
            this.unbound_type_name();
            break;

          case 2:
            this.state = 781;
            this.type();
            break;

          case 3:
            this.state = 782;
            this.match(CSharpParser.VOID);
            break;
        }
        this.state = 785;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 12:
        localctx = new CheckedExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 12);
        this.state = 786;
        this.match(CSharpParser.CHECKED);
        this.state = 787;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 788;
        this.expression();
        this.state = 789;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 13:
        localctx = new UncheckedExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 13);
        this.state = 791;
        this.match(CSharpParser.UNCHECKED);
        this.state = 792;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 793;
        this.expression();
        this.state = 794;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 14:
        localctx = new DefaultValueExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 14);
        this.state = 796;
        this.match(CSharpParser.DEFAULT);
        this.state = 801;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
        if (la_ === 1) {
          this.state = 797;
          this.match(CSharpParser.OPEN_PARENS);
          this.state = 798;
          this.type();
          this.state = 799;
          this.match(CSharpParser.CLOSE_PARENS);
        }
        break;

      case 15:
        localctx = new AnonymousMethodExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 15);
        this.state = 804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.ASYNC) {
          this.state = 803;
          this.match(CSharpParser.ASYNC);
        }

        this.state = 806;
        this.match(CSharpParser.DELEGATE);
        this.state = 812;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.OPEN_PARENS) {
          this.state = 807;
          this.match(CSharpParser.OPEN_PARENS);
          this.state = 809;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (
            ((_la & ~0x1f) == 0 &&
              ((1 << _la) &
                ((1 << CSharpParser.ADD) |
                  (1 << CSharpParser.ALIAS) |
                  (1 << CSharpParser.ARGLIST) |
                  (1 << CSharpParser.ASCENDING) |
                  (1 << CSharpParser.ASYNC) |
                  (1 << CSharpParser.AWAIT) |
                  (1 << CSharpParser.BOOL) |
                  (1 << CSharpParser.BY) |
                  (1 << CSharpParser.BYTE) |
                  (1 << CSharpParser.CHAR) |
                  (1 << CSharpParser.DECIMAL))) !==
                0) ||
            (((_la - 33) & ~0x1f) == 0 &&
              ((1 << (_la - 33)) &
                ((1 << (CSharpParser.DESCENDING - 33)) |
                  (1 << (CSharpParser.DOUBLE - 33)) |
                  (1 << (CSharpParser.DYNAMIC - 33)) |
                  (1 << (CSharpParser.EQUALS - 33)) |
                  (1 << (CSharpParser.FLOAT - 33)) |
                  (1 << (CSharpParser.FROM - 33)) |
                  (1 << (CSharpParser.GET - 33)) |
                  (1 << (CSharpParser.GROUP - 33)) |
                  (1 << (CSharpParser.INT - 33)) |
                  (1 << (CSharpParser.INTO - 33)) |
                  (1 << (CSharpParser.JOIN - 33)) |
                  (1 << (CSharpParser.LET - 33)) |
                  (1 << (CSharpParser.LONG - 33)))) !==
                0) ||
            (((_la - 65) & ~0x1f) == 0 &&
              ((1 << (_la - 65)) &
                ((1 << (CSharpParser.NAMEOF - 65)) |
                  (1 << (CSharpParser.OBJECT - 65)) |
                  (1 << (CSharpParser.ON - 65)) |
                  (1 << (CSharpParser.ORDERBY - 65)) |
                  (1 << (CSharpParser.OUT - 65)) |
                  (1 << (CSharpParser.PARTIAL - 65)) |
                  (1 << (CSharpParser.REF - 65)) |
                  (1 << (CSharpParser.REMOVE - 65)) |
                  (1 << (CSharpParser.SBYTE - 65)) |
                  (1 << (CSharpParser.SELECT - 65)) |
                  (1 << (CSharpParser.SET - 65)) |
                  (1 << (CSharpParser.SHORT - 65)) |
                  (1 << (CSharpParser.STRING - 65)))) !==
                0) ||
            (((_la - 100) & ~0x1f) == 0 &&
              ((1 << (_la - 100)) &
                ((1 << (CSharpParser.UINT - 100)) |
                  (1 << (CSharpParser.ULONG - 100)) |
                  (1 << (CSharpParser.USHORT - 100)) |
                  (1 << (CSharpParser.VAR - 100)) |
                  (1 << (CSharpParser.VOID - 100)) |
                  (1 << (CSharpParser.WHEN - 100)) |
                  (1 << (CSharpParser.WHERE - 100)) |
                  (1 << (CSharpParser.YIELD - 100)) |
                  (1 << (CSharpParser.IDENTIFIER - 100)) |
                  (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
                0)
          ) {
            this.state = 808;
            this.explicit_anonymous_function_parameter_list();
          }

          this.state = 811;
          this.match(CSharpParser.CLOSE_PARENS);
        }

        this.state = 814;
        this.block();
        break;

      case 16:
        localctx = new SizeofExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 16);
        this.state = 815;
        this.match(CSharpParser.SIZEOF);
        this.state = 816;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 817;
        this.type();
        this.state = 818;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 17:
        localctx = new NameofExpressionContext(this, localctx);
        this.enterOuterAlt(localctx, 17);
        this.state = 820;
        this.match(CSharpParser.NAMEOF);
        this.state = 821;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 827;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 822;
            this.identifier();
            this.state = 823;
            this.match(CSharpParser.DOT);
          }
          this.state = 829;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
        }

        this.state = 830;
        this.identifier();
        this.state = 831;
        this.match(CSharpParser.CLOSE_PARENS);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Simple_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_simple_name;
  return this;
}

Simple_nameContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Simple_nameContext.prototype.constructor = Simple_nameContext;

Simple_nameContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Simple_nameContext.prototype.type_argument_list = function() {
  return this.getTypedRuleContext(Type_argument_listContext, 0);
};

Simple_nameContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSimple_name(this);
  }
};

Simple_nameContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSimple_name(this);
  }
};

CSharpParser.Simple_nameContext = Simple_nameContext;

CSharpParser.prototype.simple_name = function() {
  var localctx = new Simple_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 68, CSharpParser.RULE_simple_name);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 835;
    this.identifier();
    this.state = 837;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);
    if (la_ === 1) {
      this.state = 836;
      this.type_argument_list();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Bracket_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_bracket_expression;
  return this;
}

Bracket_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Bracket_expressionContext.prototype.constructor = Bracket_expressionContext;

Bracket_expressionContext.prototype.indexer_argument = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Indexer_argumentContext);
  } else {
    return this.getTypedRuleContext(Indexer_argumentContext, i);
  }
};

Bracket_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBracket_expression(this);
  }
};

Bracket_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBracket_expression(this);
  }
};

CSharpParser.Bracket_expressionContext = Bracket_expressionContext;

CSharpParser.prototype.bracket_expression = function() {
  var localctx = new Bracket_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 70, CSharpParser.RULE_bracket_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 840;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.INTERR) {
      this.state = 839;
      this.match(CSharpParser.INTERR);
    }

    this.state = 842;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 843;
    this.indexer_argument();
    this.state = 848;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 844;
      this.match(CSharpParser.COMMA);
      this.state = 845;
      this.indexer_argument();
      this.state = 850;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 851;
    this.match(CSharpParser.CLOSE_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Indexer_argumentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_indexer_argument;
  return this;
}

Indexer_argumentContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Indexer_argumentContext.prototype.constructor = Indexer_argumentContext;

Indexer_argumentContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Indexer_argumentContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Indexer_argumentContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIndexer_argument(this);
  }
};

Indexer_argumentContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIndexer_argument(this);
  }
};

CSharpParser.Indexer_argumentContext = Indexer_argumentContext;

CSharpParser.prototype.indexer_argument = function() {
  var localctx = new Indexer_argumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 72, CSharpParser.RULE_indexer_argument);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 856;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
    if (la_ === 1) {
      this.state = 853;
      this.identifier();
      this.state = 854;
      this.match(CSharpParser.COLON);
    }
    this.state = 858;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Predefined_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_predefined_type;
  return this;
}

Predefined_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Predefined_typeContext.prototype.constructor = Predefined_typeContext;

Predefined_typeContext.prototype.BOOL = function() {
  return this.getToken(CSharpParser.BOOL, 0);
};

Predefined_typeContext.prototype.BYTE = function() {
  return this.getToken(CSharpParser.BYTE, 0);
};

Predefined_typeContext.prototype.CHAR = function() {
  return this.getToken(CSharpParser.CHAR, 0);
};

Predefined_typeContext.prototype.DECIMAL = function() {
  return this.getToken(CSharpParser.DECIMAL, 0);
};

Predefined_typeContext.prototype.DOUBLE = function() {
  return this.getToken(CSharpParser.DOUBLE, 0);
};

Predefined_typeContext.prototype.FLOAT = function() {
  return this.getToken(CSharpParser.FLOAT, 0);
};

Predefined_typeContext.prototype.INT = function() {
  return this.getToken(CSharpParser.INT, 0);
};

Predefined_typeContext.prototype.LONG = function() {
  return this.getToken(CSharpParser.LONG, 0);
};

Predefined_typeContext.prototype.OBJECT = function() {
  return this.getToken(CSharpParser.OBJECT, 0);
};

Predefined_typeContext.prototype.SBYTE = function() {
  return this.getToken(CSharpParser.SBYTE, 0);
};

Predefined_typeContext.prototype.SHORT = function() {
  return this.getToken(CSharpParser.SHORT, 0);
};

Predefined_typeContext.prototype.STRING = function() {
  return this.getToken(CSharpParser.STRING, 0);
};

Predefined_typeContext.prototype.UINT = function() {
  return this.getToken(CSharpParser.UINT, 0);
};

Predefined_typeContext.prototype.ULONG = function() {
  return this.getToken(CSharpParser.ULONG, 0);
};

Predefined_typeContext.prototype.USHORT = function() {
  return this.getToken(CSharpParser.USHORT, 0);
};

Predefined_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterPredefined_type(this);
  }
};

Predefined_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitPredefined_type(this);
  }
};

CSharpParser.Predefined_typeContext = Predefined_typeContext;

CSharpParser.prototype.predefined_type = function() {
  var localctx = new Predefined_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 74, CSharpParser.RULE_predefined_type);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 860;
    _la = this._input.LA(1);
    if (
      !(
        (((_la - 19) & ~0x1f) == 0 &&
          ((1 << (_la - 19)) &
            ((1 << (CSharpParser.BOOL - 19)) |
              (1 << (CSharpParser.BYTE - 19)) |
              (1 << (CSharpParser.CHAR - 19)) |
              (1 << (CSharpParser.DECIMAL - 19)) |
              (1 << (CSharpParser.DOUBLE - 19)) |
              (1 << (CSharpParser.FLOAT - 19)))) !==
            0) ||
        (((_la - 56) & ~0x1f) == 0 &&
          ((1 << (_la - 56)) &
            ((1 << (CSharpParser.INT - 56)) |
              (1 << (CSharpParser.LONG - 56)) |
              (1 << (CSharpParser.OBJECT - 56)) |
              (1 << (CSharpParser.SBYTE - 56)))) !==
            0) ||
        (((_la - 88) & ~0x1f) == 0 &&
          ((1 << (_la - 88)) &
            ((1 << (CSharpParser.SHORT - 88)) |
              (1 << (CSharpParser.STRING - 88)) |
              (1 << (CSharpParser.UINT - 88)) |
              (1 << (CSharpParser.ULONG - 88)) |
              (1 << (CSharpParser.USHORT - 88)))) !==
            0)
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_expression_list;
  return this;
}

Expression_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

Expression_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExpression_list(this);
  }
};

Expression_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExpression_list(this);
  }
};

CSharpParser.Expression_listContext = Expression_listContext;

CSharpParser.prototype.expression_list = function() {
  var localctx = new Expression_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 76, CSharpParser.RULE_expression_list);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 862;
    this.expression();
    this.state = 867;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 863;
      this.match(CSharpParser.COMMA);
      this.state = 864;
      this.expression();
      this.state = 869;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Object_or_collection_initializerContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_object_or_collection_initializer;
  return this;
}

Object_or_collection_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Object_or_collection_initializerContext.prototype.constructor = Object_or_collection_initializerContext;

Object_or_collection_initializerContext.prototype.object_initializer = function() {
  return this.getTypedRuleContext(Object_initializerContext, 0);
};

Object_or_collection_initializerContext.prototype.collection_initializer = function() {
  return this.getTypedRuleContext(Collection_initializerContext, 0);
};

Object_or_collection_initializerContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterObject_or_collection_initializer(this);
  }
};

Object_or_collection_initializerContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitObject_or_collection_initializer(this);
  }
};

CSharpParser.Object_or_collection_initializerContext = Object_or_collection_initializerContext;

CSharpParser.prototype.object_or_collection_initializer = function() {
  var localctx = new Object_or_collection_initializerContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    78,
    CSharpParser.RULE_object_or_collection_initializer
  );
  try {
    this.state = 872;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 65, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.object_initializer();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 871;
        this.collection_initializer();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Object_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_object_initializer;
  return this;
}

Object_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Object_initializerContext.prototype.constructor = Object_initializerContext;

Object_initializerContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Object_initializerContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Object_initializerContext.prototype.member_initializer_list = function() {
  return this.getTypedRuleContext(Member_initializer_listContext, 0);
};

Object_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterObject_initializer(this);
  }
};

Object_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitObject_initializer(this);
  }
};

CSharpParser.Object_initializerContext = Object_initializerContext;

CSharpParser.prototype.object_initializer = function() {
  var localctx = new Object_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 80, CSharpParser.RULE_object_initializer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 874;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 879;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BY))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)))) !==
          0) ||
      (((_la - 106) & ~0x1f) == 0 &&
        ((1 << (_la - 106)) &
          ((1 << (CSharpParser.VAR - 106)) |
            (1 << (CSharpParser.WHEN - 106)) |
            (1 << (CSharpParser.WHERE - 106)) |
            (1 << (CSharpParser.YIELD - 106)) |
            (1 << (CSharpParser.IDENTIFIER - 106)) |
            (1 << (CSharpParser.OPEN_BRACKET - 106)))) !==
          0)
    ) {
      this.state = 875;
      this.member_initializer_list();
      this.state = 877;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CSharpParser.COMMA) {
        this.state = 876;
        this.match(CSharpParser.COMMA);
      }
    }

    this.state = 881;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Member_initializer_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_member_initializer_list;
  return this;
}

Member_initializer_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Member_initializer_listContext.prototype.constructor = Member_initializer_listContext;

Member_initializer_listContext.prototype.member_initializer = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Member_initializerContext);
  } else {
    return this.getTypedRuleContext(Member_initializerContext, i);
  }
};

Member_initializer_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMember_initializer_list(this);
  }
};

Member_initializer_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMember_initializer_list(this);
  }
};

CSharpParser.Member_initializer_listContext = Member_initializer_listContext;

CSharpParser.prototype.member_initializer_list = function() {
  var localctx = new Member_initializer_listContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 82, CSharpParser.RULE_member_initializer_list);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 883;
    this.member_initializer();
    this.state = 888;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 68, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 884;
        this.match(CSharpParser.COMMA);
        this.state = 885;
        this.member_initializer();
      }
      this.state = 890;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 68, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Member_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_member_initializer;
  return this;
}

Member_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Member_initializerContext.prototype.constructor = Member_initializerContext;

Member_initializerContext.prototype.initializer_value = function() {
  return this.getTypedRuleContext(Initializer_valueContext, 0);
};

Member_initializerContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Member_initializerContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Member_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMember_initializer(this);
  }
};

Member_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMember_initializer(this);
  }
};

CSharpParser.Member_initializerContext = Member_initializerContext;

CSharpParser.prototype.member_initializer = function() {
  var localctx = new Member_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 84, CSharpParser.RULE_member_initializer);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 896;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.state = 891;
        this.identifier();
        break;
      case CSharpParser.OPEN_BRACKET:
        this.state = 892;
        this.match(CSharpParser.OPEN_BRACKET);
        this.state = 893;
        this.expression();
        this.state = 894;
        this.match(CSharpParser.CLOSE_BRACKET);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
    this.state = 898;
    this.match(CSharpParser.ASSIGNMENT);
    this.state = 899;
    this.initializer_value();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Initializer_valueContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_initializer_value;
  return this;
}

Initializer_valueContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Initializer_valueContext.prototype.constructor = Initializer_valueContext;

Initializer_valueContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Initializer_valueContext.prototype.object_or_collection_initializer = function() {
  return this.getTypedRuleContext(Object_or_collection_initializerContext, 0);
};

Initializer_valueContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInitializer_value(this);
  }
};

Initializer_valueContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInitializer_value(this);
  }
};

CSharpParser.Initializer_valueContext = Initializer_valueContext;

CSharpParser.prototype.initializer_value = function() {
  var localctx = new Initializer_valueContext(this, this._ctx, this.state);
  this.enterRule(localctx, 86, CSharpParser.RULE_initializer_value);
  try {
    this.state = 903;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 901;
        this.expression();
        break;
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 902;
        this.object_or_collection_initializer();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Collection_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_collection_initializer;
  return this;
}

Collection_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Collection_initializerContext.prototype.constructor = Collection_initializerContext;

Collection_initializerContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Collection_initializerContext.prototype.element_initializer = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Element_initializerContext);
  } else {
    return this.getTypedRuleContext(Element_initializerContext, i);
  }
};

Collection_initializerContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Collection_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCollection_initializer(this);
  }
};

Collection_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCollection_initializer(this);
  }
};

CSharpParser.Collection_initializerContext = Collection_initializerContext;

CSharpParser.prototype.collection_initializer = function() {
  var localctx = new Collection_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 88, CSharpParser.RULE_collection_initializer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 905;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 906;
    this.element_initializer();
    this.state = 911;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 907;
        this.match(CSharpParser.COMMA);
        this.state = 908;
        this.element_initializer();
      }
      this.state = 913;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);
    }

    this.state = 915;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COMMA) {
      this.state = 914;
      this.match(CSharpParser.COMMA);
    }

    this.state = 917;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Tuple_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_tuple_initializer;
  return this;
}

Tuple_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Tuple_initializerContext.prototype.constructor = Tuple_initializerContext;

Tuple_initializerContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Tuple_initializerContext.prototype.tuple_element_initializer = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Tuple_element_initializerContext);
  } else {
    return this.getTypedRuleContext(Tuple_element_initializerContext, i);
  }
};

Tuple_initializerContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Tuple_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTuple_initializer(this);
  }
};

Tuple_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTuple_initializer(this);
  }
};

CSharpParser.Tuple_initializerContext = Tuple_initializerContext;

CSharpParser.prototype.tuple_initializer = function() {
  var localctx = new Tuple_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 90, CSharpParser.RULE_tuple_initializer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 919;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 920;
    this.tuple_element_initializer();
    this.state = 925;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 921;
      this.match(CSharpParser.COMMA);
      this.state = 922;
      this.tuple_element_initializer();
      this.state = 927;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 928;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Tuple_element_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_tuple_element_initializer;
  return this;
}

Tuple_element_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Tuple_element_initializerContext.prototype.constructor = Tuple_element_initializerContext;

Tuple_element_initializerContext.prototype.non_assignment_expression = function() {
  return this.getTypedRuleContext(Non_assignment_expressionContext, 0);
};

Tuple_element_initializerContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Tuple_element_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTuple_element_initializer(this);
  }
};

Tuple_element_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTuple_element_initializer(this);
  }
};

CSharpParser.Tuple_element_initializerContext = Tuple_element_initializerContext;

CSharpParser.prototype.tuple_element_initializer = function() {
  var localctx = new Tuple_element_initializerContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 92, CSharpParser.RULE_tuple_element_initializer);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 933;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
    if (la_ === 1) {
      this.state = 930;
      this.identifier();
      this.state = 931;
      this.match(CSharpParser.COLON);
    }
    this.state = 935;
    this.non_assignment_expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Element_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_element_initializer;
  return this;
}

Element_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Element_initializerContext.prototype.constructor = Element_initializerContext;

Element_initializerContext.prototype.non_assignment_expression = function() {
  return this.getTypedRuleContext(Non_assignment_expressionContext, 0);
};

Element_initializerContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Element_initializerContext.prototype.expression_list = function() {
  return this.getTypedRuleContext(Expression_listContext, 0);
};

Element_initializerContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Element_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterElement_initializer(this);
  }
};

Element_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitElement_initializer(this);
  }
};

CSharpParser.Element_initializerContext = Element_initializerContext;

CSharpParser.prototype.element_initializer = function() {
  var localctx = new Element_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 94, CSharpParser.RULE_element_initializer);
  try {
    this.state = 942;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.non_assignment_expression();
        break;
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 938;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 939;
        this.expression_list();
        this.state = 940;
        this.match(CSharpParser.CLOSE_BRACE);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Anonymous_object_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_anonymous_object_initializer;
  return this;
}

Anonymous_object_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Anonymous_object_initializerContext.prototype.constructor = Anonymous_object_initializerContext;

Anonymous_object_initializerContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Anonymous_object_initializerContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Anonymous_object_initializerContext.prototype.member_declarator_list = function() {
  return this.getTypedRuleContext(Member_declarator_listContext, 0);
};

Anonymous_object_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAnonymous_object_initializer(this);
  }
};

Anonymous_object_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAnonymous_object_initializer(this);
  }
};

CSharpParser.Anonymous_object_initializerContext = Anonymous_object_initializerContext;

CSharpParser.prototype.anonymous_object_initializer = function() {
  var localctx = new Anonymous_object_initializerContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 96, CSharpParser.RULE_anonymous_object_initializer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 944;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 949;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0)
    ) {
      this.state = 945;
      this.member_declarator_list();
      this.state = 947;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CSharpParser.COMMA) {
        this.state = 946;
        this.match(CSharpParser.COMMA);
      }
    }

    this.state = 951;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Member_declarator_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_member_declarator_list;
  return this;
}

Member_declarator_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Member_declarator_listContext.prototype.constructor = Member_declarator_listContext;

Member_declarator_listContext.prototype.member_declarator = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Member_declaratorContext);
  } else {
    return this.getTypedRuleContext(Member_declaratorContext, i);
  }
};

Member_declarator_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMember_declarator_list(this);
  }
};

Member_declarator_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMember_declarator_list(this);
  }
};

CSharpParser.Member_declarator_listContext = Member_declarator_listContext;

CSharpParser.prototype.member_declarator_list = function() {
  var localctx = new Member_declarator_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 98, CSharpParser.RULE_member_declarator_list);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 953;
    this.member_declarator();
    this.state = 958;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 954;
        this.match(CSharpParser.COMMA);
        this.state = 955;
        this.member_declarator();
      }
      this.state = 960;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 78, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Member_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_member_declarator;
  return this;
}

Member_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Member_declaratorContext.prototype.constructor = Member_declaratorContext;

Member_declaratorContext.prototype.primary_expression = function() {
  return this.getTypedRuleContext(Primary_expressionContext, 0);
};

Member_declaratorContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Member_declaratorContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Member_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMember_declarator(this);
  }
};

Member_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMember_declarator(this);
  }
};

CSharpParser.Member_declaratorContext = Member_declaratorContext;

CSharpParser.prototype.member_declarator = function() {
  var localctx = new Member_declaratorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 100, CSharpParser.RULE_member_declarator);
  try {
    this.state = 966;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this.primary_expression();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 962;
        this.identifier();
        this.state = 963;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 964;
        this.expression();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Unbound_type_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_unbound_type_name;
  return this;
}

Unbound_type_nameContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Unbound_type_nameContext.prototype.constructor = Unbound_type_nameContext;

Unbound_type_nameContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Unbound_type_nameContext.prototype.generic_dimension_specifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Generic_dimension_specifierContext);
  } else {
    return this.getTypedRuleContext(Generic_dimension_specifierContext, i);
  }
};

Unbound_type_nameContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUnbound_type_name(this);
  }
};

Unbound_type_nameContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUnbound_type_name(this);
  }
};

CSharpParser.Unbound_type_nameContext = Unbound_type_nameContext;

CSharpParser.prototype.unbound_type_name = function() {
  var localctx = new Unbound_type_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 102, CSharpParser.RULE_unbound_type_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 968;
    this.identifier();
    this.state = 977;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.CLOSE_PARENS:
      case CSharpParser.DOT:
      case CSharpParser.LT:
        this.state = 970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.LT) {
          this.state = 969;
          this.generic_dimension_specifier();
        }

        break;
      case CSharpParser.DOUBLE_COLON:
        this.state = 972;
        this.match(CSharpParser.DOUBLE_COLON);
        this.state = 973;
        this.identifier();
        this.state = 975;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.LT) {
          this.state = 974;
          this.generic_dimension_specifier();
        }

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
    this.state = 986;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.DOT) {
      this.state = 979;
      this.match(CSharpParser.DOT);
      this.state = 980;
      this.identifier();
      this.state = 982;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CSharpParser.LT) {
        this.state = 981;
        this.generic_dimension_specifier();
      }

      this.state = 988;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Generic_dimension_specifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_generic_dimension_specifier;
  return this;
}

Generic_dimension_specifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Generic_dimension_specifierContext.prototype.constructor = Generic_dimension_specifierContext;

Generic_dimension_specifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterGeneric_dimension_specifier(this);
  }
};

Generic_dimension_specifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitGeneric_dimension_specifier(this);
  }
};

CSharpParser.Generic_dimension_specifierContext = Generic_dimension_specifierContext;

CSharpParser.prototype.generic_dimension_specifier = function() {
  var localctx = new Generic_dimension_specifierContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 104, CSharpParser.RULE_generic_dimension_specifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 989;
    this.match(CSharpParser.LT);
    this.state = 993;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 990;
      this.match(CSharpParser.COMMA);
      this.state = 995;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 996;
    this.match(CSharpParser.GT);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IsTypeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_isType;
  return this;
}

IsTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsTypeContext.prototype.constructor = IsTypeContext;

IsTypeContext.prototype.base_type = function() {
  return this.getTypedRuleContext(Base_typeContext, 0);
};

IsTypeContext.prototype.rank_specifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Rank_specifierContext);
  } else {
    return this.getTypedRuleContext(Rank_specifierContext, i);
  }
};

IsTypeContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

IsTypeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIsType(this);
  }
};

IsTypeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIsType(this);
  }
};

CSharpParser.IsTypeContext = IsTypeContext;

CSharpParser.prototype.isType = function() {
  var localctx = new IsTypeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 106, CSharpParser.RULE_isType);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 998;
    this.base_type();
    this.state = 1003;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 1001;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.OPEN_BRACKET:
            this.state = 999;
            this.rank_specifier();
            break;
          case CSharpParser.STAR:
            this.state = 1000;
            this.match(CSharpParser.STAR);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
      }
      this.state = 1005;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
    }

    this.state = 1007;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
    if (la_ === 1) {
      this.state = 1006;
      this.match(CSharpParser.INTERR);
    }
    this.state = 1010;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
    if (la_ === 1) {
      this.state = 1009;
      this.identifier();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Lambda_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_lambda_expression;
  return this;
}

Lambda_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Lambda_expressionContext.prototype.constructor = Lambda_expressionContext;

Lambda_expressionContext.prototype.anonymous_function_signature = function() {
  return this.getTypedRuleContext(Anonymous_function_signatureContext, 0);
};

Lambda_expressionContext.prototype.right_arrow = function() {
  return this.getTypedRuleContext(Right_arrowContext, 0);
};

Lambda_expressionContext.prototype.anonymous_function_body = function() {
  return this.getTypedRuleContext(Anonymous_function_bodyContext, 0);
};

Lambda_expressionContext.prototype.ASYNC = function() {
  return this.getToken(CSharpParser.ASYNC, 0);
};

Lambda_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLambda_expression(this);
  }
};

Lambda_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLambda_expression(this);
  }
};

CSharpParser.Lambda_expressionContext = Lambda_expressionContext;

CSharpParser.prototype.lambda_expression = function() {
  var localctx = new Lambda_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 108, CSharpParser.RULE_lambda_expression);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1013;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
    if (la_ === 1) {
      this.state = 1012;
      this.match(CSharpParser.ASYNC);
    }
    this.state = 1015;
    this.anonymous_function_signature();
    this.state = 1016;
    this.right_arrow();
    this.state = 1017;
    this.anonymous_function_body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Anonymous_function_signatureContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_anonymous_function_signature;
  return this;
}

Anonymous_function_signatureContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Anonymous_function_signatureContext.prototype.constructor = Anonymous_function_signatureContext;

Anonymous_function_signatureContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Anonymous_function_signatureContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Anonymous_function_signatureContext.prototype.explicit_anonymous_function_parameter_list = function() {
  return this.getTypedRuleContext(
    Explicit_anonymous_function_parameter_listContext,
    0
  );
};

Anonymous_function_signatureContext.prototype.implicit_anonymous_function_parameter_list = function() {
  return this.getTypedRuleContext(
    Implicit_anonymous_function_parameter_listContext,
    0
  );
};

Anonymous_function_signatureContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Anonymous_function_signatureContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAnonymous_function_signature(this);
  }
};

Anonymous_function_signatureContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAnonymous_function_signature(this);
  }
};

CSharpParser.Anonymous_function_signatureContext = Anonymous_function_signatureContext;

CSharpParser.prototype.anonymous_function_signature = function() {
  var localctx = new Anonymous_function_signatureContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 110, CSharpParser.RULE_anonymous_function_signature);
  try {
    this.state = 1030;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1019;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1020;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1021;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1022;
        this.explicit_anonymous_function_parameter_list();
        this.state = 1023;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 1025;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1026;
        this.implicit_anonymous_function_parameter_list();
        this.state = 1027;
        this.match(CSharpParser.CLOSE_PARENS);
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 1029;
        this.identifier();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Explicit_anonymous_function_parameter_listContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter_list;
  return this;
}

Explicit_anonymous_function_parameter_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Explicit_anonymous_function_parameter_listContext.prototype.constructor = Explicit_anonymous_function_parameter_listContext;

Explicit_anonymous_function_parameter_listContext.prototype.explicit_anonymous_function_parameter = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(
      Explicit_anonymous_function_parameterContext
    );
  } else {
    return this.getTypedRuleContext(
      Explicit_anonymous_function_parameterContext,
      i
    );
  }
};

Explicit_anonymous_function_parameter_listContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExplicit_anonymous_function_parameter_list(this);
  }
};

Explicit_anonymous_function_parameter_listContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExplicit_anonymous_function_parameter_list(this);
  }
};

CSharpParser.Explicit_anonymous_function_parameter_listContext = Explicit_anonymous_function_parameter_listContext;

CSharpParser.prototype.explicit_anonymous_function_parameter_list = function() {
  var localctx = new Explicit_anonymous_function_parameter_listContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    112,
    CSharpParser.RULE_explicit_anonymous_function_parameter_list
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1032;
    this.explicit_anonymous_function_parameter();
    this.state = 1037;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1033;
      this.match(CSharpParser.COMMA);
      this.state = 1034;
      this.explicit_anonymous_function_parameter();
      this.state = 1039;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Explicit_anonymous_function_parameterContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter;
  this.refout = null; // Token
  return this;
}

Explicit_anonymous_function_parameterContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Explicit_anonymous_function_parameterContext.prototype.constructor = Explicit_anonymous_function_parameterContext;

Explicit_anonymous_function_parameterContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Explicit_anonymous_function_parameterContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Explicit_anonymous_function_parameterContext.prototype.REF = function() {
  return this.getToken(CSharpParser.REF, 0);
};

Explicit_anonymous_function_parameterContext.prototype.OUT = function() {
  return this.getToken(CSharpParser.OUT, 0);
};

Explicit_anonymous_function_parameterContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExplicit_anonymous_function_parameter(this);
  }
};

Explicit_anonymous_function_parameterContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExplicit_anonymous_function_parameter(this);
  }
};

CSharpParser.Explicit_anonymous_function_parameterContext = Explicit_anonymous_function_parameterContext;

CSharpParser.prototype.explicit_anonymous_function_parameter = function() {
  var localctx = new Explicit_anonymous_function_parameterContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    114,
    CSharpParser.RULE_explicit_anonymous_function_parameter
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1041;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OUT || _la === CSharpParser.REF) {
      this.state = 1040;
      localctx.refout = this._input.LT(1);
      _la = this._input.LA(1);
      if (!(_la === CSharpParser.OUT || _la === CSharpParser.REF)) {
        localctx.refout = this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    }

    this.state = 1043;
    this.type();
    this.state = 1044;
    this.identifier();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Implicit_anonymous_function_parameter_listContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_implicit_anonymous_function_parameter_list;
  return this;
}

Implicit_anonymous_function_parameter_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Implicit_anonymous_function_parameter_listContext.prototype.constructor = Implicit_anonymous_function_parameter_listContext;

Implicit_anonymous_function_parameter_listContext.prototype.identifier = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Implicit_anonymous_function_parameter_listContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterImplicit_anonymous_function_parameter_list(this);
  }
};

Implicit_anonymous_function_parameter_listContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitImplicit_anonymous_function_parameter_list(this);
  }
};

CSharpParser.Implicit_anonymous_function_parameter_listContext = Implicit_anonymous_function_parameter_listContext;

CSharpParser.prototype.implicit_anonymous_function_parameter_list = function() {
  var localctx = new Implicit_anonymous_function_parameter_listContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    116,
    CSharpParser.RULE_implicit_anonymous_function_parameter_list
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1046;
    this.identifier();
    this.state = 1051;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1047;
      this.match(CSharpParser.COMMA);
      this.state = 1048;
      this.identifier();
      this.state = 1053;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Anonymous_function_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_anonymous_function_body;
  return this;
}

Anonymous_function_bodyContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Anonymous_function_bodyContext.prototype.constructor = Anonymous_function_bodyContext;

Anonymous_function_bodyContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Anonymous_function_bodyContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Anonymous_function_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAnonymous_function_body(this);
  }
};

Anonymous_function_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAnonymous_function_body(this);
  }
};

CSharpParser.Anonymous_function_bodyContext = Anonymous_function_bodyContext;

CSharpParser.prototype.anonymous_function_body = function() {
  var localctx = new Anonymous_function_bodyContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 118, CSharpParser.RULE_anonymous_function_body);
  try {
    this.state = 1056;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 1054;
        this.expression();
        break;
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 1055;
        this.block();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Query_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_query_expression;
  return this;
}

Query_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Query_expressionContext.prototype.constructor = Query_expressionContext;

Query_expressionContext.prototype.from_clause = function() {
  return this.getTypedRuleContext(From_clauseContext, 0);
};

Query_expressionContext.prototype.query_body = function() {
  return this.getTypedRuleContext(Query_bodyContext, 0);
};

Query_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQuery_expression(this);
  }
};

Query_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQuery_expression(this);
  }
};

CSharpParser.Query_expressionContext = Query_expressionContext;

CSharpParser.prototype.query_expression = function() {
  var localctx = new Query_expressionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 120, CSharpParser.RULE_query_expression);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1058;
    this.from_clause();
    this.state = 1059;
    this.query_body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_from_clause;
  return this;
}

From_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
  return this.getToken(CSharpParser.FROM, 0);
};

From_clauseContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

From_clauseContext.prototype.IN = function() {
  return this.getToken(CSharpParser.IN, 0);
};

From_clauseContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

From_clauseContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

From_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFrom_clause(this);
  }
};

From_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFrom_clause(this);
  }
};

CSharpParser.From_clauseContext = From_clauseContext;

CSharpParser.prototype.from_clause = function() {
  var localctx = new From_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 122, CSharpParser.RULE_from_clause);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1061;
    this.match(CSharpParser.FROM);
    this.state = 1063;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
    if (la_ === 1) {
      this.state = 1062;
      this.type();
    }
    this.state = 1065;
    this.identifier();
    this.state = 1066;
    this.match(CSharpParser.IN);
    this.state = 1067;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Query_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_query_body;
  return this;
}

Query_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_bodyContext.prototype.constructor = Query_bodyContext;

Query_bodyContext.prototype.select_or_group_clause = function() {
  return this.getTypedRuleContext(Select_or_group_clauseContext, 0);
};

Query_bodyContext.prototype.query_body_clause = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Query_body_clauseContext);
  } else {
    return this.getTypedRuleContext(Query_body_clauseContext, i);
  }
};

Query_bodyContext.prototype.query_continuation = function() {
  return this.getTypedRuleContext(Query_continuationContext, 0);
};

Query_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQuery_body(this);
  }
};

Query_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQuery_body(this);
  }
};

CSharpParser.Query_bodyContext = Query_bodyContext;

CSharpParser.prototype.query_body = function() {
  var localctx = new Query_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 124, CSharpParser.RULE_query_body);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1072;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (
      (((_la - 49) & ~0x1f) == 0 &&
        ((1 << (_la - 49)) &
          ((1 << (CSharpParser.FROM - 49)) |
            (1 << (CSharpParser.JOIN - 49)) |
            (1 << (CSharpParser.LET - 49)) |
            (1 << (CSharpParser.ORDERBY - 49)))) !==
          0) ||
      _la === CSharpParser.WHERE
    ) {
      this.state = 1069;
      this.query_body_clause();
      this.state = 1074;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 1075;
    this.select_or_group_clause();
    this.state = 1077;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
    if (la_ === 1) {
      this.state = 1076;
      this.query_continuation();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Query_body_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_query_body_clause;
  return this;
}

Query_body_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Query_body_clauseContext.prototype.constructor = Query_body_clauseContext;

Query_body_clauseContext.prototype.from_clause = function() {
  return this.getTypedRuleContext(From_clauseContext, 0);
};

Query_body_clauseContext.prototype.let_clause = function() {
  return this.getTypedRuleContext(Let_clauseContext, 0);
};

Query_body_clauseContext.prototype.where_clause = function() {
  return this.getTypedRuleContext(Where_clauseContext, 0);
};

Query_body_clauseContext.prototype.combined_join_clause = function() {
  return this.getTypedRuleContext(Combined_join_clauseContext, 0);
};

Query_body_clauseContext.prototype.orderby_clause = function() {
  return this.getTypedRuleContext(Orderby_clauseContext, 0);
};

Query_body_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQuery_body_clause(this);
  }
};

Query_body_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQuery_body_clause(this);
  }
};

CSharpParser.Query_body_clauseContext = Query_body_clauseContext;

CSharpParser.prototype.query_body_clause = function() {
  var localctx = new Query_body_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 126, CSharpParser.RULE_query_body_clause);
  try {
    this.state = 1084;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.FROM:
        this.enterOuterAlt(localctx, 1);
        this.state = 1079;
        this.from_clause();
        break;
      case CSharpParser.LET:
        this.enterOuterAlt(localctx, 2);
        this.state = 1080;
        this.let_clause();
        break;
      case CSharpParser.WHERE:
        this.enterOuterAlt(localctx, 3);
        this.state = 1081;
        this.where_clause();
        break;
      case CSharpParser.JOIN:
        this.enterOuterAlt(localctx, 4);
        this.state = 1082;
        this.combined_join_clause();
        break;
      case CSharpParser.ORDERBY:
        this.enterOuterAlt(localctx, 5);
        this.state = 1083;
        this.orderby_clause();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Let_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_let_clause;
  return this;
}

Let_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Let_clauseContext.prototype.constructor = Let_clauseContext;

Let_clauseContext.prototype.LET = function() {
  return this.getToken(CSharpParser.LET, 0);
};

Let_clauseContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Let_clauseContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Let_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLet_clause(this);
  }
};

Let_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLet_clause(this);
  }
};

CSharpParser.Let_clauseContext = Let_clauseContext;

CSharpParser.prototype.let_clause = function() {
  var localctx = new Let_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 128, CSharpParser.RULE_let_clause);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1086;
    this.match(CSharpParser.LET);
    this.state = 1087;
    this.identifier();
    this.state = 1088;
    this.match(CSharpParser.ASSIGNMENT);
    this.state = 1089;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_where_clause;
  return this;
}

Where_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
  return this.getToken(CSharpParser.WHERE, 0);
};

Where_clauseContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterWhere_clause(this);
  }
};

Where_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitWhere_clause(this);
  }
};

CSharpParser.Where_clauseContext = Where_clauseContext;

CSharpParser.prototype.where_clause = function() {
  var localctx = new Where_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 130, CSharpParser.RULE_where_clause);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1091;
    this.match(CSharpParser.WHERE);
    this.state = 1092;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Combined_join_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_combined_join_clause;
  return this;
}

Combined_join_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Combined_join_clauseContext.prototype.constructor = Combined_join_clauseContext;

Combined_join_clauseContext.prototype.JOIN = function() {
  return this.getToken(CSharpParser.JOIN, 0);
};

Combined_join_clauseContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Combined_join_clauseContext.prototype.IN = function() {
  return this.getToken(CSharpParser.IN, 0);
};

Combined_join_clauseContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

Combined_join_clauseContext.prototype.ON = function() {
  return this.getToken(CSharpParser.ON, 0);
};

Combined_join_clauseContext.prototype.EQUALS = function() {
  return this.getToken(CSharpParser.EQUALS, 0);
};

Combined_join_clauseContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Combined_join_clauseContext.prototype.INTO = function() {
  return this.getToken(CSharpParser.INTO, 0);
};

Combined_join_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCombined_join_clause(this);
  }
};

Combined_join_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCombined_join_clause(this);
  }
};

CSharpParser.Combined_join_clauseContext = Combined_join_clauseContext;

CSharpParser.prototype.combined_join_clause = function() {
  var localctx = new Combined_join_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 132, CSharpParser.RULE_combined_join_clause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1094;
    this.match(CSharpParser.JOIN);
    this.state = 1096;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
    if (la_ === 1) {
      this.state = 1095;
      this.type();
    }
    this.state = 1098;
    this.identifier();
    this.state = 1099;
    this.match(CSharpParser.IN);
    this.state = 1100;
    this.expression();
    this.state = 1101;
    this.match(CSharpParser.ON);
    this.state = 1102;
    this.expression();
    this.state = 1103;
    this.match(CSharpParser.EQUALS);
    this.state = 1104;
    this.expression();
    this.state = 1107;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.INTO) {
      this.state = 1105;
      this.match(CSharpParser.INTO);
      this.state = 1106;
      this.identifier();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Orderby_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_orderby_clause;
  return this;
}

Orderby_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Orderby_clauseContext.prototype.constructor = Orderby_clauseContext;

Orderby_clauseContext.prototype.ORDERBY = function() {
  return this.getToken(CSharpParser.ORDERBY, 0);
};

Orderby_clauseContext.prototype.ordering = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(OrderingContext);
  } else {
    return this.getTypedRuleContext(OrderingContext, i);
  }
};

Orderby_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterOrderby_clause(this);
  }
};

Orderby_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitOrderby_clause(this);
  }
};

CSharpParser.Orderby_clauseContext = Orderby_clauseContext;

CSharpParser.prototype.orderby_clause = function() {
  var localctx = new Orderby_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 134, CSharpParser.RULE_orderby_clause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1109;
    this.match(CSharpParser.ORDERBY);
    this.state = 1110;
    this.ordering();
    this.state = 1115;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1111;
      this.match(CSharpParser.COMMA);
      this.state = 1112;
      this.ordering();
      this.state = 1117;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function OrderingContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_ordering;
  this.dir = null; // Token
  return this;
}

OrderingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderingContext.prototype.constructor = OrderingContext;

OrderingContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

OrderingContext.prototype.ASCENDING = function() {
  return this.getToken(CSharpParser.ASCENDING, 0);
};

OrderingContext.prototype.DESCENDING = function() {
  return this.getToken(CSharpParser.DESCENDING, 0);
};

OrderingContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterOrdering(this);
  }
};

OrderingContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitOrdering(this);
  }
};

CSharpParser.OrderingContext = OrderingContext;

CSharpParser.prototype.ordering = function() {
  var localctx = new OrderingContext(this, this._ctx, this.state);
  this.enterRule(localctx, 136, CSharpParser.RULE_ordering);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1118;
    this.expression();
    this.state = 1120;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.ASCENDING || _la === CSharpParser.DESCENDING) {
      this.state = 1119;
      localctx.dir = this._input.LT(1);
      _la = this._input.LA(1);
      if (
        !(_la === CSharpParser.ASCENDING || _la === CSharpParser.DESCENDING)
      ) {
        localctx.dir = this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Select_or_group_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_select_or_group_clause;
  return this;
}

Select_or_group_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Select_or_group_clauseContext.prototype.constructor = Select_or_group_clauseContext;

Select_or_group_clauseContext.prototype.SELECT = function() {
  return this.getToken(CSharpParser.SELECT, 0);
};

Select_or_group_clauseContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

Select_or_group_clauseContext.prototype.GROUP = function() {
  return this.getToken(CSharpParser.GROUP, 0);
};

Select_or_group_clauseContext.prototype.BY = function() {
  return this.getToken(CSharpParser.BY, 0);
};

Select_or_group_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSelect_or_group_clause(this);
  }
};

Select_or_group_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSelect_or_group_clause(this);
  }
};

CSharpParser.Select_or_group_clauseContext = Select_or_group_clauseContext;

CSharpParser.prototype.select_or_group_clause = function() {
  var localctx = new Select_or_group_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 138, CSharpParser.RULE_select_or_group_clause);
  try {
    this.state = 1129;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.SELECT:
        this.enterOuterAlt(localctx, 1);
        this.state = 1122;
        this.match(CSharpParser.SELECT);
        this.state = 1123;
        this.expression();
        break;
      case CSharpParser.GROUP:
        this.enterOuterAlt(localctx, 2);
        this.state = 1124;
        this.match(CSharpParser.GROUP);
        this.state = 1125;
        this.expression();
        this.state = 1126;
        this.match(CSharpParser.BY);
        this.state = 1127;
        this.expression();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Query_continuationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_query_continuation;
  return this;
}

Query_continuationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Query_continuationContext.prototype.constructor = Query_continuationContext;

Query_continuationContext.prototype.INTO = function() {
  return this.getToken(CSharpParser.INTO, 0);
};

Query_continuationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Query_continuationContext.prototype.query_body = function() {
  return this.getTypedRuleContext(Query_bodyContext, 0);
};

Query_continuationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQuery_continuation(this);
  }
};

Query_continuationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQuery_continuation(this);
  }
};

CSharpParser.Query_continuationContext = Query_continuationContext;

CSharpParser.prototype.query_continuation = function() {
  var localctx = new Query_continuationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 140, CSharpParser.RULE_query_continuation);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1131;
    this.match(CSharpParser.INTO);
    this.state = 1132;
    this.identifier();
    this.state = 1133;
    this.query_body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function StatementContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_statement;
  return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DeclarationStatementContext(parser, ctx) {
  StatementContext.call(this, parser);
  StatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DeclarationStatementContext.prototype = Object.create(
  StatementContext.prototype
);
DeclarationStatementContext.prototype.constructor = DeclarationStatementContext;

CSharpParser.DeclarationStatementContext = DeclarationStatementContext;

DeclarationStatementContext.prototype.local_variable_declaration = function() {
  return this.getTypedRuleContext(Local_variable_declarationContext, 0);
};

DeclarationStatementContext.prototype.local_constant_declaration = function() {
  return this.getTypedRuleContext(Local_constant_declarationContext, 0);
};
DeclarationStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterDeclarationStatement(this);
  }
};

DeclarationStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitDeclarationStatement(this);
  }
};

function EmbeddedStatementContext(parser, ctx) {
  StatementContext.call(this, parser);
  StatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

EmbeddedStatementContext.prototype = Object.create(StatementContext.prototype);
EmbeddedStatementContext.prototype.constructor = EmbeddedStatementContext;

CSharpParser.EmbeddedStatementContext = EmbeddedStatementContext;

EmbeddedStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};
EmbeddedStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEmbeddedStatement(this);
  }
};

EmbeddedStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEmbeddedStatement(this);
  }
};

function LabeledStatementContext(parser, ctx) {
  StatementContext.call(this, parser);
  StatementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LabeledStatementContext.prototype = Object.create(StatementContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

CSharpParser.LabeledStatementContext = LabeledStatementContext;

LabeledStatementContext.prototype.labeled_statement = function() {
  return this.getTypedRuleContext(Labeled_statementContext, 0);
};
LabeledStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLabeledStatement(this);
  }
};

LabeledStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLabeledStatement(this);
  }
};

CSharpParser.StatementContext = StatementContext;

CSharpParser.prototype.statement = function() {
  var localctx = new StatementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 142, CSharpParser.RULE_statement);
  try {
    this.state = 1143;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
    switch (la_) {
      case 1:
        localctx = new LabeledStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1135;
        this.labeled_statement();
        break;

      case 2:
        localctx = new DeclarationStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 1138;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.ADD:
          case CSharpParser.ALIAS:
          case CSharpParser.ARGLIST:
          case CSharpParser.ASCENDING:
          case CSharpParser.ASYNC:
          case CSharpParser.AWAIT:
          case CSharpParser.BOOL:
          case CSharpParser.BY:
          case CSharpParser.BYTE:
          case CSharpParser.CHAR:
          case CSharpParser.DECIMAL:
          case CSharpParser.DESCENDING:
          case CSharpParser.DOUBLE:
          case CSharpParser.DYNAMIC:
          case CSharpParser.EQUALS:
          case CSharpParser.FLOAT:
          case CSharpParser.FROM:
          case CSharpParser.GET:
          case CSharpParser.GROUP:
          case CSharpParser.INT:
          case CSharpParser.INTO:
          case CSharpParser.JOIN:
          case CSharpParser.LET:
          case CSharpParser.LONG:
          case CSharpParser.NAMEOF:
          case CSharpParser.OBJECT:
          case CSharpParser.ON:
          case CSharpParser.ORDERBY:
          case CSharpParser.PARTIAL:
          case CSharpParser.REMOVE:
          case CSharpParser.SBYTE:
          case CSharpParser.SELECT:
          case CSharpParser.SET:
          case CSharpParser.SHORT:
          case CSharpParser.STRING:
          case CSharpParser.UINT:
          case CSharpParser.ULONG:
          case CSharpParser.USHORT:
          case CSharpParser.VAR:
          case CSharpParser.VOID:
          case CSharpParser.WHEN:
          case CSharpParser.WHERE:
          case CSharpParser.YIELD:
          case CSharpParser.IDENTIFIER:
          case CSharpParser.OPEN_PARENS:
            this.state = 1136;
            this.local_variable_declaration();
            break;
          case CSharpParser.CONST:
            this.state = 1137;
            this.local_constant_declaration();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1140;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 3:
        localctx = new EmbeddedStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 1142;
        this.embedded_statement();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Labeled_statementContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_labeled_statement;
  return this;
}

Labeled_statementContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Labeled_statementContext.prototype.constructor = Labeled_statementContext;

Labeled_statementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Labeled_statementContext.prototype.statement = function() {
  return this.getTypedRuleContext(StatementContext, 0);
};

Labeled_statementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLabeled_statement(this);
  }
};

Labeled_statementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLabeled_statement(this);
  }
};

CSharpParser.Labeled_statementContext = Labeled_statementContext;

CSharpParser.prototype.labeled_statement = function() {
  var localctx = new Labeled_statementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 144, CSharpParser.RULE_labeled_statement);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1145;
    this.identifier();
    this.state = 1146;
    this.match(CSharpParser.COLON);
    this.state = 1147;
    this.statement();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Embedded_statementContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_embedded_statement;
  return this;
}

Embedded_statementContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Embedded_statementContext.prototype.constructor = Embedded_statementContext;

Embedded_statementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Embedded_statementContext.prototype.simple_embedded_statement = function() {
  return this.getTypedRuleContext(Simple_embedded_statementContext, 0);
};

Embedded_statementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEmbedded_statement(this);
  }
};

Embedded_statementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEmbedded_statement(this);
  }
};

CSharpParser.Embedded_statementContext = Embedded_statementContext;

CSharpParser.prototype.embedded_statement = function() {
  var localctx = new Embedded_statementContext(this, this._ctx, this.state);
  this.enterRule(localctx, 146, CSharpParser.RULE_embedded_statement);
  try {
    this.state = 1151;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1149;
        this.block();
        break;
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BREAK:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.CONTINUE:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DO:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FIXED:
      case CSharpParser.FLOAT:
      case CSharpParser.FOR:
      case CSharpParser.FOREACH:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GOTO:
      case CSharpParser.GROUP:
      case CSharpParser.IF:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LOCK:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.RETURN:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.SWITCH:
      case CSharpParser.THIS:
      case CSharpParser.THROW:
      case CSharpParser.TRUE:
      case CSharpParser.TRY:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.UNSAFE:
      case CSharpParser.USHORT:
      case CSharpParser.USING:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.WHILE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.SEMICOLON:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 2);
        this.state = 1150;
        this.simple_embedded_statement();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Simple_embedded_statementContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_simple_embedded_statement;
  return this;
}

Simple_embedded_statementContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Simple_embedded_statementContext.prototype.constructor = Simple_embedded_statementContext;

Simple_embedded_statementContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function EmptyStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

EmptyStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

CSharpParser.EmptyStatementContext = EmptyStatementContext;

EmptyStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEmptyStatement(this);
  }
};

EmptyStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEmptyStatement(this);
  }
};

function TryStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

TryStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
TryStatementContext.prototype.constructor = TryStatementContext;

CSharpParser.TryStatementContext = TryStatementContext;

TryStatementContext.prototype.TRY = function() {
  return this.getToken(CSharpParser.TRY, 0);
};

TryStatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

TryStatementContext.prototype.catch_clauses = function() {
  return this.getTypedRuleContext(Catch_clausesContext, 0);
};

TryStatementContext.prototype.finally_clause = function() {
  return this.getTypedRuleContext(Finally_clauseContext, 0);
};
TryStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTryStatement(this);
  }
};

TryStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTryStatement(this);
  }
};

function CheckedStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

CheckedStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
CheckedStatementContext.prototype.constructor = CheckedStatementContext;

CSharpParser.CheckedStatementContext = CheckedStatementContext;

CheckedStatementContext.prototype.CHECKED = function() {
  return this.getToken(CSharpParser.CHECKED, 0);
};

CheckedStatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};
CheckedStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCheckedStatement(this);
  }
};

CheckedStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCheckedStatement(this);
  }
};

function ThrowStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ThrowStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

CSharpParser.ThrowStatementContext = ThrowStatementContext;

ThrowStatementContext.prototype.THROW = function() {
  return this.getToken(CSharpParser.THROW, 0);
};

ThrowStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};
ThrowStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterThrowStatement(this);
  }
};

ThrowStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitThrowStatement(this);
  }
};

function UnsafeStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UnsafeStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
UnsafeStatementContext.prototype.constructor = UnsafeStatementContext;

CSharpParser.UnsafeStatementContext = UnsafeStatementContext;

UnsafeStatementContext.prototype.UNSAFE = function() {
  return this.getToken(CSharpParser.UNSAFE, 0);
};

UnsafeStatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};
UnsafeStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUnsafeStatement(this);
  }
};

UnsafeStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUnsafeStatement(this);
  }
};

function ForStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
ForStatementContext.prototype.constructor = ForStatementContext;

CSharpParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
  return this.getToken(CSharpParser.FOR, 0);
};

ForStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ForStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ForStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};

ForStatementContext.prototype.for_initializer = function() {
  return this.getTypedRuleContext(For_initializerContext, 0);
};

ForStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

ForStatementContext.prototype.for_iterator = function() {
  return this.getTypedRuleContext(For_iteratorContext, 0);
};
ForStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterForStatement(this);
  }
};

ForStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitForStatement(this);
  }
};

function BreakStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

BreakStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
BreakStatementContext.prototype.constructor = BreakStatementContext;

CSharpParser.BreakStatementContext = BreakStatementContext;

BreakStatementContext.prototype.BREAK = function() {
  return this.getToken(CSharpParser.BREAK, 0);
};
BreakStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBreakStatement(this);
  }
};

BreakStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBreakStatement(this);
  }
};

function IfStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

IfStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
IfStatementContext.prototype.constructor = IfStatementContext;

CSharpParser.IfStatementContext = IfStatementContext;

IfStatementContext.prototype.IF = function() {
  return this.getToken(CSharpParser.IF, 0);
};

IfStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

IfStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

IfStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

IfStatementContext.prototype.if_body = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(If_bodyContext);
  } else {
    return this.getTypedRuleContext(If_bodyContext, i);
  }
};

IfStatementContext.prototype.ELSE = function() {
  return this.getToken(CSharpParser.ELSE, 0);
};
IfStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIfStatement(this);
  }
};

IfStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIfStatement(this);
  }
};

function ReturnStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ReturnStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

CSharpParser.ReturnStatementContext = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
  return this.getToken(CSharpParser.RETURN, 0);
};

ReturnStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};
ReturnStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterReturnStatement(this);
  }
};

ReturnStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitReturnStatement(this);
  }
};

function GotoStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

GotoStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
GotoStatementContext.prototype.constructor = GotoStatementContext;

CSharpParser.GotoStatementContext = GotoStatementContext;

GotoStatementContext.prototype.GOTO = function() {
  return this.getToken(CSharpParser.GOTO, 0);
};

GotoStatementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

GotoStatementContext.prototype.CASE = function() {
  return this.getToken(CSharpParser.CASE, 0);
};

GotoStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

GotoStatementContext.prototype.DEFAULT = function() {
  return this.getToken(CSharpParser.DEFAULT, 0);
};
GotoStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterGotoStatement(this);
  }
};

GotoStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitGotoStatement(this);
  }
};

function SwitchStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

SwitchStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

CSharpParser.SwitchStatementContext = SwitchStatementContext;

SwitchStatementContext.prototype.SWITCH = function() {
  return this.getToken(CSharpParser.SWITCH, 0);
};

SwitchStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

SwitchStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

SwitchStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

SwitchStatementContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

SwitchStatementContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

SwitchStatementContext.prototype.switch_section = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Switch_sectionContext);
  } else {
    return this.getTypedRuleContext(Switch_sectionContext, i);
  }
};
SwitchStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSwitchStatement(this);
  }
};

SwitchStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSwitchStatement(this);
  }
};

function FixedStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

FixedStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
FixedStatementContext.prototype.constructor = FixedStatementContext;

CSharpParser.FixedStatementContext = FixedStatementContext;

FixedStatementContext.prototype.FIXED = function() {
  return this.getToken(CSharpParser.FIXED, 0);
};

FixedStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

FixedStatementContext.prototype.pointer_type = function() {
  return this.getTypedRuleContext(Pointer_typeContext, 0);
};

FixedStatementContext.prototype.fixed_pointer_declarators = function() {
  return this.getTypedRuleContext(Fixed_pointer_declaratorsContext, 0);
};

FixedStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

FixedStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};
FixedStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixedStatement(this);
  }
};

FixedStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixedStatement(this);
  }
};

function WhileStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

WhileStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
WhileStatementContext.prototype.constructor = WhileStatementContext;

CSharpParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
  return this.getToken(CSharpParser.WHILE, 0);
};

WhileStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

WhileStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

WhileStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

WhileStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};
WhileStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterWhileStatement(this);
  }
};

WhileStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitWhileStatement(this);
  }
};

function DoStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

DoStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
DoStatementContext.prototype.constructor = DoStatementContext;

CSharpParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.DO = function() {
  return this.getToken(CSharpParser.DO, 0);
};

DoStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};

DoStatementContext.prototype.WHILE = function() {
  return this.getToken(CSharpParser.WHILE, 0);
};

DoStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

DoStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

DoStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};
DoStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterDoStatement(this);
  }
};

DoStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitDoStatement(this);
  }
};

function ForeachStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ForeachStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
ForeachStatementContext.prototype.constructor = ForeachStatementContext;

CSharpParser.ForeachStatementContext = ForeachStatementContext;

ForeachStatementContext.prototype.FOREACH = function() {
  return this.getToken(CSharpParser.FOREACH, 0);
};

ForeachStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

ForeachStatementContext.prototype.local_variable_type = function() {
  return this.getTypedRuleContext(Local_variable_typeContext, 0);
};

ForeachStatementContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

ForeachStatementContext.prototype.IN = function() {
  return this.getToken(CSharpParser.IN, 0);
};

ForeachStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

ForeachStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

ForeachStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};
ForeachStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterForeachStatement(this);
  }
};

ForeachStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitForeachStatement(this);
  }
};

function UncheckedStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UncheckedStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
UncheckedStatementContext.prototype.constructor = UncheckedStatementContext;

CSharpParser.UncheckedStatementContext = UncheckedStatementContext;

UncheckedStatementContext.prototype.UNCHECKED = function() {
  return this.getToken(CSharpParser.UNCHECKED, 0);
};

UncheckedStatementContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};
UncheckedStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUncheckedStatement(this);
  }
};

UncheckedStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUncheckedStatement(this);
  }
};

function ExpressionStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ExpressionStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

CSharpParser.ExpressionStatementContext = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};
ExpressionStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExpressionStatement(this);
  }
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExpressionStatement(this);
  }
};

function ContinueStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

ContinueStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

CSharpParser.ContinueStatementContext = ContinueStatementContext;

ContinueStatementContext.prototype.CONTINUE = function() {
  return this.getToken(CSharpParser.CONTINUE, 0);
};
ContinueStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterContinueStatement(this);
  }
};

ContinueStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitContinueStatement(this);
  }
};

function UsingStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UsingStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
UsingStatementContext.prototype.constructor = UsingStatementContext;

CSharpParser.UsingStatementContext = UsingStatementContext;

UsingStatementContext.prototype.USING = function() {
  return this.getToken(CSharpParser.USING, 0);
};

UsingStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

UsingStatementContext.prototype.resource_acquisition = function() {
  return this.getTypedRuleContext(Resource_acquisitionContext, 0);
};

UsingStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

UsingStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};
UsingStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUsingStatement(this);
  }
};

UsingStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUsingStatement(this);
  }
};

function LockStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

LockStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
LockStatementContext.prototype.constructor = LockStatementContext;

CSharpParser.LockStatementContext = LockStatementContext;

LockStatementContext.prototype.LOCK = function() {
  return this.getToken(CSharpParser.LOCK, 0);
};

LockStatementContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

LockStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

LockStatementContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

LockStatementContext.prototype.embedded_statement = function() {
  return this.getTypedRuleContext(Embedded_statementContext, 0);
};
LockStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLockStatement(this);
  }
};

LockStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLockStatement(this);
  }
};

function YieldStatementContext(parser, ctx) {
  Simple_embedded_statementContext.call(this, parser);
  Simple_embedded_statementContext.prototype.copyFrom.call(this, ctx);
  return this;
}

YieldStatementContext.prototype = Object.create(
  Simple_embedded_statementContext.prototype
);
YieldStatementContext.prototype.constructor = YieldStatementContext;

CSharpParser.YieldStatementContext = YieldStatementContext;

YieldStatementContext.prototype.YIELD = function() {
  return this.getToken(CSharpParser.YIELD, 0);
};

YieldStatementContext.prototype.RETURN = function() {
  return this.getToken(CSharpParser.RETURN, 0);
};

YieldStatementContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

YieldStatementContext.prototype.BREAK = function() {
  return this.getToken(CSharpParser.BREAK, 0);
};
YieldStatementContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterYieldStatement(this);
  }
};

YieldStatementContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitYieldStatement(this);
  }
};

CSharpParser.Simple_embedded_statementContext = Simple_embedded_statementContext;

CSharpParser.prototype.simple_embedded_statement = function() {
  var localctx = new Simple_embedded_statementContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 148, CSharpParser.RULE_simple_embedded_statement);
  var _la = 0; // Token type
  try {
    this.state = 1280;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 119, this._ctx);
    switch (la_) {
      case 1:
        localctx = new EmptyStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1153;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 2:
        localctx = new ExpressionStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 1154;
        this.expression();
        this.state = 1155;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 3:
        localctx = new IfStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 1157;
        this.match(CSharpParser.IF);
        this.state = 1158;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1159;
        this.expression();
        this.state = 1160;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1161;
        this.if_body();
        this.state = 1164;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 108, this._ctx);
        if (la_ === 1) {
          this.state = 1162;
          this.match(CSharpParser.ELSE);
          this.state = 1163;
          this.if_body();
        }
        break;

      case 4:
        localctx = new SwitchStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 4);
        this.state = 1166;
        this.match(CSharpParser.SWITCH);
        this.state = 1167;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1168;
        this.expression();
        this.state = 1169;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1170;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 1174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CSharpParser.CASE || _la === CSharpParser.DEFAULT) {
          this.state = 1171;
          this.switch_section();
          this.state = 1176;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1177;
        this.match(CSharpParser.CLOSE_BRACE);
        break;

      case 5:
        localctx = new WhileStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 5);
        this.state = 1179;
        this.match(CSharpParser.WHILE);
        this.state = 1180;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1181;
        this.expression();
        this.state = 1182;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1183;
        this.embedded_statement();
        break;

      case 6:
        localctx = new DoStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 6);
        this.state = 1185;
        this.match(CSharpParser.DO);
        this.state = 1186;
        this.embedded_statement();
        this.state = 1187;
        this.match(CSharpParser.WHILE);
        this.state = 1188;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1189;
        this.expression();
        this.state = 1190;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1191;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 7:
        localctx = new ForStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 7);
        this.state = 1193;
        this.match(CSharpParser.FOR);
        this.state = 1194;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BASE) |
                (1 << CSharpParser.BOOL) |
                (1 << CSharpParser.BY) |
                (1 << CSharpParser.BYTE) |
                (1 << CSharpParser.CHAR) |
                (1 << CSharpParser.CHECKED) |
                (1 << CSharpParser.DECIMAL) |
                (1 << CSharpParser.DEFAULT))) !==
              0) ||
          (((_la - 32) & ~0x1f) == 0 &&
            ((1 << (_la - 32)) &
              ((1 << (CSharpParser.DELEGATE - 32)) |
                (1 << (CSharpParser.DESCENDING - 32)) |
                (1 << (CSharpParser.DOUBLE - 32)) |
                (1 << (CSharpParser.DYNAMIC - 32)) |
                (1 << (CSharpParser.EQUALS - 32)) |
                (1 << (CSharpParser.FALSE - 32)) |
                (1 << (CSharpParser.FLOAT - 32)) |
                (1 << (CSharpParser.FROM - 32)) |
                (1 << (CSharpParser.GET - 32)) |
                (1 << (CSharpParser.GROUP - 32)) |
                (1 << (CSharpParser.INT - 32)) |
                (1 << (CSharpParser.INTO - 32)) |
                (1 << (CSharpParser.JOIN - 32)) |
                (1 << (CSharpParser.LET - 32)))) !==
              0) ||
          (((_la - 64) & ~0x1f) == 0 &&
            ((1 << (_la - 64)) &
              ((1 << (CSharpParser.LONG - 64)) |
                (1 << (CSharpParser.NAMEOF - 64)) |
                (1 << (CSharpParser.NEW - 64)) |
                (1 << (CSharpParser.NULL - 64)) |
                (1 << (CSharpParser.OBJECT - 64)) |
                (1 << (CSharpParser.ON - 64)) |
                (1 << (CSharpParser.ORDERBY - 64)) |
                (1 << (CSharpParser.PARTIAL - 64)) |
                (1 << (CSharpParser.REMOVE - 64)) |
                (1 << (CSharpParser.SBYTE - 64)) |
                (1 << (CSharpParser.SELECT - 64)) |
                (1 << (CSharpParser.SET - 64)) |
                (1 << (CSharpParser.SHORT - 64)) |
                (1 << (CSharpParser.SIZEOF - 64)) |
                (1 << (CSharpParser.STRING - 64)) |
                (1 << (CSharpParser.THIS - 64)))) !==
              0) ||
          (((_la - 97) & ~0x1f) == 0 &&
            ((1 << (_la - 97)) &
              ((1 << (CSharpParser.TRUE - 97)) |
                (1 << (CSharpParser.TYPEOF - 97)) |
                (1 << (CSharpParser.UINT - 97)) |
                (1 << (CSharpParser.ULONG - 97)) |
                (1 << (CSharpParser.UNCHECKED - 97)) |
                (1 << (CSharpParser.USHORT - 97)) |
                (1 << (CSharpParser.VAR - 97)) |
                (1 << (CSharpParser.VOID - 97)) |
                (1 << (CSharpParser.WHEN - 97)) |
                (1 << (CSharpParser.WHERE - 97)) |
                (1 << (CSharpParser.YIELD - 97)) |
                (1 << (CSharpParser.IDENTIFIER - 97)) |
                (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
                (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.REAL_LITERAL - 97)) |
                (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
                (1 << (CSharpParser.REGULAR_STRING - 97)) |
                (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
                (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
                (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
                (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
              0) ||
          (((_la - 134) & ~0x1f) == 0 &&
            ((1 << (_la - 134)) &
              ((1 << (CSharpParser.PLUS - 134)) |
                (1 << (CSharpParser.MINUS - 134)) |
                (1 << (CSharpParser.STAR - 134)) |
                (1 << (CSharpParser.AMP - 134)) |
                (1 << (CSharpParser.BANG - 134)) |
                (1 << (CSharpParser.TILDE - 134)) |
                (1 << (CSharpParser.OP_INC - 134)) |
                (1 << (CSharpParser.OP_DEC - 134)))) !==
              0)
        ) {
          this.state = 1195;
          this.for_initializer();
        }

        this.state = 1198;
        this.match(CSharpParser.SEMICOLON);
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BASE) |
                (1 << CSharpParser.BOOL) |
                (1 << CSharpParser.BY) |
                (1 << CSharpParser.BYTE) |
                (1 << CSharpParser.CHAR) |
                (1 << CSharpParser.CHECKED) |
                (1 << CSharpParser.DECIMAL) |
                (1 << CSharpParser.DEFAULT))) !==
              0) ||
          (((_la - 32) & ~0x1f) == 0 &&
            ((1 << (_la - 32)) &
              ((1 << (CSharpParser.DELEGATE - 32)) |
                (1 << (CSharpParser.DESCENDING - 32)) |
                (1 << (CSharpParser.DOUBLE - 32)) |
                (1 << (CSharpParser.DYNAMIC - 32)) |
                (1 << (CSharpParser.EQUALS - 32)) |
                (1 << (CSharpParser.FALSE - 32)) |
                (1 << (CSharpParser.FLOAT - 32)) |
                (1 << (CSharpParser.FROM - 32)) |
                (1 << (CSharpParser.GET - 32)) |
                (1 << (CSharpParser.GROUP - 32)) |
                (1 << (CSharpParser.INT - 32)) |
                (1 << (CSharpParser.INTO - 32)) |
                (1 << (CSharpParser.JOIN - 32)) |
                (1 << (CSharpParser.LET - 32)))) !==
              0) ||
          (((_la - 64) & ~0x1f) == 0 &&
            ((1 << (_la - 64)) &
              ((1 << (CSharpParser.LONG - 64)) |
                (1 << (CSharpParser.NAMEOF - 64)) |
                (1 << (CSharpParser.NEW - 64)) |
                (1 << (CSharpParser.NULL - 64)) |
                (1 << (CSharpParser.OBJECT - 64)) |
                (1 << (CSharpParser.ON - 64)) |
                (1 << (CSharpParser.ORDERBY - 64)) |
                (1 << (CSharpParser.PARTIAL - 64)) |
                (1 << (CSharpParser.REMOVE - 64)) |
                (1 << (CSharpParser.SBYTE - 64)) |
                (1 << (CSharpParser.SELECT - 64)) |
                (1 << (CSharpParser.SET - 64)) |
                (1 << (CSharpParser.SHORT - 64)) |
                (1 << (CSharpParser.SIZEOF - 64)) |
                (1 << (CSharpParser.STRING - 64)) |
                (1 << (CSharpParser.THIS - 64)))) !==
              0) ||
          (((_la - 97) & ~0x1f) == 0 &&
            ((1 << (_la - 97)) &
              ((1 << (CSharpParser.TRUE - 97)) |
                (1 << (CSharpParser.TYPEOF - 97)) |
                (1 << (CSharpParser.UINT - 97)) |
                (1 << (CSharpParser.ULONG - 97)) |
                (1 << (CSharpParser.UNCHECKED - 97)) |
                (1 << (CSharpParser.USHORT - 97)) |
                (1 << (CSharpParser.VAR - 97)) |
                (1 << (CSharpParser.WHEN - 97)) |
                (1 << (CSharpParser.WHERE - 97)) |
                (1 << (CSharpParser.YIELD - 97)) |
                (1 << (CSharpParser.IDENTIFIER - 97)) |
                (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
                (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.REAL_LITERAL - 97)) |
                (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
                (1 << (CSharpParser.REGULAR_STRING - 97)) |
                (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
                (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
                (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
                (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
              0) ||
          (((_la - 134) & ~0x1f) == 0 &&
            ((1 << (_la - 134)) &
              ((1 << (CSharpParser.PLUS - 134)) |
                (1 << (CSharpParser.MINUS - 134)) |
                (1 << (CSharpParser.STAR - 134)) |
                (1 << (CSharpParser.AMP - 134)) |
                (1 << (CSharpParser.BANG - 134)) |
                (1 << (CSharpParser.TILDE - 134)) |
                (1 << (CSharpParser.OP_INC - 134)) |
                (1 << (CSharpParser.OP_DEC - 134)))) !==
              0)
        ) {
          this.state = 1199;
          this.expression();
        }

        this.state = 1202;
        this.match(CSharpParser.SEMICOLON);
        this.state = 1204;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BASE) |
                (1 << CSharpParser.BOOL) |
                (1 << CSharpParser.BY) |
                (1 << CSharpParser.BYTE) |
                (1 << CSharpParser.CHAR) |
                (1 << CSharpParser.CHECKED) |
                (1 << CSharpParser.DECIMAL) |
                (1 << CSharpParser.DEFAULT))) !==
              0) ||
          (((_la - 32) & ~0x1f) == 0 &&
            ((1 << (_la - 32)) &
              ((1 << (CSharpParser.DELEGATE - 32)) |
                (1 << (CSharpParser.DESCENDING - 32)) |
                (1 << (CSharpParser.DOUBLE - 32)) |
                (1 << (CSharpParser.DYNAMIC - 32)) |
                (1 << (CSharpParser.EQUALS - 32)) |
                (1 << (CSharpParser.FALSE - 32)) |
                (1 << (CSharpParser.FLOAT - 32)) |
                (1 << (CSharpParser.FROM - 32)) |
                (1 << (CSharpParser.GET - 32)) |
                (1 << (CSharpParser.GROUP - 32)) |
                (1 << (CSharpParser.INT - 32)) |
                (1 << (CSharpParser.INTO - 32)) |
                (1 << (CSharpParser.JOIN - 32)) |
                (1 << (CSharpParser.LET - 32)))) !==
              0) ||
          (((_la - 64) & ~0x1f) == 0 &&
            ((1 << (_la - 64)) &
              ((1 << (CSharpParser.LONG - 64)) |
                (1 << (CSharpParser.NAMEOF - 64)) |
                (1 << (CSharpParser.NEW - 64)) |
                (1 << (CSharpParser.NULL - 64)) |
                (1 << (CSharpParser.OBJECT - 64)) |
                (1 << (CSharpParser.ON - 64)) |
                (1 << (CSharpParser.ORDERBY - 64)) |
                (1 << (CSharpParser.PARTIAL - 64)) |
                (1 << (CSharpParser.REMOVE - 64)) |
                (1 << (CSharpParser.SBYTE - 64)) |
                (1 << (CSharpParser.SELECT - 64)) |
                (1 << (CSharpParser.SET - 64)) |
                (1 << (CSharpParser.SHORT - 64)) |
                (1 << (CSharpParser.SIZEOF - 64)) |
                (1 << (CSharpParser.STRING - 64)) |
                (1 << (CSharpParser.THIS - 64)))) !==
              0) ||
          (((_la - 97) & ~0x1f) == 0 &&
            ((1 << (_la - 97)) &
              ((1 << (CSharpParser.TRUE - 97)) |
                (1 << (CSharpParser.TYPEOF - 97)) |
                (1 << (CSharpParser.UINT - 97)) |
                (1 << (CSharpParser.ULONG - 97)) |
                (1 << (CSharpParser.UNCHECKED - 97)) |
                (1 << (CSharpParser.USHORT - 97)) |
                (1 << (CSharpParser.VAR - 97)) |
                (1 << (CSharpParser.WHEN - 97)) |
                (1 << (CSharpParser.WHERE - 97)) |
                (1 << (CSharpParser.YIELD - 97)) |
                (1 << (CSharpParser.IDENTIFIER - 97)) |
                (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
                (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.REAL_LITERAL - 97)) |
                (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
                (1 << (CSharpParser.REGULAR_STRING - 97)) |
                (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
                (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
                (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
                (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
              0) ||
          (((_la - 134) & ~0x1f) == 0 &&
            ((1 << (_la - 134)) &
              ((1 << (CSharpParser.PLUS - 134)) |
                (1 << (CSharpParser.MINUS - 134)) |
                (1 << (CSharpParser.STAR - 134)) |
                (1 << (CSharpParser.AMP - 134)) |
                (1 << (CSharpParser.BANG - 134)) |
                (1 << (CSharpParser.TILDE - 134)) |
                (1 << (CSharpParser.OP_INC - 134)) |
                (1 << (CSharpParser.OP_DEC - 134)))) !==
              0)
        ) {
          this.state = 1203;
          this.for_iterator();
        }

        this.state = 1206;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1207;
        this.embedded_statement();
        break;

      case 8:
        localctx = new ForeachStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 8);
        this.state = 1208;
        this.match(CSharpParser.FOREACH);
        this.state = 1209;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1210;
        this.local_variable_type();
        this.state = 1211;
        this.identifier();
        this.state = 1212;
        this.match(CSharpParser.IN);
        this.state = 1213;
        this.expression();
        this.state = 1214;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1215;
        this.embedded_statement();
        break;

      case 9:
        localctx = new BreakStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 9);
        this.state = 1217;
        this.match(CSharpParser.BREAK);
        this.state = 1218;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 10:
        localctx = new ContinueStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 10);
        this.state = 1219;
        this.match(CSharpParser.CONTINUE);
        this.state = 1220;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 11:
        localctx = new GotoStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 11);
        this.state = 1221;
        this.match(CSharpParser.GOTO);
        this.state = 1226;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.ADD:
          case CSharpParser.ALIAS:
          case CSharpParser.ARGLIST:
          case CSharpParser.ASCENDING:
          case CSharpParser.ASYNC:
          case CSharpParser.AWAIT:
          case CSharpParser.BY:
          case CSharpParser.DESCENDING:
          case CSharpParser.DYNAMIC:
          case CSharpParser.EQUALS:
          case CSharpParser.FROM:
          case CSharpParser.GET:
          case CSharpParser.GROUP:
          case CSharpParser.INTO:
          case CSharpParser.JOIN:
          case CSharpParser.LET:
          case CSharpParser.NAMEOF:
          case CSharpParser.ON:
          case CSharpParser.ORDERBY:
          case CSharpParser.PARTIAL:
          case CSharpParser.REMOVE:
          case CSharpParser.SELECT:
          case CSharpParser.SET:
          case CSharpParser.VAR:
          case CSharpParser.WHEN:
          case CSharpParser.WHERE:
          case CSharpParser.YIELD:
          case CSharpParser.IDENTIFIER:
            this.state = 1222;
            this.identifier();
            break;
          case CSharpParser.CASE:
            this.state = 1223;
            this.match(CSharpParser.CASE);
            this.state = 1224;
            this.expression();
            break;
          case CSharpParser.DEFAULT:
            this.state = 1225;
            this.match(CSharpParser.DEFAULT);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1228;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 12:
        localctx = new ReturnStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 12);
        this.state = 1229;
        this.match(CSharpParser.RETURN);
        this.state = 1231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BASE) |
                (1 << CSharpParser.BOOL) |
                (1 << CSharpParser.BY) |
                (1 << CSharpParser.BYTE) |
                (1 << CSharpParser.CHAR) |
                (1 << CSharpParser.CHECKED) |
                (1 << CSharpParser.DECIMAL) |
                (1 << CSharpParser.DEFAULT))) !==
              0) ||
          (((_la - 32) & ~0x1f) == 0 &&
            ((1 << (_la - 32)) &
              ((1 << (CSharpParser.DELEGATE - 32)) |
                (1 << (CSharpParser.DESCENDING - 32)) |
                (1 << (CSharpParser.DOUBLE - 32)) |
                (1 << (CSharpParser.DYNAMIC - 32)) |
                (1 << (CSharpParser.EQUALS - 32)) |
                (1 << (CSharpParser.FALSE - 32)) |
                (1 << (CSharpParser.FLOAT - 32)) |
                (1 << (CSharpParser.FROM - 32)) |
                (1 << (CSharpParser.GET - 32)) |
                (1 << (CSharpParser.GROUP - 32)) |
                (1 << (CSharpParser.INT - 32)) |
                (1 << (CSharpParser.INTO - 32)) |
                (1 << (CSharpParser.JOIN - 32)) |
                (1 << (CSharpParser.LET - 32)))) !==
              0) ||
          (((_la - 64) & ~0x1f) == 0 &&
            ((1 << (_la - 64)) &
              ((1 << (CSharpParser.LONG - 64)) |
                (1 << (CSharpParser.NAMEOF - 64)) |
                (1 << (CSharpParser.NEW - 64)) |
                (1 << (CSharpParser.NULL - 64)) |
                (1 << (CSharpParser.OBJECT - 64)) |
                (1 << (CSharpParser.ON - 64)) |
                (1 << (CSharpParser.ORDERBY - 64)) |
                (1 << (CSharpParser.PARTIAL - 64)) |
                (1 << (CSharpParser.REMOVE - 64)) |
                (1 << (CSharpParser.SBYTE - 64)) |
                (1 << (CSharpParser.SELECT - 64)) |
                (1 << (CSharpParser.SET - 64)) |
                (1 << (CSharpParser.SHORT - 64)) |
                (1 << (CSharpParser.SIZEOF - 64)) |
                (1 << (CSharpParser.STRING - 64)) |
                (1 << (CSharpParser.THIS - 64)))) !==
              0) ||
          (((_la - 97) & ~0x1f) == 0 &&
            ((1 << (_la - 97)) &
              ((1 << (CSharpParser.TRUE - 97)) |
                (1 << (CSharpParser.TYPEOF - 97)) |
                (1 << (CSharpParser.UINT - 97)) |
                (1 << (CSharpParser.ULONG - 97)) |
                (1 << (CSharpParser.UNCHECKED - 97)) |
                (1 << (CSharpParser.USHORT - 97)) |
                (1 << (CSharpParser.VAR - 97)) |
                (1 << (CSharpParser.WHEN - 97)) |
                (1 << (CSharpParser.WHERE - 97)) |
                (1 << (CSharpParser.YIELD - 97)) |
                (1 << (CSharpParser.IDENTIFIER - 97)) |
                (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
                (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.REAL_LITERAL - 97)) |
                (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
                (1 << (CSharpParser.REGULAR_STRING - 97)) |
                (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
                (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
                (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
                (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
              0) ||
          (((_la - 134) & ~0x1f) == 0 &&
            ((1 << (_la - 134)) &
              ((1 << (CSharpParser.PLUS - 134)) |
                (1 << (CSharpParser.MINUS - 134)) |
                (1 << (CSharpParser.STAR - 134)) |
                (1 << (CSharpParser.AMP - 134)) |
                (1 << (CSharpParser.BANG - 134)) |
                (1 << (CSharpParser.TILDE - 134)) |
                (1 << (CSharpParser.OP_INC - 134)) |
                (1 << (CSharpParser.OP_DEC - 134)))) !==
              0)
        ) {
          this.state = 1230;
          this.expression();
        }

        this.state = 1233;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 13:
        localctx = new ThrowStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 13);
        this.state = 1234;
        this.match(CSharpParser.THROW);
        this.state = 1236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BASE) |
                (1 << CSharpParser.BOOL) |
                (1 << CSharpParser.BY) |
                (1 << CSharpParser.BYTE) |
                (1 << CSharpParser.CHAR) |
                (1 << CSharpParser.CHECKED) |
                (1 << CSharpParser.DECIMAL) |
                (1 << CSharpParser.DEFAULT))) !==
              0) ||
          (((_la - 32) & ~0x1f) == 0 &&
            ((1 << (_la - 32)) &
              ((1 << (CSharpParser.DELEGATE - 32)) |
                (1 << (CSharpParser.DESCENDING - 32)) |
                (1 << (CSharpParser.DOUBLE - 32)) |
                (1 << (CSharpParser.DYNAMIC - 32)) |
                (1 << (CSharpParser.EQUALS - 32)) |
                (1 << (CSharpParser.FALSE - 32)) |
                (1 << (CSharpParser.FLOAT - 32)) |
                (1 << (CSharpParser.FROM - 32)) |
                (1 << (CSharpParser.GET - 32)) |
                (1 << (CSharpParser.GROUP - 32)) |
                (1 << (CSharpParser.INT - 32)) |
                (1 << (CSharpParser.INTO - 32)) |
                (1 << (CSharpParser.JOIN - 32)) |
                (1 << (CSharpParser.LET - 32)))) !==
              0) ||
          (((_la - 64) & ~0x1f) == 0 &&
            ((1 << (_la - 64)) &
              ((1 << (CSharpParser.LONG - 64)) |
                (1 << (CSharpParser.NAMEOF - 64)) |
                (1 << (CSharpParser.NEW - 64)) |
                (1 << (CSharpParser.NULL - 64)) |
                (1 << (CSharpParser.OBJECT - 64)) |
                (1 << (CSharpParser.ON - 64)) |
                (1 << (CSharpParser.ORDERBY - 64)) |
                (1 << (CSharpParser.PARTIAL - 64)) |
                (1 << (CSharpParser.REMOVE - 64)) |
                (1 << (CSharpParser.SBYTE - 64)) |
                (1 << (CSharpParser.SELECT - 64)) |
                (1 << (CSharpParser.SET - 64)) |
                (1 << (CSharpParser.SHORT - 64)) |
                (1 << (CSharpParser.SIZEOF - 64)) |
                (1 << (CSharpParser.STRING - 64)) |
                (1 << (CSharpParser.THIS - 64)))) !==
              0) ||
          (((_la - 97) & ~0x1f) == 0 &&
            ((1 << (_la - 97)) &
              ((1 << (CSharpParser.TRUE - 97)) |
                (1 << (CSharpParser.TYPEOF - 97)) |
                (1 << (CSharpParser.UINT - 97)) |
                (1 << (CSharpParser.ULONG - 97)) |
                (1 << (CSharpParser.UNCHECKED - 97)) |
                (1 << (CSharpParser.USHORT - 97)) |
                (1 << (CSharpParser.VAR - 97)) |
                (1 << (CSharpParser.WHEN - 97)) |
                (1 << (CSharpParser.WHERE - 97)) |
                (1 << (CSharpParser.YIELD - 97)) |
                (1 << (CSharpParser.IDENTIFIER - 97)) |
                (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
                (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
                (1 << (CSharpParser.REAL_LITERAL - 97)) |
                (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
                (1 << (CSharpParser.REGULAR_STRING - 97)) |
                (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
                (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
                (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
                (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
              0) ||
          (((_la - 134) & ~0x1f) == 0 &&
            ((1 << (_la - 134)) &
              ((1 << (CSharpParser.PLUS - 134)) |
                (1 << (CSharpParser.MINUS - 134)) |
                (1 << (CSharpParser.STAR - 134)) |
                (1 << (CSharpParser.AMP - 134)) |
                (1 << (CSharpParser.BANG - 134)) |
                (1 << (CSharpParser.TILDE - 134)) |
                (1 << (CSharpParser.OP_INC - 134)) |
                (1 << (CSharpParser.OP_DEC - 134)))) !==
              0)
        ) {
          this.state = 1235;
          this.expression();
        }

        this.state = 1238;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 14:
        localctx = new TryStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 14);
        this.state = 1239;
        this.match(CSharpParser.TRY);
        this.state = 1240;
        this.block();
        this.state = 1246;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.CATCH:
            this.state = 1241;
            this.catch_clauses();
            this.state = 1243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CSharpParser.FINALLY) {
              this.state = 1242;
              this.finally_clause();
            }

            break;
          case CSharpParser.FINALLY:
            this.state = 1245;
            this.finally_clause();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;

      case 15:
        localctx = new CheckedStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 15);
        this.state = 1248;
        this.match(CSharpParser.CHECKED);
        this.state = 1249;
        this.block();
        break;

      case 16:
        localctx = new UncheckedStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 16);
        this.state = 1250;
        this.match(CSharpParser.UNCHECKED);
        this.state = 1251;
        this.block();
        break;

      case 17:
        localctx = new LockStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 17);
        this.state = 1252;
        this.match(CSharpParser.LOCK);
        this.state = 1253;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1254;
        this.expression();
        this.state = 1255;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1256;
        this.embedded_statement();
        break;

      case 18:
        localctx = new UsingStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 18);
        this.state = 1258;
        this.match(CSharpParser.USING);
        this.state = 1259;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1260;
        this.resource_acquisition();
        this.state = 1261;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1262;
        this.embedded_statement();
        break;

      case 19:
        localctx = new YieldStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 19);
        this.state = 1264;
        this.match(CSharpParser.YIELD);
        this.state = 1268;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.RETURN:
            this.state = 1265;
            this.match(CSharpParser.RETURN);
            this.state = 1266;
            this.expression();
            break;
          case CSharpParser.BREAK:
            this.state = 1267;
            this.match(CSharpParser.BREAK);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1270;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 20:
        localctx = new UnsafeStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 20);
        this.state = 1271;
        this.match(CSharpParser.UNSAFE);
        this.state = 1272;
        this.block();
        break;

      case 21:
        localctx = new FixedStatementContext(this, localctx);
        this.enterOuterAlt(localctx, 21);
        this.state = 1273;
        this.match(CSharpParser.FIXED);
        this.state = 1274;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1275;
        this.pointer_type();
        this.state = 1276;
        this.fixed_pointer_declarators();
        this.state = 1277;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1278;
        this.embedded_statement();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BlockContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_block;
  return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

BlockContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

BlockContext.prototype.statement_list = function() {
  return this.getTypedRuleContext(Statement_listContext, 0);
};

BlockContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBlock(this);
  }
};

BlockContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBlock(this);
  }
};

CSharpParser.BlockContext = BlockContext;

CSharpParser.prototype.block = function() {
  var localctx = new BlockContext(this, this._ctx, this.state);
  this.enterRule(localctx, 150, CSharpParser.RULE_block);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1282;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 1284;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BREAK) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.CONST) |
            (1 << CSharpParser.CONTINUE) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DO - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FIXED - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FOR - 32)) |
            (1 << (CSharpParser.FOREACH - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GOTO - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.IF - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)) |
            (1 << (CSharpParser.LOCK - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.RETURN - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.SWITCH - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 96) & ~0x1f) == 0 &&
        ((1 << (_la - 96)) &
          ((1 << (CSharpParser.THROW - 96)) |
            (1 << (CSharpParser.TRUE - 96)) |
            (1 << (CSharpParser.TRY - 96)) |
            (1 << (CSharpParser.TYPEOF - 96)) |
            (1 << (CSharpParser.UINT - 96)) |
            (1 << (CSharpParser.ULONG - 96)) |
            (1 << (CSharpParser.UNCHECKED - 96)) |
            (1 << (CSharpParser.UNSAFE - 96)) |
            (1 << (CSharpParser.USHORT - 96)) |
            (1 << (CSharpParser.USING - 96)) |
            (1 << (CSharpParser.VAR - 96)) |
            (1 << (CSharpParser.VOID - 96)) |
            (1 << (CSharpParser.WHEN - 96)) |
            (1 << (CSharpParser.WHERE - 96)) |
            (1 << (CSharpParser.WHILE - 96)) |
            (1 << (CSharpParser.YIELD - 96)) |
            (1 << (CSharpParser.IDENTIFIER - 96)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 96)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 96)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 96)) |
            (1 << (CSharpParser.REAL_LITERAL - 96)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 96)) |
            (1 << (CSharpParser.REGULAR_STRING - 96)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 96)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 96)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 96)) |
            (1 << (CSharpParser.OPEN_BRACE - 96)))) !==
          0) ||
      (((_la - 128) & ~0x1f) == 0 &&
        ((1 << (_la - 128)) &
          ((1 << (CSharpParser.OPEN_PARENS - 128)) |
            (1 << (CSharpParser.SEMICOLON - 128)) |
            (1 << (CSharpParser.PLUS - 128)) |
            (1 << (CSharpParser.MINUS - 128)) |
            (1 << (CSharpParser.STAR - 128)) |
            (1 << (CSharpParser.AMP - 128)) |
            (1 << (CSharpParser.BANG - 128)) |
            (1 << (CSharpParser.TILDE - 128)) |
            (1 << (CSharpParser.OP_INC - 128)) |
            (1 << (CSharpParser.OP_DEC - 128)))) !==
          0)
    ) {
      this.state = 1283;
      this.statement_list();
    }

    this.state = 1286;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_variable_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_variable_declaration;
  return this;
}

Local_variable_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_variable_declarationContext.prototype.constructor = Local_variable_declarationContext;

Local_variable_declarationContext.prototype.local_variable_type = function() {
  return this.getTypedRuleContext(Local_variable_typeContext, 0);
};

Local_variable_declarationContext.prototype.local_variable_declarator = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Local_variable_declaratorContext);
  } else {
    return this.getTypedRuleContext(Local_variable_declaratorContext, i);
  }
};

Local_variable_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_variable_declaration(this);
  }
};

Local_variable_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_variable_declaration(this);
  }
};

CSharpParser.Local_variable_declarationContext = Local_variable_declarationContext;

CSharpParser.prototype.local_variable_declaration = function() {
  var localctx = new Local_variable_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 152, CSharpParser.RULE_local_variable_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1288;
    this.local_variable_type();
    this.state = 1289;
    this.local_variable_declarator();
    this.state = 1294;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1290;
      this.match(CSharpParser.COMMA);
      this.state = 1291;
      this.local_variable_declarator();
      this.state = 1296;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_variable_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_variable_type;
  return this;
}

Local_variable_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_variable_typeContext.prototype.constructor = Local_variable_typeContext;

Local_variable_typeContext.prototype.VAR = function() {
  return this.getToken(CSharpParser.VAR, 0);
};

Local_variable_typeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Local_variable_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_variable_type(this);
  }
};

Local_variable_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_variable_type(this);
  }
};

CSharpParser.Local_variable_typeContext = Local_variable_typeContext;

CSharpParser.prototype.local_variable_type = function() {
  var localctx = new Local_variable_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 154, CSharpParser.RULE_local_variable_type);
  try {
    this.state = 1299;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1297;
        this.match(CSharpParser.VAR);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1298;
        this.type();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_variable_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_variable_declarator;
  return this;
}

Local_variable_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_variable_declaratorContext.prototype.constructor = Local_variable_declaratorContext;

Local_variable_declaratorContext.prototype.local_variable_identifier = function() {
  return this.getTypedRuleContext(Local_variable_identifierContext, 0);
};

Local_variable_declaratorContext.prototype.local_variable_initializer = function() {
  return this.getTypedRuleContext(Local_variable_initializerContext, 0);
};

Local_variable_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_variable_declarator(this);
  }
};

Local_variable_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_variable_declarator(this);
  }
};

CSharpParser.Local_variable_declaratorContext = Local_variable_declaratorContext;

CSharpParser.prototype.local_variable_declarator = function() {
  var localctx = new Local_variable_declaratorContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 156, CSharpParser.RULE_local_variable_declarator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1301;
    this.local_variable_identifier();
    this.state = 1304;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.ASSIGNMENT) {
      this.state = 1302;
      this.match(CSharpParser.ASSIGNMENT);
      this.state = 1303;
      this.local_variable_initializer();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_variable_identifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_variable_identifier;
  return this;
}

Local_variable_identifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_variable_identifierContext.prototype.constructor = Local_variable_identifierContext;

Local_variable_identifierContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Local_variable_identifierContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Local_variable_identifierContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Local_variable_identifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_variable_identifier(this);
  }
};

Local_variable_identifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_variable_identifier(this);
  }
};

CSharpParser.Local_variable_identifierContext = Local_variable_identifierContext;

CSharpParser.prototype.local_variable_identifier = function() {
  var localctx = new Local_variable_identifierContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 158, CSharpParser.RULE_local_variable_identifier);
  var _la = 0; // Token type
  try {
    this.state = 1318;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 1);
        this.state = 1306;
        this.identifier();
        break;
      case CSharpParser.OPEN_PARENS:
        this.enterOuterAlt(localctx, 2);
        this.state = 1307;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1308;
        this.identifier();
        this.state = 1313;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CSharpParser.COMMA) {
          this.state = 1309;
          this.match(CSharpParser.COMMA);
          this.state = 1310;
          this.identifier();
          this.state = 1315;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 1316;
        this.match(CSharpParser.CLOSE_PARENS);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_variable_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_variable_initializer;
  return this;
}

Local_variable_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_variable_initializerContext.prototype.constructor = Local_variable_initializerContext;

Local_variable_initializerContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Local_variable_initializerContext.prototype.array_initializer = function() {
  return this.getTypedRuleContext(Array_initializerContext, 0);
};

Local_variable_initializerContext.prototype.local_variable_initializer_unsafe = function() {
  return this.getTypedRuleContext(Local_variable_initializer_unsafeContext, 0);
};

Local_variable_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_variable_initializer(this);
  }
};

Local_variable_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_variable_initializer(this);
  }
};

CSharpParser.Local_variable_initializerContext = Local_variable_initializerContext;

CSharpParser.prototype.local_variable_initializer = function() {
  var localctx = new Local_variable_initializerContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 160, CSharpParser.RULE_local_variable_initializer);
  try {
    this.state = 1323;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 1320;
        this.expression();
        break;
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 1321;
        this.array_initializer();
        break;
      case CSharpParser.STACKALLOC:
        this.enterOuterAlt(localctx, 3);
        this.state = 1322;
        this.local_variable_initializer_unsafe();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_constant_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_constant_declaration;
  return this;
}

Local_constant_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_constant_declarationContext.prototype.constructor = Local_constant_declarationContext;

Local_constant_declarationContext.prototype.CONST = function() {
  return this.getToken(CSharpParser.CONST, 0);
};

Local_constant_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Local_constant_declarationContext.prototype.constant_declarators = function() {
  return this.getTypedRuleContext(Constant_declaratorsContext, 0);
};

Local_constant_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_constant_declaration(this);
  }
};

Local_constant_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_constant_declaration(this);
  }
};

CSharpParser.Local_constant_declarationContext = Local_constant_declarationContext;

CSharpParser.prototype.local_constant_declaration = function() {
  var localctx = new Local_constant_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 162, CSharpParser.RULE_local_constant_declaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1325;
    this.match(CSharpParser.CONST);
    this.state = 1326;
    this.type();
    this.state = 1327;
    this.constant_declarators();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function If_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_if_body;
  return this;
}

If_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_bodyContext.prototype.constructor = If_bodyContext;

If_bodyContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

If_bodyContext.prototype.simple_embedded_statement = function() {
  return this.getTypedRuleContext(Simple_embedded_statementContext, 0);
};

If_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIf_body(this);
  }
};

If_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIf_body(this);
  }
};

CSharpParser.If_bodyContext = If_bodyContext;

CSharpParser.prototype.if_body = function() {
  var localctx = new If_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 164, CSharpParser.RULE_if_body);
  try {
    this.state = 1331;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1329;
        this.block();
        break;
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BREAK:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.CONTINUE:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DO:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FIXED:
      case CSharpParser.FLOAT:
      case CSharpParser.FOR:
      case CSharpParser.FOREACH:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GOTO:
      case CSharpParser.GROUP:
      case CSharpParser.IF:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LOCK:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.RETURN:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.SWITCH:
      case CSharpParser.THIS:
      case CSharpParser.THROW:
      case CSharpParser.TRUE:
      case CSharpParser.TRY:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.UNSAFE:
      case CSharpParser.USHORT:
      case CSharpParser.USING:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.WHILE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.SEMICOLON:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 2);
        this.state = 1330;
        this.simple_embedded_statement();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Switch_sectionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_switch_section;
  return this;
}

Switch_sectionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Switch_sectionContext.prototype.constructor = Switch_sectionContext;

Switch_sectionContext.prototype.statement_list = function() {
  return this.getTypedRuleContext(Statement_listContext, 0);
};

Switch_sectionContext.prototype.switch_label = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Switch_labelContext);
  } else {
    return this.getTypedRuleContext(Switch_labelContext, i);
  }
};

Switch_sectionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSwitch_section(this);
  }
};

Switch_sectionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSwitch_section(this);
  }
};

CSharpParser.Switch_sectionContext = Switch_sectionContext;

CSharpParser.prototype.switch_section = function() {
  var localctx = new Switch_sectionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 166, CSharpParser.RULE_switch_section);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1334;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 1333;
          this.switch_label();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1336;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
    this.state = 1338;
    this.statement_list();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Switch_labelContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_switch_label;
  return this;
}

Switch_labelContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Switch_labelContext.prototype.constructor = Switch_labelContext;

Switch_labelContext.prototype.CASE = function() {
  return this.getToken(CSharpParser.CASE, 0);
};

Switch_labelContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Switch_labelContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Switch_labelContext.prototype.switch_filter = function() {
  return this.getTypedRuleContext(Switch_filterContext, 0);
};

Switch_labelContext.prototype.DEFAULT = function() {
  return this.getToken(CSharpParser.DEFAULT, 0);
};

Switch_labelContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSwitch_label(this);
  }
};

Switch_labelContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSwitch_label(this);
  }
};

CSharpParser.Switch_labelContext = Switch_labelContext;

CSharpParser.prototype.switch_label = function() {
  var localctx = new Switch_labelContext(this, this._ctx, this.state);
  this.enterRule(localctx, 168, CSharpParser.RULE_switch_label);
  var _la = 0; // Token type
  try {
    this.state = 1352;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.CASE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1340;
        this.match(CSharpParser.CASE);
        this.state = 1342;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
        if (la_ === 1) {
          this.state = 1341;
          this.type();
        }
        this.state = 1344;
        this.expression();
        this.state = 1346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.WHEN) {
          this.state = 1345;
          this.switch_filter();
        }

        this.state = 1348;
        this.match(CSharpParser.COLON);
        break;
      case CSharpParser.DEFAULT:
        this.enterOuterAlt(localctx, 2);
        this.state = 1350;
        this.match(CSharpParser.DEFAULT);
        this.state = 1351;
        this.match(CSharpParser.COLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Switch_filterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_switch_filter;
  return this;
}

Switch_filterContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Switch_filterContext.prototype.constructor = Switch_filterContext;

Switch_filterContext.prototype.WHEN = function() {
  return this.getToken(CSharpParser.WHEN, 0);
};

Switch_filterContext.prototype.conditional_expression = function() {
  return this.getTypedRuleContext(Conditional_expressionContext, 0);
};

Switch_filterContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSwitch_filter(this);
  }
};

Switch_filterContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSwitch_filter(this);
  }
};

CSharpParser.Switch_filterContext = Switch_filterContext;

CSharpParser.prototype.switch_filter = function() {
  var localctx = new Switch_filterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 170, CSharpParser.RULE_switch_filter);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1354;
    this.match(CSharpParser.WHEN);
    this.state = 1355;
    this.conditional_expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Statement_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_statement_list;
  return this;
}

Statement_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Statement_listContext.prototype.constructor = Statement_listContext;

Statement_listContext.prototype.statement = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(StatementContext);
  } else {
    return this.getTypedRuleContext(StatementContext, i);
  }
};

Statement_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterStatement_list(this);
  }
};

Statement_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitStatement_list(this);
  }
};

CSharpParser.Statement_listContext = Statement_listContext;

CSharpParser.prototype.statement_list = function() {
  var localctx = new Statement_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 172, CSharpParser.RULE_statement_list);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1358;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 1357;
          this.statement();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1360;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 132, this._ctx);
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function For_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_for_initializer;
  return this;
}

For_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
For_initializerContext.prototype.constructor = For_initializerContext;

For_initializerContext.prototype.local_variable_declaration = function() {
  return this.getTypedRuleContext(Local_variable_declarationContext, 0);
};

For_initializerContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

For_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFor_initializer(this);
  }
};

For_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFor_initializer(this);
  }
};

CSharpParser.For_initializerContext = For_initializerContext;

CSharpParser.prototype.for_initializer = function() {
  var localctx = new For_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 174, CSharpParser.RULE_for_initializer);
  var _la = 0; // Token type
  try {
    this.state = 1371;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this.local_variable_declaration();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1363;
        this.expression();
        this.state = 1368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CSharpParser.COMMA) {
          this.state = 1364;
          this.match(CSharpParser.COMMA);
          this.state = 1365;
          this.expression();
          this.state = 1370;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function For_iteratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_for_iterator;
  return this;
}

For_iteratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
For_iteratorContext.prototype.constructor = For_iteratorContext;

For_iteratorContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

For_iteratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFor_iterator(this);
  }
};

For_iteratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFor_iterator(this);
  }
};

CSharpParser.For_iteratorContext = For_iteratorContext;

CSharpParser.prototype.for_iterator = function() {
  var localctx = new For_iteratorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 176, CSharpParser.RULE_for_iterator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1373;
    this.expression();
    this.state = 1378;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1374;
      this.match(CSharpParser.COMMA);
      this.state = 1375;
      this.expression();
      this.state = 1380;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Catch_clausesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_catch_clauses;
  return this;
}

Catch_clausesContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Catch_clausesContext.prototype.constructor = Catch_clausesContext;

Catch_clausesContext.prototype.specific_catch_clause = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Specific_catch_clauseContext);
  } else {
    return this.getTypedRuleContext(Specific_catch_clauseContext, i);
  }
};

Catch_clausesContext.prototype.general_catch_clause = function() {
  return this.getTypedRuleContext(General_catch_clauseContext, 0);
};

Catch_clausesContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCatch_clauses(this);
  }
};

Catch_clausesContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCatch_clauses(this);
  }
};

CSharpParser.Catch_clausesContext = Catch_clausesContext;

CSharpParser.prototype.catch_clauses = function() {
  var localctx = new Catch_clausesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 178, CSharpParser.RULE_catch_clauses);
  var _la = 0; // Token type
  try {
    this.state = 1392;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1381;
        this.specific_catch_clause();
        this.state = 1385;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 136, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 1382;
            this.specific_catch_clause();
          }
          this.state = 1387;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 136, this._ctx);
        }

        this.state = 1389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.CATCH) {
          this.state = 1388;
          this.general_catch_clause();
        }

        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1391;
        this.general_catch_clause();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Specific_catch_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_specific_catch_clause;
  return this;
}

Specific_catch_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Specific_catch_clauseContext.prototype.constructor = Specific_catch_clauseContext;

Specific_catch_clauseContext.prototype.CATCH = function() {
  return this.getToken(CSharpParser.CATCH, 0);
};

Specific_catch_clauseContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Specific_catch_clauseContext.prototype.class_type = function() {
  return this.getTypedRuleContext(Class_typeContext, 0);
};

Specific_catch_clauseContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Specific_catch_clauseContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Specific_catch_clauseContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Specific_catch_clauseContext.prototype.exception_filter = function() {
  return this.getTypedRuleContext(Exception_filterContext, 0);
};

Specific_catch_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSpecific_catch_clause(this);
  }
};

Specific_catch_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSpecific_catch_clause(this);
  }
};

CSharpParser.Specific_catch_clauseContext = Specific_catch_clauseContext;

CSharpParser.prototype.specific_catch_clause = function() {
  var localctx = new Specific_catch_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 180, CSharpParser.RULE_specific_catch_clause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1394;
    this.match(CSharpParser.CATCH);
    this.state = 1395;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 1396;
    this.class_type();
    this.state = 1398;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BY))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)))) !==
          0) ||
      (((_la - 106) & ~0x1f) == 0 &&
        ((1 << (_la - 106)) &
          ((1 << (CSharpParser.VAR - 106)) |
            (1 << (CSharpParser.WHEN - 106)) |
            (1 << (CSharpParser.WHERE - 106)) |
            (1 << (CSharpParser.YIELD - 106)) |
            (1 << (CSharpParser.IDENTIFIER - 106)))) !==
          0)
    ) {
      this.state = 1397;
      this.identifier();
    }

    this.state = 1400;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 1402;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHEN) {
      this.state = 1401;
      this.exception_filter();
    }

    this.state = 1404;
    this.block();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function General_catch_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_general_catch_clause;
  return this;
}

General_catch_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
General_catch_clauseContext.prototype.constructor = General_catch_clauseContext;

General_catch_clauseContext.prototype.CATCH = function() {
  return this.getToken(CSharpParser.CATCH, 0);
};

General_catch_clauseContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

General_catch_clauseContext.prototype.exception_filter = function() {
  return this.getTypedRuleContext(Exception_filterContext, 0);
};

General_catch_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterGeneral_catch_clause(this);
  }
};

General_catch_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitGeneral_catch_clause(this);
  }
};

CSharpParser.General_catch_clauseContext = General_catch_clauseContext;

CSharpParser.prototype.general_catch_clause = function() {
  var localctx = new General_catch_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 182, CSharpParser.RULE_general_catch_clause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1406;
    this.match(CSharpParser.CATCH);
    this.state = 1408;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHEN) {
      this.state = 1407;
      this.exception_filter();
    }

    this.state = 1410;
    this.block();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Exception_filterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_exception_filter;
  return this;
}

Exception_filterContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Exception_filterContext.prototype.constructor = Exception_filterContext;

Exception_filterContext.prototype.WHEN = function() {
  return this.getToken(CSharpParser.WHEN, 0);
};

Exception_filterContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Exception_filterContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Exception_filterContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Exception_filterContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterException_filter(this);
  }
};

Exception_filterContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitException_filter(this);
  }
};

CSharpParser.Exception_filterContext = Exception_filterContext;

CSharpParser.prototype.exception_filter = function() {
  var localctx = new Exception_filterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 184, CSharpParser.RULE_exception_filter);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1412;
    this.match(CSharpParser.WHEN);
    this.state = 1413;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 1414;
    this.expression();
    this.state = 1415;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Finally_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_finally_clause;
  return this;
}

Finally_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Finally_clauseContext.prototype.constructor = Finally_clauseContext;

Finally_clauseContext.prototype.FINALLY = function() {
  return this.getToken(CSharpParser.FINALLY, 0);
};

Finally_clauseContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Finally_clauseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFinally_clause(this);
  }
};

Finally_clauseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFinally_clause(this);
  }
};

CSharpParser.Finally_clauseContext = Finally_clauseContext;

CSharpParser.prototype.finally_clause = function() {
  var localctx = new Finally_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 186, CSharpParser.RULE_finally_clause);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1417;
    this.match(CSharpParser.FINALLY);
    this.state = 1418;
    this.block();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Resource_acquisitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_resource_acquisition;
  return this;
}

Resource_acquisitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Resource_acquisitionContext.prototype.constructor = Resource_acquisitionContext;

Resource_acquisitionContext.prototype.local_variable_declaration = function() {
  return this.getTypedRuleContext(Local_variable_declarationContext, 0);
};

Resource_acquisitionContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Resource_acquisitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterResource_acquisition(this);
  }
};

Resource_acquisitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitResource_acquisition(this);
  }
};

CSharpParser.Resource_acquisitionContext = Resource_acquisitionContext;

CSharpParser.prototype.resource_acquisition = function() {
  var localctx = new Resource_acquisitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 188, CSharpParser.RULE_resource_acquisition);
  try {
    this.state = 1422;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1420;
        this.local_variable_declaration();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1421;
        this.expression();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Namespace_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_namespace_declaration;
  this.qi = null; // Qualified_identifierContext
  return this;
}

Namespace_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Namespace_declarationContext.prototype.constructor = Namespace_declarationContext;

Namespace_declarationContext.prototype.NAMESPACE = function() {
  return this.getToken(CSharpParser.NAMESPACE, 0);
};

Namespace_declarationContext.prototype.namespace_body = function() {
  return this.getTypedRuleContext(Namespace_bodyContext, 0);
};

Namespace_declarationContext.prototype.qualified_identifier = function() {
  return this.getTypedRuleContext(Qualified_identifierContext, 0);
};

Namespace_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNamespace_declaration(this);
  }
};

Namespace_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNamespace_declaration(this);
  }
};

CSharpParser.Namespace_declarationContext = Namespace_declarationContext;

CSharpParser.prototype.namespace_declaration = function() {
  var localctx = new Namespace_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 190, CSharpParser.RULE_namespace_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1424;
    this.match(CSharpParser.NAMESPACE);
    this.state = 1425;
    localctx.qi = this.qualified_identifier();
    this.state = 1426;
    this.namespace_body();
    this.state = 1428;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.SEMICOLON) {
      this.state = 1427;
      this.match(CSharpParser.SEMICOLON);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Qualified_identifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_qualified_identifier;
  return this;
}

Qualified_identifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Qualified_identifierContext.prototype.constructor = Qualified_identifierContext;

Qualified_identifierContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Qualified_identifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQualified_identifier(this);
  }
};

Qualified_identifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQualified_identifier(this);
  }
};

CSharpParser.Qualified_identifierContext = Qualified_identifierContext;

CSharpParser.prototype.qualified_identifier = function() {
  var localctx = new Qualified_identifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 192, CSharpParser.RULE_qualified_identifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1430;
    this.identifier();
    this.state = 1435;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.DOT) {
      this.state = 1431;
      this.match(CSharpParser.DOT);
      this.state = 1432;
      this.identifier();
      this.state = 1437;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Namespace_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_namespace_body;
  return this;
}

Namespace_bodyContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Namespace_bodyContext.prototype.constructor = Namespace_bodyContext;

Namespace_bodyContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Namespace_bodyContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Namespace_bodyContext.prototype.extern_alias_directives = function() {
  return this.getTypedRuleContext(Extern_alias_directivesContext, 0);
};

Namespace_bodyContext.prototype.using_directives = function() {
  return this.getTypedRuleContext(Using_directivesContext, 0);
};

Namespace_bodyContext.prototype.namespace_member_declarations = function() {
  return this.getTypedRuleContext(Namespace_member_declarationsContext, 0);
};

Namespace_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNamespace_body(this);
  }
};

Namespace_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNamespace_body(this);
  }
};

CSharpParser.Namespace_bodyContext = Namespace_bodyContext;

CSharpParser.prototype.namespace_body = function() {
  var localctx = new Namespace_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 194, CSharpParser.RULE_namespace_body);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1438;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 1440;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
    if (la_ === 1) {
      this.state = 1439;
      this.extern_alias_directives();
    }
    this.state = 1443;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.USING) {
      this.state = 1442;
      this.using_directives();
    }

    this.state = 1446;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ABSTRACT) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.CLASS))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.ENUM - 32)) |
            (1 << (CSharpParser.EXTERN - 32)) |
            (1 << (CSharpParser.INTERFACE - 32)) |
            (1 << (CSharpParser.INTERNAL - 32)))) !==
          0) ||
      (((_la - 66) & ~0x1f) == 0 &&
        ((1 << (_la - 66)) &
          ((1 << (CSharpParser.NAMESPACE - 66)) |
            (1 << (CSharpParser.NEW - 66)) |
            (1 << (CSharpParser.OVERRIDE - 66)) |
            (1 << (CSharpParser.PARTIAL - 66)) |
            (1 << (CSharpParser.PRIVATE - 66)) |
            (1 << (CSharpParser.PROTECTED - 66)) |
            (1 << (CSharpParser.PUBLIC - 66)) |
            (1 << (CSharpParser.READONLY - 66)) |
            (1 << (CSharpParser.SEALED - 66)) |
            (1 << (CSharpParser.STATIC - 66)) |
            (1 << (CSharpParser.STRUCT - 66)))) !==
          0) ||
      (((_la - 103) & ~0x1f) == 0 &&
        ((1 << (_la - 103)) &
          ((1 << (CSharpParser.UNSAFE - 103)) |
            (1 << (CSharpParser.VIRTUAL - 103)) |
            (1 << (CSharpParser.VOLATILE - 103)) |
            (1 << (CSharpParser.OPEN_BRACKET - 103)))) !==
          0)
    ) {
      this.state = 1445;
      this.namespace_member_declarations();
    }

    this.state = 1448;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Extern_alias_directivesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_extern_alias_directives;
  return this;
}

Extern_alias_directivesContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Extern_alias_directivesContext.prototype.constructor = Extern_alias_directivesContext;

Extern_alias_directivesContext.prototype.extern_alias_directive = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Extern_alias_directiveContext);
  } else {
    return this.getTypedRuleContext(Extern_alias_directiveContext, i);
  }
};

Extern_alias_directivesContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExtern_alias_directives(this);
  }
};

Extern_alias_directivesContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExtern_alias_directives(this);
  }
};

CSharpParser.Extern_alias_directivesContext = Extern_alias_directivesContext;

CSharpParser.prototype.extern_alias_directives = function() {
  var localctx = new Extern_alias_directivesContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 196, CSharpParser.RULE_extern_alias_directives);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1451;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 1450;
          this.extern_alias_directive();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1453;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 148, this._ctx);
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Extern_alias_directiveContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_extern_alias_directive;
  return this;
}

Extern_alias_directiveContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Extern_alias_directiveContext.prototype.constructor = Extern_alias_directiveContext;

Extern_alias_directiveContext.prototype.EXTERN = function() {
  return this.getToken(CSharpParser.EXTERN, 0);
};

Extern_alias_directiveContext.prototype.ALIAS = function() {
  return this.getToken(CSharpParser.ALIAS, 0);
};

Extern_alias_directiveContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Extern_alias_directiveContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterExtern_alias_directive(this);
  }
};

Extern_alias_directiveContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitExtern_alias_directive(this);
  }
};

CSharpParser.Extern_alias_directiveContext = Extern_alias_directiveContext;

CSharpParser.prototype.extern_alias_directive = function() {
  var localctx = new Extern_alias_directiveContext(this, this._ctx, this.state);
  this.enterRule(localctx, 198, CSharpParser.RULE_extern_alias_directive);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1455;
    this.match(CSharpParser.EXTERN);
    this.state = 1456;
    this.match(CSharpParser.ALIAS);
    this.state = 1457;
    this.identifier();
    this.state = 1458;
    this.match(CSharpParser.SEMICOLON);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Using_directivesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_using_directives;
  return this;
}

Using_directivesContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Using_directivesContext.prototype.constructor = Using_directivesContext;

Using_directivesContext.prototype.using_directive = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Using_directiveContext);
  } else {
    return this.getTypedRuleContext(Using_directiveContext, i);
  }
};

Using_directivesContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUsing_directives(this);
  }
};

Using_directivesContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUsing_directives(this);
  }
};

CSharpParser.Using_directivesContext = Using_directivesContext;

CSharpParser.prototype.using_directives = function() {
  var localctx = new Using_directivesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 200, CSharpParser.RULE_using_directives);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1461;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 1460;
      this.using_directive();
      this.state = 1463;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (_la === CSharpParser.USING);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Using_directiveContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_using_directive;
  return this;
}

Using_directiveContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Using_directiveContext.prototype.constructor = Using_directiveContext;

Using_directiveContext.prototype.copyFrom = function(ctx) {
  antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UsingAliasDirectiveContext(parser, ctx) {
  Using_directiveContext.call(this, parser);
  Using_directiveContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UsingAliasDirectiveContext.prototype = Object.create(
  Using_directiveContext.prototype
);
UsingAliasDirectiveContext.prototype.constructor = UsingAliasDirectiveContext;

CSharpParser.UsingAliasDirectiveContext = UsingAliasDirectiveContext;

UsingAliasDirectiveContext.prototype.USING = function() {
  return this.getToken(CSharpParser.USING, 0);
};

UsingAliasDirectiveContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

UsingAliasDirectiveContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};
UsingAliasDirectiveContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUsingAliasDirective(this);
  }
};

UsingAliasDirectiveContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUsingAliasDirective(this);
  }
};

function UsingNamespaceDirectiveContext(parser, ctx) {
  Using_directiveContext.call(this, parser);
  Using_directiveContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UsingNamespaceDirectiveContext.prototype = Object.create(
  Using_directiveContext.prototype
);
UsingNamespaceDirectiveContext.prototype.constructor = UsingNamespaceDirectiveContext;

CSharpParser.UsingNamespaceDirectiveContext = UsingNamespaceDirectiveContext;

UsingNamespaceDirectiveContext.prototype.USING = function() {
  return this.getToken(CSharpParser.USING, 0);
};

UsingNamespaceDirectiveContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};
UsingNamespaceDirectiveContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUsingNamespaceDirective(this);
  }
};

UsingNamespaceDirectiveContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUsingNamespaceDirective(this);
  }
};

function UsingStaticDirectiveContext(parser, ctx) {
  Using_directiveContext.call(this, parser);
  Using_directiveContext.prototype.copyFrom.call(this, ctx);
  return this;
}

UsingStaticDirectiveContext.prototype = Object.create(
  Using_directiveContext.prototype
);
UsingStaticDirectiveContext.prototype.constructor = UsingStaticDirectiveContext;

CSharpParser.UsingStaticDirectiveContext = UsingStaticDirectiveContext;

UsingStaticDirectiveContext.prototype.USING = function() {
  return this.getToken(CSharpParser.USING, 0);
};

UsingStaticDirectiveContext.prototype.STATIC = function() {
  return this.getToken(CSharpParser.STATIC, 0);
};

UsingStaticDirectiveContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};
UsingStaticDirectiveContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterUsingStaticDirective(this);
  }
};

UsingStaticDirectiveContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitUsingStaticDirective(this);
  }
};

CSharpParser.Using_directiveContext = Using_directiveContext;

CSharpParser.prototype.using_directive = function() {
  var localctx = new Using_directiveContext(this, this._ctx, this.state);
  this.enterRule(localctx, 202, CSharpParser.RULE_using_directive);
  try {
    this.state = 1480;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
    switch (la_) {
      case 1:
        localctx = new UsingAliasDirectiveContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1465;
        this.match(CSharpParser.USING);
        this.state = 1466;
        this.identifier();
        this.state = 1467;
        this.match(CSharpParser.ASSIGNMENT);
        this.state = 1468;
        this.namespace_or_type_name();
        this.state = 1469;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 2:
        localctx = new UsingNamespaceDirectiveContext(this, localctx);
        this.enterOuterAlt(localctx, 2);
        this.state = 1471;
        this.match(CSharpParser.USING);
        this.state = 1472;
        this.namespace_or_type_name();
        this.state = 1473;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 3:
        localctx = new UsingStaticDirectiveContext(this, localctx);
        this.enterOuterAlt(localctx, 3);
        this.state = 1475;
        this.match(CSharpParser.USING);
        this.state = 1476;
        this.match(CSharpParser.STATIC);
        this.state = 1477;
        this.namespace_or_type_name();
        this.state = 1478;
        this.match(CSharpParser.SEMICOLON);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Namespace_member_declarationsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_namespace_member_declarations;
  return this;
}

Namespace_member_declarationsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Namespace_member_declarationsContext.prototype.constructor = Namespace_member_declarationsContext;

Namespace_member_declarationsContext.prototype.namespace_member_declaration = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Namespace_member_declarationContext);
  } else {
    return this.getTypedRuleContext(Namespace_member_declarationContext, i);
  }
};

Namespace_member_declarationsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNamespace_member_declarations(this);
  }
};

Namespace_member_declarationsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNamespace_member_declarations(this);
  }
};

CSharpParser.Namespace_member_declarationsContext = Namespace_member_declarationsContext;

CSharpParser.prototype.namespace_member_declarations = function() {
  var localctx = new Namespace_member_declarationsContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    204,
    CSharpParser.RULE_namespace_member_declarations
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1483;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 1482;
      this.namespace_member_declaration();
      this.state = 1485;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ABSTRACT) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.CLASS))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.ENUM - 32)) |
            (1 << (CSharpParser.EXTERN - 32)) |
            (1 << (CSharpParser.INTERFACE - 32)) |
            (1 << (CSharpParser.INTERNAL - 32)))) !==
          0) ||
      (((_la - 66) & ~0x1f) == 0 &&
        ((1 << (_la - 66)) &
          ((1 << (CSharpParser.NAMESPACE - 66)) |
            (1 << (CSharpParser.NEW - 66)) |
            (1 << (CSharpParser.OVERRIDE - 66)) |
            (1 << (CSharpParser.PARTIAL - 66)) |
            (1 << (CSharpParser.PRIVATE - 66)) |
            (1 << (CSharpParser.PROTECTED - 66)) |
            (1 << (CSharpParser.PUBLIC - 66)) |
            (1 << (CSharpParser.READONLY - 66)) |
            (1 << (CSharpParser.SEALED - 66)) |
            (1 << (CSharpParser.STATIC - 66)) |
            (1 << (CSharpParser.STRUCT - 66)))) !==
          0) ||
      (((_la - 103) & ~0x1f) == 0 &&
        ((1 << (_la - 103)) &
          ((1 << (CSharpParser.UNSAFE - 103)) |
            (1 << (CSharpParser.VIRTUAL - 103)) |
            (1 << (CSharpParser.VOLATILE - 103)) |
            (1 << (CSharpParser.OPEN_BRACKET - 103)))) !==
          0)
    );
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Namespace_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_namespace_member_declaration;
  return this;
}

Namespace_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Namespace_member_declarationContext.prototype.constructor = Namespace_member_declarationContext;

Namespace_member_declarationContext.prototype.namespace_declaration = function() {
  return this.getTypedRuleContext(Namespace_declarationContext, 0);
};

Namespace_member_declarationContext.prototype.type_declaration = function() {
  return this.getTypedRuleContext(Type_declarationContext, 0);
};

Namespace_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterNamespace_member_declaration(this);
  }
};

Namespace_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitNamespace_member_declaration(this);
  }
};

CSharpParser.Namespace_member_declarationContext = Namespace_member_declarationContext;

CSharpParser.prototype.namespace_member_declaration = function() {
  var localctx = new Namespace_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 206, CSharpParser.RULE_namespace_member_declaration);
  try {
    this.state = 1489;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.NAMESPACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1487;
        this.namespace_declaration();
        break;
      case CSharpParser.ABSTRACT:
      case CSharpParser.ASYNC:
      case CSharpParser.CLASS:
      case CSharpParser.DELEGATE:
      case CSharpParser.ENUM:
      case CSharpParser.EXTERN:
      case CSharpParser.INTERFACE:
      case CSharpParser.INTERNAL:
      case CSharpParser.NEW:
      case CSharpParser.OVERRIDE:
      case CSharpParser.PARTIAL:
      case CSharpParser.PRIVATE:
      case CSharpParser.PROTECTED:
      case CSharpParser.PUBLIC:
      case CSharpParser.READONLY:
      case CSharpParser.SEALED:
      case CSharpParser.STATIC:
      case CSharpParser.STRUCT:
      case CSharpParser.UNSAFE:
      case CSharpParser.VIRTUAL:
      case CSharpParser.VOLATILE:
      case CSharpParser.OPEN_BRACKET:
        this.enterOuterAlt(localctx, 2);
        this.state = 1488;
        this.type_declaration();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_declaration;
  return this;
}

Type_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_declarationContext.prototype.constructor = Type_declarationContext;

Type_declarationContext.prototype.class_definition = function() {
  return this.getTypedRuleContext(Class_definitionContext, 0);
};

Type_declarationContext.prototype.struct_definition = function() {
  return this.getTypedRuleContext(Struct_definitionContext, 0);
};

Type_declarationContext.prototype.interface_definition = function() {
  return this.getTypedRuleContext(Interface_definitionContext, 0);
};

Type_declarationContext.prototype.enum_definition = function() {
  return this.getTypedRuleContext(Enum_definitionContext, 0);
};

Type_declarationContext.prototype.delegate_definition = function() {
  return this.getTypedRuleContext(Delegate_definitionContext, 0);
};

Type_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Type_declarationContext.prototype.all_member_modifiers = function() {
  return this.getTypedRuleContext(All_member_modifiersContext, 0);
};

Type_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_declaration(this);
  }
};

Type_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_declaration(this);
  }
};

CSharpParser.Type_declarationContext = Type_declarationContext;

CSharpParser.prototype.type_declaration = function() {
  var localctx = new Type_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 208, CSharpParser.RULE_type_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1492;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1491;
      this.attributes();
    }

    this.state = 1495;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      _la === CSharpParser.ABSTRACT ||
      _la === CSharpParser.ASYNC ||
      (((_la - 42) & ~0x1f) == 0 &&
        ((1 << (_la - 42)) &
          ((1 << (CSharpParser.EXTERN - 42)) |
            (1 << (CSharpParser.INTERNAL - 42)) |
            (1 << (CSharpParser.NEW - 42)))) !==
          0) ||
      (((_la - 74) & ~0x1f) == 0 &&
        ((1 << (_la - 74)) &
          ((1 << (CSharpParser.OVERRIDE - 74)) |
            (1 << (CSharpParser.PARTIAL - 74)) |
            (1 << (CSharpParser.PRIVATE - 74)) |
            (1 << (CSharpParser.PROTECTED - 74)) |
            (1 << (CSharpParser.PUBLIC - 74)) |
            (1 << (CSharpParser.READONLY - 74)) |
            (1 << (CSharpParser.SEALED - 74)) |
            (1 << (CSharpParser.STATIC - 74)) |
            (1 << (CSharpParser.UNSAFE - 74)))) !==
          0) ||
      _la === CSharpParser.VIRTUAL ||
      _la === CSharpParser.VOLATILE
    ) {
      this.state = 1494;
      this.all_member_modifiers();
    }

    this.state = 1502;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.CLASS:
        this.state = 1497;
        this.class_definition();
        break;
      case CSharpParser.STRUCT:
        this.state = 1498;
        this.struct_definition();
        break;
      case CSharpParser.INTERFACE:
        this.state = 1499;
        this.interface_definition();
        break;
      case CSharpParser.ENUM:
        this.state = 1500;
        this.enum_definition();
        break;
      case CSharpParser.DELEGATE:
        this.state = 1501;
        this.delegate_definition();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Qualified_alias_memberContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_qualified_alias_member;
  return this;
}

Qualified_alias_memberContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Qualified_alias_memberContext.prototype.constructor = Qualified_alias_memberContext;

Qualified_alias_memberContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Qualified_alias_memberContext.prototype.type_argument_list = function() {
  return this.getTypedRuleContext(Type_argument_listContext, 0);
};

Qualified_alias_memberContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterQualified_alias_member(this);
  }
};

Qualified_alias_memberContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitQualified_alias_member(this);
  }
};

CSharpParser.Qualified_alias_memberContext = Qualified_alias_memberContext;

CSharpParser.prototype.qualified_alias_member = function() {
  var localctx = new Qualified_alias_memberContext(this, this._ctx, this.state);
  this.enterRule(localctx, 210, CSharpParser.RULE_qualified_alias_member);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1504;
    this.identifier();
    this.state = 1505;
    this.match(CSharpParser.DOUBLE_COLON);
    this.state = 1506;
    this.identifier();
    this.state = 1508;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
    if (la_ === 1) {
      this.state = 1507;
      this.type_argument_list();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_parameter_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_parameter_list;
  return this;
}

Type_parameter_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_parameter_listContext.prototype.constructor = Type_parameter_listContext;

Type_parameter_listContext.prototype.type_parameter = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Type_parameterContext);
  } else {
    return this.getTypedRuleContext(Type_parameterContext, i);
  }
};

Type_parameter_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_parameter_list(this);
  }
};

Type_parameter_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_parameter_list(this);
  }
};

CSharpParser.Type_parameter_listContext = Type_parameter_listContext;

CSharpParser.prototype.type_parameter_list = function() {
  var localctx = new Type_parameter_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 212, CSharpParser.RULE_type_parameter_list);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1510;
    this.match(CSharpParser.LT);
    this.state = 1511;
    this.type_parameter();
    this.state = 1516;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1512;
      this.match(CSharpParser.COMMA);
      this.state = 1513;
      this.type_parameter();
      this.state = 1518;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 1519;
    this.match(CSharpParser.GT);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_parameterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_parameter;
  return this;
}

Type_parameterContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_parameterContext.prototype.constructor = Type_parameterContext;

Type_parameterContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Type_parameterContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Type_parameterContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_parameter(this);
  }
};

Type_parameterContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_parameter(this);
  }
};

CSharpParser.Type_parameterContext = Type_parameterContext;

CSharpParser.prototype.type_parameter = function() {
  var localctx = new Type_parameterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 214, CSharpParser.RULE_type_parameter);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1522;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1521;
      this.attributes();
    }

    this.state = 1524;
    this.identifier();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_baseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_class_base;
  return this;
}

Class_baseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_baseContext.prototype.constructor = Class_baseContext;

Class_baseContext.prototype.class_type = function() {
  return this.getTypedRuleContext(Class_typeContext, 0);
};

Class_baseContext.prototype.namespace_or_type_name = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Namespace_or_type_nameContext);
  } else {
    return this.getTypedRuleContext(Namespace_or_type_nameContext, i);
  }
};

Class_baseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterClass_base(this);
  }
};

Class_baseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitClass_base(this);
  }
};

CSharpParser.Class_baseContext = Class_baseContext;

CSharpParser.prototype.class_base = function() {
  var localctx = new Class_baseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 216, CSharpParser.RULE_class_base);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1526;
    this.match(CSharpParser.COLON);
    this.state = 1527;
    this.class_type();
    this.state = 1532;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1528;
      this.match(CSharpParser.COMMA);
      this.state = 1529;
      this.namespace_or_type_name();
      this.state = 1534;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_type_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interface_type_list;
  return this;
}

Interface_type_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interface_type_listContext.prototype.constructor = Interface_type_listContext;

Interface_type_listContext.prototype.namespace_or_type_name = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Namespace_or_type_nameContext);
  } else {
    return this.getTypedRuleContext(Namespace_or_type_nameContext, i);
  }
};

Interface_type_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterface_type_list(this);
  }
};

Interface_type_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterface_type_list(this);
  }
};

CSharpParser.Interface_type_listContext = Interface_type_listContext;

CSharpParser.prototype.interface_type_list = function() {
  var localctx = new Interface_type_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 218, CSharpParser.RULE_interface_type_list);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1535;
    this.namespace_or_type_name();
    this.state = 1540;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1536;
      this.match(CSharpParser.COMMA);
      this.state = 1537;
      this.namespace_or_type_name();
      this.state = 1542;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_parameter_constraints_clausesContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clauses;
  return this;
}

Type_parameter_constraints_clausesContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_parameter_constraints_clausesContext.prototype.constructor = Type_parameter_constraints_clausesContext;

Type_parameter_constraints_clausesContext.prototype.type_parameter_constraints_clause = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Type_parameter_constraints_clauseContext);
  } else {
    return this.getTypedRuleContext(
      Type_parameter_constraints_clauseContext,
      i
    );
  }
};

Type_parameter_constraints_clausesContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_parameter_constraints_clauses(this);
  }
};

Type_parameter_constraints_clausesContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_parameter_constraints_clauses(this);
  }
};

CSharpParser.Type_parameter_constraints_clausesContext = Type_parameter_constraints_clausesContext;

CSharpParser.prototype.type_parameter_constraints_clauses = function() {
  var localctx = new Type_parameter_constraints_clausesContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    220,
    CSharpParser.RULE_type_parameter_constraints_clauses
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1544;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 1543;
      this.type_parameter_constraints_clause();
      this.state = 1546;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (_la === CSharpParser.WHERE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_parameter_constraints_clauseContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clause;
  return this;
}

Type_parameter_constraints_clauseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_parameter_constraints_clauseContext.prototype.constructor = Type_parameter_constraints_clauseContext;

Type_parameter_constraints_clauseContext.prototype.WHERE = function() {
  return this.getToken(CSharpParser.WHERE, 0);
};

Type_parameter_constraints_clauseContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Type_parameter_constraints_clauseContext.prototype.type_parameter_constraints = function() {
  return this.getTypedRuleContext(Type_parameter_constraintsContext, 0);
};

Type_parameter_constraints_clauseContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_parameter_constraints_clause(this);
  }
};

Type_parameter_constraints_clauseContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_parameter_constraints_clause(this);
  }
};

CSharpParser.Type_parameter_constraints_clauseContext = Type_parameter_constraints_clauseContext;

CSharpParser.prototype.type_parameter_constraints_clause = function() {
  var localctx = new Type_parameter_constraints_clauseContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    222,
    CSharpParser.RULE_type_parameter_constraints_clause
  );
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1548;
    this.match(CSharpParser.WHERE);
    this.state = 1549;
    this.identifier();
    this.state = 1550;
    this.match(CSharpParser.COLON);
    this.state = 1551;
    this.type_parameter_constraints();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Type_parameter_constraintsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_type_parameter_constraints;
  return this;
}

Type_parameter_constraintsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Type_parameter_constraintsContext.prototype.constructor = Type_parameter_constraintsContext;

Type_parameter_constraintsContext.prototype.constructor_constraint = function() {
  return this.getTypedRuleContext(Constructor_constraintContext, 0);
};

Type_parameter_constraintsContext.prototype.primary_constraint = function() {
  return this.getTypedRuleContext(Primary_constraintContext, 0);
};

Type_parameter_constraintsContext.prototype.secondary_constraints = function() {
  return this.getTypedRuleContext(Secondary_constraintsContext, 0);
};

Type_parameter_constraintsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterType_parameter_constraints(this);
  }
};

Type_parameter_constraintsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitType_parameter_constraints(this);
  }
};

CSharpParser.Type_parameter_constraintsContext = Type_parameter_constraintsContext;

CSharpParser.prototype.type_parameter_constraints = function() {
  var localctx = new Type_parameter_constraintsContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 224, CSharpParser.RULE_type_parameter_constraints);
  var _la = 0; // Token type
  try {
    this.state = 1563;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.NEW:
        this.enterOuterAlt(localctx, 1);
        this.state = 1553;
        this.constructor_constraint();
        break;
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.CLASS:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.STRING:
      case CSharpParser.STRUCT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 2);
        this.state = 1554;
        this.primary_constraint();
        this.state = 1557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 162, this._ctx);
        if (la_ === 1) {
          this.state = 1555;
          this.match(CSharpParser.COMMA);
          this.state = 1556;
          this.secondary_constraints();
        }
        this.state = 1561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.COMMA) {
          this.state = 1559;
          this.match(CSharpParser.COMMA);
          this.state = 1560;
          this.constructor_constraint();
        }

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Primary_constraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_primary_constraint;
  return this;
}

Primary_constraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Primary_constraintContext.prototype.constructor = Primary_constraintContext;

Primary_constraintContext.prototype.class_type = function() {
  return this.getTypedRuleContext(Class_typeContext, 0);
};

Primary_constraintContext.prototype.CLASS = function() {
  return this.getToken(CSharpParser.CLASS, 0);
};

Primary_constraintContext.prototype.STRUCT = function() {
  return this.getToken(CSharpParser.STRUCT, 0);
};

Primary_constraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterPrimary_constraint(this);
  }
};

Primary_constraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitPrimary_constraint(this);
  }
};

CSharpParser.Primary_constraintContext = Primary_constraintContext;

CSharpParser.prototype.primary_constraint = function() {
  var localctx = new Primary_constraintContext(this, this._ctx, this.state);
  this.enterRule(localctx, 226, CSharpParser.RULE_primary_constraint);
  try {
    this.state = 1568;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.STRING:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 1);
        this.state = 1565;
        this.class_type();
        break;
      case CSharpParser.CLASS:
        this.enterOuterAlt(localctx, 2);
        this.state = 1566;
        this.match(CSharpParser.CLASS);
        break;
      case CSharpParser.STRUCT:
        this.enterOuterAlt(localctx, 3);
        this.state = 1567;
        this.match(CSharpParser.STRUCT);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Secondary_constraintsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_secondary_constraints;
  return this;
}

Secondary_constraintsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Secondary_constraintsContext.prototype.constructor = Secondary_constraintsContext;

Secondary_constraintsContext.prototype.namespace_or_type_name = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Namespace_or_type_nameContext);
  } else {
    return this.getTypedRuleContext(Namespace_or_type_nameContext, i);
  }
};

Secondary_constraintsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSecondary_constraints(this);
  }
};

Secondary_constraintsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSecondary_constraints(this);
  }
};

CSharpParser.Secondary_constraintsContext = Secondary_constraintsContext;

CSharpParser.prototype.secondary_constraints = function() {
  var localctx = new Secondary_constraintsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 228, CSharpParser.RULE_secondary_constraints);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1570;
    this.namespace_or_type_name();
    this.state = 1575;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 166, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 1571;
        this.match(CSharpParser.COMMA);
        this.state = 1572;
        this.namespace_or_type_name();
      }
      this.state = 1577;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 166, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Constructor_constraintContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_constructor_constraint;
  return this;
}

Constructor_constraintContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Constructor_constraintContext.prototype.constructor = Constructor_constraintContext;

Constructor_constraintContext.prototype.NEW = function() {
  return this.getToken(CSharpParser.NEW, 0);
};

Constructor_constraintContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_constraintContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_constraintContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConstructor_constraint(this);
  }
};

Constructor_constraintContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConstructor_constraint(this);
  }
};

CSharpParser.Constructor_constraintContext = Constructor_constraintContext;

CSharpParser.prototype.constructor_constraint = function() {
  var localctx = new Constructor_constraintContext(this, this._ctx, this.state);
  this.enterRule(localctx, 230, CSharpParser.RULE_constructor_constraint);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1578;
    this.match(CSharpParser.NEW);
    this.state = 1579;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 1580;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_class_body;
  return this;
}

Class_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_bodyContext.prototype.constructor = Class_bodyContext;

Class_bodyContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Class_bodyContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Class_bodyContext.prototype.class_member_declarations = function() {
  return this.getTypedRuleContext(Class_member_declarationsContext, 0);
};

Class_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterClass_body(this);
  }
};

Class_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitClass_body(this);
  }
};

CSharpParser.Class_bodyContext = Class_bodyContext;

CSharpParser.prototype.class_body = function() {
  var localctx = new Class_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 232, CSharpParser.RULE_class_body);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1582;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 1584;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ABSTRACT) |
            (1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CLASS) |
            (1 << CSharpParser.CONST) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.ENUM - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.EVENT - 32)) |
            (1 << (CSharpParser.EXPLICIT - 32)) |
            (1 << (CSharpParser.EXTERN - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.IMPLICIT - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTERFACE - 32)) |
            (1 << (CSharpParser.INTERNAL - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.OVERRIDE - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.PRIVATE - 64)) |
            (1 << (CSharpParser.PROTECTED - 64)) |
            (1 << (CSharpParser.PUBLIC - 64)) |
            (1 << (CSharpParser.READONLY - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SEALED - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.STATIC - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.STRUCT - 64)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.UNSAFE - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VIRTUAL - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.VOLATILE - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0) ||
      _la === CSharpParser.TILDE
    ) {
      this.state = 1583;
      this.class_member_declarations();
    }

    this.state = 1586;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_member_declarationsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_class_member_declarations;
  return this;
}

Class_member_declarationsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Class_member_declarationsContext.prototype.constructor = Class_member_declarationsContext;

Class_member_declarationsContext.prototype.class_member_declaration = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Class_member_declarationContext);
  } else {
    return this.getTypedRuleContext(Class_member_declarationContext, i);
  }
};

Class_member_declarationsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterClass_member_declarations(this);
  }
};

Class_member_declarationsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitClass_member_declarations(this);
  }
};

CSharpParser.Class_member_declarationsContext = Class_member_declarationsContext;

CSharpParser.prototype.class_member_declarations = function() {
  var localctx = new Class_member_declarationsContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 234, CSharpParser.RULE_class_member_declarations);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1589;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 1588;
      this.class_member_declaration();
      this.state = 1591;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ABSTRACT) |
            (1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CLASS) |
            (1 << CSharpParser.CONST) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.ENUM - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.EVENT - 32)) |
            (1 << (CSharpParser.EXPLICIT - 32)) |
            (1 << (CSharpParser.EXTERN - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.IMPLICIT - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTERFACE - 32)) |
            (1 << (CSharpParser.INTERNAL - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.OVERRIDE - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.PRIVATE - 64)) |
            (1 << (CSharpParser.PROTECTED - 64)) |
            (1 << (CSharpParser.PUBLIC - 64)) |
            (1 << (CSharpParser.READONLY - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SEALED - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.STATIC - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.STRUCT - 64)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.UNSAFE - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VIRTUAL - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.VOLATILE - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0) ||
      _la === CSharpParser.TILDE
    );
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_class_member_declaration;
  return this;
}

Class_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Class_member_declarationContext.prototype.constructor = Class_member_declarationContext;

Class_member_declarationContext.prototype.common_member_declaration = function() {
  return this.getTypedRuleContext(Common_member_declarationContext, 0);
};

Class_member_declarationContext.prototype.destructor_definition = function() {
  return this.getTypedRuleContext(Destructor_definitionContext, 0);
};

Class_member_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Class_member_declarationContext.prototype.all_member_modifiers = function() {
  return this.getTypedRuleContext(All_member_modifiersContext, 0);
};

Class_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterClass_member_declaration(this);
  }
};

Class_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitClass_member_declaration(this);
  }
};

CSharpParser.Class_member_declarationContext = Class_member_declarationContext;

CSharpParser.prototype.class_member_declaration = function() {
  var localctx = new Class_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 236, CSharpParser.RULE_class_member_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1594;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1593;
      this.attributes();
    }

    this.state = 1597;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
    if (la_ === 1) {
      this.state = 1596;
      this.all_member_modifiers();
    }
    this.state = 1601;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CLASS:
      case CSharpParser.CONST:
      case CSharpParser.DECIMAL:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.ENUM:
      case CSharpParser.EQUALS:
      case CSharpParser.EVENT:
      case CSharpParser.EXPLICIT:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.IMPLICIT:
      case CSharpParser.INT:
      case CSharpParser.INTERFACE:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.STRING:
      case CSharpParser.STRUCT:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.VOID:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.OPEN_PARENS:
        this.state = 1599;
        this.common_member_declaration();
        break;
      case CSharpParser.TILDE:
        this.state = 1600;
        this.destructor_definition();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function All_member_modifiersContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_all_member_modifiers;
  return this;
}

All_member_modifiersContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
All_member_modifiersContext.prototype.constructor = All_member_modifiersContext;

All_member_modifiersContext.prototype.all_member_modifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(All_member_modifierContext);
  } else {
    return this.getTypedRuleContext(All_member_modifierContext, i);
  }
};

All_member_modifiersContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAll_member_modifiers(this);
  }
};

All_member_modifiersContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAll_member_modifiers(this);
  }
};

CSharpParser.All_member_modifiersContext = All_member_modifiersContext;

CSharpParser.prototype.all_member_modifiers = function() {
  var localctx = new All_member_modifiersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 238, CSharpParser.RULE_all_member_modifiers);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1604;
    this._errHandler.sync(this);
    var _alt = 1;
    do {
      switch (_alt) {
        case 1:
          this.state = 1603;
          this.all_member_modifier();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 1606;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
    } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function All_member_modifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_all_member_modifier;
  return this;
}

All_member_modifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
All_member_modifierContext.prototype.constructor = All_member_modifierContext;

All_member_modifierContext.prototype.NEW = function() {
  return this.getToken(CSharpParser.NEW, 0);
};

All_member_modifierContext.prototype.PUBLIC = function() {
  return this.getToken(CSharpParser.PUBLIC, 0);
};

All_member_modifierContext.prototype.PROTECTED = function() {
  return this.getToken(CSharpParser.PROTECTED, 0);
};

All_member_modifierContext.prototype.INTERNAL = function() {
  return this.getToken(CSharpParser.INTERNAL, 0);
};

All_member_modifierContext.prototype.PRIVATE = function() {
  return this.getToken(CSharpParser.PRIVATE, 0);
};

All_member_modifierContext.prototype.READONLY = function() {
  return this.getToken(CSharpParser.READONLY, 0);
};

All_member_modifierContext.prototype.VOLATILE = function() {
  return this.getToken(CSharpParser.VOLATILE, 0);
};

All_member_modifierContext.prototype.VIRTUAL = function() {
  return this.getToken(CSharpParser.VIRTUAL, 0);
};

All_member_modifierContext.prototype.SEALED = function() {
  return this.getToken(CSharpParser.SEALED, 0);
};

All_member_modifierContext.prototype.OVERRIDE = function() {
  return this.getToken(CSharpParser.OVERRIDE, 0);
};

All_member_modifierContext.prototype.ABSTRACT = function() {
  return this.getToken(CSharpParser.ABSTRACT, 0);
};

All_member_modifierContext.prototype.STATIC = function() {
  return this.getToken(CSharpParser.STATIC, 0);
};

All_member_modifierContext.prototype.UNSAFE = function() {
  return this.getToken(CSharpParser.UNSAFE, 0);
};

All_member_modifierContext.prototype.EXTERN = function() {
  return this.getToken(CSharpParser.EXTERN, 0);
};

All_member_modifierContext.prototype.PARTIAL = function() {
  return this.getToken(CSharpParser.PARTIAL, 0);
};

All_member_modifierContext.prototype.ASYNC = function() {
  return this.getToken(CSharpParser.ASYNC, 0);
};

All_member_modifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAll_member_modifier(this);
  }
};

All_member_modifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAll_member_modifier(this);
  }
};

CSharpParser.All_member_modifierContext = All_member_modifierContext;

CSharpParser.prototype.all_member_modifier = function() {
  var localctx = new All_member_modifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 240, CSharpParser.RULE_all_member_modifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1608;
    _la = this._input.LA(1);
    if (
      !(
        _la === CSharpParser.ABSTRACT ||
        _la === CSharpParser.ASYNC ||
        (((_la - 42) & ~0x1f) == 0 &&
          ((1 << (_la - 42)) &
            ((1 << (CSharpParser.EXTERN - 42)) |
              (1 << (CSharpParser.INTERNAL - 42)) |
              (1 << (CSharpParser.NEW - 42)))) !==
            0) ||
        (((_la - 74) & ~0x1f) == 0 &&
          ((1 << (_la - 74)) &
            ((1 << (CSharpParser.OVERRIDE - 74)) |
              (1 << (CSharpParser.PARTIAL - 74)) |
              (1 << (CSharpParser.PRIVATE - 74)) |
              (1 << (CSharpParser.PROTECTED - 74)) |
              (1 << (CSharpParser.PUBLIC - 74)) |
              (1 << (CSharpParser.READONLY - 74)) |
              (1 << (CSharpParser.SEALED - 74)) |
              (1 << (CSharpParser.STATIC - 74)) |
              (1 << (CSharpParser.UNSAFE - 74)))) !==
            0) ||
        _la === CSharpParser.VIRTUAL ||
        _la === CSharpParser.VOLATILE
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Common_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_common_member_declaration;
  return this;
}

Common_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Common_member_declarationContext.prototype.constructor = Common_member_declarationContext;

Common_member_declarationContext.prototype.constant_declaration = function() {
  return this.getTypedRuleContext(Constant_declarationContext, 0);
};

Common_member_declarationContext.prototype.typed_member_declaration = function() {
  return this.getTypedRuleContext(Typed_member_declarationContext, 0);
};

Common_member_declarationContext.prototype.event_declaration = function() {
  return this.getTypedRuleContext(Event_declarationContext, 0);
};

Common_member_declarationContext.prototype.conversion_operator_declarator = function() {
  return this.getTypedRuleContext(Conversion_operator_declaratorContext, 0);
};

Common_member_declarationContext.prototype.body = function() {
  return this.getTypedRuleContext(BodyContext, 0);
};

Common_member_declarationContext.prototype.right_arrow = function() {
  return this.getTypedRuleContext(Right_arrowContext, 0);
};

Common_member_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Common_member_declarationContext.prototype.constructor_declaration = function() {
  return this.getTypedRuleContext(Constructor_declarationContext, 0);
};

Common_member_declarationContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};

Common_member_declarationContext.prototype.method_declaration = function() {
  return this.getTypedRuleContext(Method_declarationContext, 0);
};

Common_member_declarationContext.prototype.class_definition = function() {
  return this.getTypedRuleContext(Class_definitionContext, 0);
};

Common_member_declarationContext.prototype.struct_definition = function() {
  return this.getTypedRuleContext(Struct_definitionContext, 0);
};

Common_member_declarationContext.prototype.interface_definition = function() {
  return this.getTypedRuleContext(Interface_definitionContext, 0);
};

Common_member_declarationContext.prototype.enum_definition = function() {
  return this.getTypedRuleContext(Enum_definitionContext, 0);
};

Common_member_declarationContext.prototype.delegate_definition = function() {
  return this.getTypedRuleContext(Delegate_definitionContext, 0);
};

Common_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterCommon_member_declaration(this);
  }
};

Common_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitCommon_member_declaration(this);
  }
};

CSharpParser.Common_member_declarationContext = Common_member_declarationContext;

CSharpParser.prototype.common_member_declaration = function() {
  var localctx = new Common_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 242, CSharpParser.RULE_common_member_declaration);
  try {
    this.state = 1629;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 174, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1610;
        this.constant_declaration();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1611;
        this.typed_member_declaration();
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 1612;
        this.event_declaration();
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 1613;
        this.conversion_operator_declarator();
        this.state = 1619;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.OPEN_BRACE:
          case CSharpParser.SEMICOLON:
            this.state = 1614;
            this.body();
            break;
          case CSharpParser.ASSIGNMENT:
            this.state = 1615;
            this.right_arrow();
            this.state = 1616;
            this.expression();
            this.state = 1617;
            this.match(CSharpParser.SEMICOLON);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;

      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 1621;
        this.constructor_declaration();
        break;

      case 6:
        this.enterOuterAlt(localctx, 6);
        this.state = 1622;
        this.match(CSharpParser.VOID);
        this.state = 1623;
        this.method_declaration();
        break;

      case 7:
        this.enterOuterAlt(localctx, 7);
        this.state = 1624;
        this.class_definition();
        break;

      case 8:
        this.enterOuterAlt(localctx, 8);
        this.state = 1625;
        this.struct_definition();
        break;

      case 9:
        this.enterOuterAlt(localctx, 9);
        this.state = 1626;
        this.interface_definition();
        break;

      case 10:
        this.enterOuterAlt(localctx, 10);
        this.state = 1627;
        this.enum_definition();
        break;

      case 11:
        this.enterOuterAlt(localctx, 11);
        this.state = 1628;
        this.delegate_definition();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Typed_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_typed_member_declaration;
  return this;
}

Typed_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Typed_member_declarationContext.prototype.constructor = Typed_member_declarationContext;

Typed_member_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Typed_member_declarationContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};

Typed_member_declarationContext.prototype.indexer_declaration = function() {
  return this.getTypedRuleContext(Indexer_declarationContext, 0);
};

Typed_member_declarationContext.prototype.method_declaration = function() {
  return this.getTypedRuleContext(Method_declarationContext, 0);
};

Typed_member_declarationContext.prototype.property_declaration = function() {
  return this.getTypedRuleContext(Property_declarationContext, 0);
};

Typed_member_declarationContext.prototype.operator_declaration = function() {
  return this.getTypedRuleContext(Operator_declarationContext, 0);
};

Typed_member_declarationContext.prototype.field_declaration = function() {
  return this.getTypedRuleContext(Field_declarationContext, 0);
};

Typed_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterTyped_member_declaration(this);
  }
};

Typed_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitTyped_member_declaration(this);
  }
};

CSharpParser.Typed_member_declarationContext = Typed_member_declarationContext;

CSharpParser.prototype.typed_member_declaration = function() {
  var localctx = new Typed_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 244, CSharpParser.RULE_typed_member_declaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1631;
    this.type();
    this.state = 1641;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 175, this._ctx);
    switch (la_) {
      case 1:
        this.state = 1632;
        this.namespace_or_type_name();
        this.state = 1633;
        this.match(CSharpParser.DOT);
        this.state = 1634;
        this.indexer_declaration();
        break;

      case 2:
        this.state = 1636;
        this.method_declaration();
        break;

      case 3:
        this.state = 1637;
        this.property_declaration();
        break;

      case 4:
        this.state = 1638;
        this.indexer_declaration();
        break;

      case 5:
        this.state = 1639;
        this.operator_declaration();
        break;

      case 6:
        this.state = 1640;
        this.field_declaration();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Constant_declaratorsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_constant_declarators;
  return this;
}

Constant_declaratorsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Constant_declaratorsContext.prototype.constructor = Constant_declaratorsContext;

Constant_declaratorsContext.prototype.constant_declarator = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Constant_declaratorContext);
  } else {
    return this.getTypedRuleContext(Constant_declaratorContext, i);
  }
};

Constant_declaratorsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConstant_declarators(this);
  }
};

Constant_declaratorsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConstant_declarators(this);
  }
};

CSharpParser.Constant_declaratorsContext = Constant_declaratorsContext;

CSharpParser.prototype.constant_declarators = function() {
  var localctx = new Constant_declaratorsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 246, CSharpParser.RULE_constant_declarators);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1643;
    this.constant_declarator();
    this.state = 1648;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1644;
      this.match(CSharpParser.COMMA);
      this.state = 1645;
      this.constant_declarator();
      this.state = 1650;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Constant_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_constant_declarator;
  return this;
}

Constant_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Constant_declaratorContext.prototype.constructor = Constant_declaratorContext;

Constant_declaratorContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Constant_declaratorContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Constant_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConstant_declarator(this);
  }
};

Constant_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConstant_declarator(this);
  }
};

CSharpParser.Constant_declaratorContext = Constant_declaratorContext;

CSharpParser.prototype.constant_declarator = function() {
  var localctx = new Constant_declaratorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 248, CSharpParser.RULE_constant_declarator);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1651;
    this.identifier();
    this.state = 1652;
    this.match(CSharpParser.ASSIGNMENT);
    this.state = 1653;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Variable_declaratorsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_variable_declarators;
  return this;
}

Variable_declaratorsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Variable_declaratorsContext.prototype.constructor = Variable_declaratorsContext;

Variable_declaratorsContext.prototype.variable_declarator = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Variable_declaratorContext);
  } else {
    return this.getTypedRuleContext(Variable_declaratorContext, i);
  }
};

Variable_declaratorsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterVariable_declarators(this);
  }
};

Variable_declaratorsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitVariable_declarators(this);
  }
};

CSharpParser.Variable_declaratorsContext = Variable_declaratorsContext;

CSharpParser.prototype.variable_declarators = function() {
  var localctx = new Variable_declaratorsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 250, CSharpParser.RULE_variable_declarators);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1655;
    this.variable_declarator();
    this.state = 1660;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1656;
      this.match(CSharpParser.COMMA);
      this.state = 1657;
      this.variable_declarator();
      this.state = 1662;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Variable_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_variable_declarator;
  return this;
}

Variable_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Variable_declaratorContext.prototype.constructor = Variable_declaratorContext;

Variable_declaratorContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Variable_declaratorContext.prototype.variable_initializer = function() {
  return this.getTypedRuleContext(Variable_initializerContext, 0);
};

Variable_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterVariable_declarator(this);
  }
};

Variable_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitVariable_declarator(this);
  }
};

CSharpParser.Variable_declaratorContext = Variable_declaratorContext;

CSharpParser.prototype.variable_declarator = function() {
  var localctx = new Variable_declaratorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 252, CSharpParser.RULE_variable_declarator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1663;
    this.identifier();
    this.state = 1666;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.ASSIGNMENT) {
      this.state = 1664;
      this.match(CSharpParser.ASSIGNMENT);
      this.state = 1665;
      this.variable_initializer();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Variable_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_variable_initializer;
  return this;
}

Variable_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Variable_initializerContext.prototype.constructor = Variable_initializerContext;

Variable_initializerContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Variable_initializerContext.prototype.array_initializer = function() {
  return this.getTypedRuleContext(Array_initializerContext, 0);
};

Variable_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterVariable_initializer(this);
  }
};

Variable_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitVariable_initializer(this);
  }
};

CSharpParser.Variable_initializerContext = Variable_initializerContext;

CSharpParser.prototype.variable_initializer = function() {
  var localctx = new Variable_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 254, CSharpParser.RULE_variable_initializer);
  try {
    this.state = 1670;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 1668;
        this.expression();
        break;
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 1669;
        this.array_initializer();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Return_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_return_type;
  return this;
}

Return_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Return_typeContext.prototype.constructor = Return_typeContext;

Return_typeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Return_typeContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};

Return_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterReturn_type(this);
  }
};

Return_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitReturn_type(this);
  }
};

CSharpParser.Return_typeContext = Return_typeContext;

CSharpParser.prototype.return_type = function() {
  var localctx = new Return_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 256, CSharpParser.RULE_return_type);
  try {
    this.state = 1674;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 180, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1672;
        this.type();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1673;
        this.match(CSharpParser.VOID);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Member_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_member_name;
  return this;
}

Member_nameContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Member_nameContext.prototype.constructor = Member_nameContext;

Member_nameContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};

Member_nameContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMember_name(this);
  }
};

Member_nameContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMember_name(this);
  }
};

CSharpParser.Member_nameContext = Member_nameContext;

CSharpParser.prototype.member_name = function() {
  var localctx = new Member_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 258, CSharpParser.RULE_member_name);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1676;
    this.namespace_or_type_name();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Method_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_method_body;
  return this;
}

Method_bodyContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Method_bodyContext.prototype.constructor = Method_bodyContext;

Method_bodyContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Method_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMethod_body(this);
  }
};

Method_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMethod_body(this);
  }
};

CSharpParser.Method_bodyContext = Method_bodyContext;

CSharpParser.prototype.method_body = function() {
  var localctx = new Method_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 260, CSharpParser.RULE_method_body);
  try {
    this.state = 1680;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1678;
        this.block();
        break;
      case CSharpParser.SEMICOLON:
        this.enterOuterAlt(localctx, 2);
        this.state = 1679;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Formal_parameter_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_formal_parameter_list;
  return this;
}

Formal_parameter_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Formal_parameter_listContext.prototype.constructor = Formal_parameter_listContext;

Formal_parameter_listContext.prototype.parameter_array = function() {
  return this.getTypedRuleContext(Parameter_arrayContext, 0);
};

Formal_parameter_listContext.prototype.fixed_parameters = function() {
  return this.getTypedRuleContext(Fixed_parametersContext, 0);
};

Formal_parameter_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFormal_parameter_list(this);
  }
};

Formal_parameter_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFormal_parameter_list(this);
  }
};

CSharpParser.Formal_parameter_listContext = Formal_parameter_listContext;

CSharpParser.prototype.formal_parameter_list = function() {
  var localctx = new Formal_parameter_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 262, CSharpParser.RULE_formal_parameter_list);
  var _la = 0; // Token type
  try {
    this.state = 1688;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 183, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1682;
        this.parameter_array();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1683;
        this.fixed_parameters();
        this.state = 1686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.COMMA) {
          this.state = 1684;
          this.match(CSharpParser.COMMA);
          this.state = 1685;
          this.parameter_array();
        }

        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Fixed_parametersContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_fixed_parameters;
  return this;
}

Fixed_parametersContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Fixed_parametersContext.prototype.constructor = Fixed_parametersContext;

Fixed_parametersContext.prototype.fixed_parameter = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Fixed_parameterContext);
  } else {
    return this.getTypedRuleContext(Fixed_parameterContext, i);
  }
};

Fixed_parametersContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixed_parameters(this);
  }
};

Fixed_parametersContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixed_parameters(this);
  }
};

CSharpParser.Fixed_parametersContext = Fixed_parametersContext;

CSharpParser.prototype.fixed_parameters = function() {
  var localctx = new Fixed_parametersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 264, CSharpParser.RULE_fixed_parameters);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1690;
    this.fixed_parameter();
    this.state = 1695;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 1691;
        this.match(CSharpParser.COMMA);
        this.state = 1692;
        this.fixed_parameter();
      }
      this.state = 1697;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Fixed_parameterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_fixed_parameter;
  return this;
}

Fixed_parameterContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Fixed_parameterContext.prototype.constructor = Fixed_parameterContext;

Fixed_parameterContext.prototype.arg_declaration = function() {
  return this.getTypedRuleContext(Arg_declarationContext, 0);
};

Fixed_parameterContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Fixed_parameterContext.prototype.parameter_modifier = function() {
  return this.getTypedRuleContext(Parameter_modifierContext, 0);
};

Fixed_parameterContext.prototype.ARGLIST = function() {
  return this.getToken(CSharpParser.ARGLIST, 0);
};

Fixed_parameterContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixed_parameter(this);
  }
};

Fixed_parameterContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixed_parameter(this);
  }
};

CSharpParser.Fixed_parameterContext = Fixed_parameterContext;

CSharpParser.prototype.fixed_parameter = function() {
  var localctx = new Fixed_parameterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 266, CSharpParser.RULE_fixed_parameter);
  var _la = 0; // Token type
  try {
    this.state = 1706;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 187, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1699;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.OPEN_BRACKET) {
          this.state = 1698;
          this.attributes();
        }

        this.state = 1702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la - 73) & ~0x1f) == 0 &&
          ((1 << (_la - 73)) &
            ((1 << (CSharpParser.OUT - 73)) |
              (1 << (CSharpParser.REF - 73)) |
              (1 << (CSharpParser.THIS - 73)))) !==
            0
        ) {
          this.state = 1701;
          this.parameter_modifier();
        }

        this.state = 1704;
        this.arg_declaration();
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1705;
        this.match(CSharpParser.ARGLIST);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Parameter_modifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_parameter_modifier;
  return this;
}

Parameter_modifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Parameter_modifierContext.prototype.constructor = Parameter_modifierContext;

Parameter_modifierContext.prototype.REF = function() {
  return this.getToken(CSharpParser.REF, 0);
};

Parameter_modifierContext.prototype.OUT = function() {
  return this.getToken(CSharpParser.OUT, 0);
};

Parameter_modifierContext.prototype.THIS = function() {
  return this.getToken(CSharpParser.THIS, 0);
};

Parameter_modifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterParameter_modifier(this);
  }
};

Parameter_modifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitParameter_modifier(this);
  }
};

CSharpParser.Parameter_modifierContext = Parameter_modifierContext;

CSharpParser.prototype.parameter_modifier = function() {
  var localctx = new Parameter_modifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 268, CSharpParser.RULE_parameter_modifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1708;
    _la = this._input.LA(1);
    if (
      !(
        ((_la - 73) & ~0x1f) == 0 &&
        ((1 << (_la - 73)) &
          ((1 << (CSharpParser.OUT - 73)) |
            (1 << (CSharpParser.REF - 73)) |
            (1 << (CSharpParser.THIS - 73)))) !==
          0
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Parameter_arrayContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_parameter_array;
  return this;
}

Parameter_arrayContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Parameter_arrayContext.prototype.constructor = Parameter_arrayContext;

Parameter_arrayContext.prototype.PARAMS = function() {
  return this.getToken(CSharpParser.PARAMS, 0);
};

Parameter_arrayContext.prototype.array_type = function() {
  return this.getTypedRuleContext(Array_typeContext, 0);
};

Parameter_arrayContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Parameter_arrayContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Parameter_arrayContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterParameter_array(this);
  }
};

Parameter_arrayContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitParameter_array(this);
  }
};

CSharpParser.Parameter_arrayContext = Parameter_arrayContext;

CSharpParser.prototype.parameter_array = function() {
  var localctx = new Parameter_arrayContext(this, this._ctx, this.state);
  this.enterRule(localctx, 270, CSharpParser.RULE_parameter_array);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1711;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1710;
      this.attributes();
    }

    this.state = 1713;
    this.match(CSharpParser.PARAMS);
    this.state = 1714;
    this.array_type();
    this.state = 1715;
    this.identifier();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Accessor_declarationsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_accessor_declarations;
  this.attrs = null; // AttributesContext
  this.mods = null; // Accessor_modifierContext
  return this;
}

Accessor_declarationsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Accessor_declarationsContext.prototype.constructor = Accessor_declarationsContext;

Accessor_declarationsContext.prototype.GET = function() {
  return this.getToken(CSharpParser.GET, 0);
};

Accessor_declarationsContext.prototype.accessor_body = function() {
  return this.getTypedRuleContext(Accessor_bodyContext, 0);
};

Accessor_declarationsContext.prototype.SET = function() {
  return this.getToken(CSharpParser.SET, 0);
};

Accessor_declarationsContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Accessor_declarationsContext.prototype.accessor_modifier = function() {
  return this.getTypedRuleContext(Accessor_modifierContext, 0);
};

Accessor_declarationsContext.prototype.set_accessor_declaration = function() {
  return this.getTypedRuleContext(Set_accessor_declarationContext, 0);
};

Accessor_declarationsContext.prototype.get_accessor_declaration = function() {
  return this.getTypedRuleContext(Get_accessor_declarationContext, 0);
};

Accessor_declarationsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAccessor_declarations(this);
  }
};

Accessor_declarationsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAccessor_declarations(this);
  }
};

CSharpParser.Accessor_declarationsContext = Accessor_declarationsContext;

CSharpParser.prototype.accessor_declarations = function() {
  var localctx = new Accessor_declarationsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 272, CSharpParser.RULE_accessor_declarations);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1718;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1717;
      localctx.attrs = this.attributes();
    }

    this.state = 1721;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la - 58) & ~0x1f) == 0 &&
      ((1 << (_la - 58)) &
        ((1 << (CSharpParser.INTERNAL - 58)) |
          (1 << (CSharpParser.PRIVATE - 58)) |
          (1 << (CSharpParser.PROTECTED - 58)))) !==
        0
    ) {
      this.state = 1720;
      localctx.mods = this.accessor_modifier();
    }

    this.state = 1733;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.GET:
        this.state = 1723;
        this.match(CSharpParser.GET);
        this.state = 1724;
        this.accessor_body();
        this.state = 1726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          (((_la - 58) & ~0x1f) == 0 &&
            ((1 << (_la - 58)) &
              ((1 << (CSharpParser.INTERNAL - 58)) |
                (1 << (CSharpParser.PRIVATE - 58)) |
                (1 << (CSharpParser.PROTECTED - 58)) |
                (1 << (CSharpParser.SET - 58)))) !==
              0) ||
          _la === CSharpParser.OPEN_BRACKET
        ) {
          this.state = 1725;
          this.set_accessor_declaration();
        }

        break;
      case CSharpParser.SET:
        this.state = 1728;
        this.match(CSharpParser.SET);
        this.state = 1729;
        this.accessor_body();
        this.state = 1731;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          (((_la - 50) & ~0x1f) == 0 &&
            ((1 << (_la - 50)) &
              ((1 << (CSharpParser.GET - 50)) |
                (1 << (CSharpParser.INTERNAL - 50)) |
                (1 << (CSharpParser.PRIVATE - 50)) |
                (1 << (CSharpParser.PROTECTED - 50)))) !==
              0) ||
          _la === CSharpParser.OPEN_BRACKET
        ) {
          this.state = 1730;
          this.get_accessor_declaration();
        }

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Get_accessor_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_get_accessor_declaration;
  return this;
}

Get_accessor_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Get_accessor_declarationContext.prototype.constructor = Get_accessor_declarationContext;

Get_accessor_declarationContext.prototype.GET = function() {
  return this.getToken(CSharpParser.GET, 0);
};

Get_accessor_declarationContext.prototype.accessor_body = function() {
  return this.getTypedRuleContext(Accessor_bodyContext, 0);
};

Get_accessor_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Get_accessor_declarationContext.prototype.accessor_modifier = function() {
  return this.getTypedRuleContext(Accessor_modifierContext, 0);
};

Get_accessor_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterGet_accessor_declaration(this);
  }
};

Get_accessor_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitGet_accessor_declaration(this);
  }
};

CSharpParser.Get_accessor_declarationContext = Get_accessor_declarationContext;

CSharpParser.prototype.get_accessor_declaration = function() {
  var localctx = new Get_accessor_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 274, CSharpParser.RULE_get_accessor_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1736;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1735;
      this.attributes();
    }

    this.state = 1739;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la - 58) & ~0x1f) == 0 &&
      ((1 << (_la - 58)) &
        ((1 << (CSharpParser.INTERNAL - 58)) |
          (1 << (CSharpParser.PRIVATE - 58)) |
          (1 << (CSharpParser.PROTECTED - 58)))) !==
        0
    ) {
      this.state = 1738;
      this.accessor_modifier();
    }

    this.state = 1741;
    this.match(CSharpParser.GET);
    this.state = 1742;
    this.accessor_body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Set_accessor_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_set_accessor_declaration;
  return this;
}

Set_accessor_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Set_accessor_declarationContext.prototype.constructor = Set_accessor_declarationContext;

Set_accessor_declarationContext.prototype.SET = function() {
  return this.getToken(CSharpParser.SET, 0);
};

Set_accessor_declarationContext.prototype.accessor_body = function() {
  return this.getTypedRuleContext(Accessor_bodyContext, 0);
};

Set_accessor_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Set_accessor_declarationContext.prototype.accessor_modifier = function() {
  return this.getTypedRuleContext(Accessor_modifierContext, 0);
};

Set_accessor_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterSet_accessor_declaration(this);
  }
};

Set_accessor_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitSet_accessor_declaration(this);
  }
};

CSharpParser.Set_accessor_declarationContext = Set_accessor_declarationContext;

CSharpParser.prototype.set_accessor_declaration = function() {
  var localctx = new Set_accessor_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 276, CSharpParser.RULE_set_accessor_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1745;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1744;
      this.attributes();
    }

    this.state = 1748;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la - 58) & ~0x1f) == 0 &&
      ((1 << (_la - 58)) &
        ((1 << (CSharpParser.INTERNAL - 58)) |
          (1 << (CSharpParser.PRIVATE - 58)) |
          (1 << (CSharpParser.PROTECTED - 58)))) !==
        0
    ) {
      this.state = 1747;
      this.accessor_modifier();
    }

    this.state = 1750;
    this.match(CSharpParser.SET);
    this.state = 1751;
    this.accessor_body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Accessor_modifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_accessor_modifier;
  return this;
}

Accessor_modifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Accessor_modifierContext.prototype.constructor = Accessor_modifierContext;

Accessor_modifierContext.prototype.PROTECTED = function() {
  return this.getToken(CSharpParser.PROTECTED, 0);
};

Accessor_modifierContext.prototype.INTERNAL = function() {
  return this.getToken(CSharpParser.INTERNAL, 0);
};

Accessor_modifierContext.prototype.PRIVATE = function() {
  return this.getToken(CSharpParser.PRIVATE, 0);
};

Accessor_modifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAccessor_modifier(this);
  }
};

Accessor_modifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAccessor_modifier(this);
  }
};

CSharpParser.Accessor_modifierContext = Accessor_modifierContext;

CSharpParser.prototype.accessor_modifier = function() {
  var localctx = new Accessor_modifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 278, CSharpParser.RULE_accessor_modifier);
  try {
    this.state = 1760;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 198, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1753;
        this.match(CSharpParser.PROTECTED);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1754;
        this.match(CSharpParser.INTERNAL);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 1755;
        this.match(CSharpParser.PRIVATE);
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 1756;
        this.match(CSharpParser.PROTECTED);
        this.state = 1757;
        this.match(CSharpParser.INTERNAL);
        break;

      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 1758;
        this.match(CSharpParser.INTERNAL);
        this.state = 1759;
        this.match(CSharpParser.PROTECTED);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Accessor_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_accessor_body;
  return this;
}

Accessor_bodyContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Accessor_bodyContext.prototype.constructor = Accessor_bodyContext;

Accessor_bodyContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Accessor_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAccessor_body(this);
  }
};

Accessor_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAccessor_body(this);
  }
};

CSharpParser.Accessor_bodyContext = Accessor_bodyContext;

CSharpParser.prototype.accessor_body = function() {
  var localctx = new Accessor_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 280, CSharpParser.RULE_accessor_body);
  try {
    this.state = 1764;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1762;
        this.block();
        break;
      case CSharpParser.SEMICOLON:
        this.enterOuterAlt(localctx, 2);
        this.state = 1763;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Event_accessor_declarationsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_event_accessor_declarations;
  return this;
}

Event_accessor_declarationsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Event_accessor_declarationsContext.prototype.constructor = Event_accessor_declarationsContext;

Event_accessor_declarationsContext.prototype.ADD = function() {
  return this.getToken(CSharpParser.ADD, 0);
};

Event_accessor_declarationsContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Event_accessor_declarationsContext.prototype.remove_accessor_declaration = function() {
  return this.getTypedRuleContext(Remove_accessor_declarationContext, 0);
};

Event_accessor_declarationsContext.prototype.REMOVE = function() {
  return this.getToken(CSharpParser.REMOVE, 0);
};

Event_accessor_declarationsContext.prototype.add_accessor_declaration = function() {
  return this.getTypedRuleContext(Add_accessor_declarationContext, 0);
};

Event_accessor_declarationsContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Event_accessor_declarationsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEvent_accessor_declarations(this);
  }
};

Event_accessor_declarationsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEvent_accessor_declarations(this);
  }
};

CSharpParser.Event_accessor_declarationsContext = Event_accessor_declarationsContext;

CSharpParser.prototype.event_accessor_declarations = function() {
  var localctx = new Event_accessor_declarationsContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 282, CSharpParser.RULE_event_accessor_declarations);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1767;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1766;
      this.attributes();
    }

    this.state = 1777;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
        this.state = 1769;
        this.match(CSharpParser.ADD);
        this.state = 1770;
        this.block();
        this.state = 1771;
        this.remove_accessor_declaration();
        break;
      case CSharpParser.REMOVE:
        this.state = 1773;
        this.match(CSharpParser.REMOVE);
        this.state = 1774;
        this.block();
        this.state = 1775;
        this.add_accessor_declaration();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Add_accessor_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_add_accessor_declaration;
  return this;
}

Add_accessor_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Add_accessor_declarationContext.prototype.constructor = Add_accessor_declarationContext;

Add_accessor_declarationContext.prototype.ADD = function() {
  return this.getToken(CSharpParser.ADD, 0);
};

Add_accessor_declarationContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Add_accessor_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Add_accessor_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAdd_accessor_declaration(this);
  }
};

Add_accessor_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAdd_accessor_declaration(this);
  }
};

CSharpParser.Add_accessor_declarationContext = Add_accessor_declarationContext;

CSharpParser.prototype.add_accessor_declaration = function() {
  var localctx = new Add_accessor_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 284, CSharpParser.RULE_add_accessor_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1780;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1779;
      this.attributes();
    }

    this.state = 1782;
    this.match(CSharpParser.ADD);
    this.state = 1783;
    this.block();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Remove_accessor_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_remove_accessor_declaration;
  return this;
}

Remove_accessor_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Remove_accessor_declarationContext.prototype.constructor = Remove_accessor_declarationContext;

Remove_accessor_declarationContext.prototype.REMOVE = function() {
  return this.getToken(CSharpParser.REMOVE, 0);
};

Remove_accessor_declarationContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

Remove_accessor_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Remove_accessor_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterRemove_accessor_declaration(this);
  }
};

Remove_accessor_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitRemove_accessor_declaration(this);
  }
};

CSharpParser.Remove_accessor_declarationContext = Remove_accessor_declarationContext;

CSharpParser.prototype.remove_accessor_declaration = function() {
  var localctx = new Remove_accessor_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 286, CSharpParser.RULE_remove_accessor_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1786;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1785;
      this.attributes();
    }

    this.state = 1788;
    this.match(CSharpParser.REMOVE);
    this.state = 1789;
    this.block();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Overloadable_operatorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_overloadable_operator;
  return this;
}

Overloadable_operatorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Overloadable_operatorContext.prototype.constructor = Overloadable_operatorContext;

Overloadable_operatorContext.prototype.BANG = function() {
  return this.getToken(CSharpParser.BANG, 0);
};

Overloadable_operatorContext.prototype.TRUE = function() {
  return this.getToken(CSharpParser.TRUE, 0);
};

Overloadable_operatorContext.prototype.FALSE = function() {
  return this.getToken(CSharpParser.FALSE, 0);
};

Overloadable_operatorContext.prototype.right_shift = function() {
  return this.getTypedRuleContext(Right_shiftContext, 0);
};

Overloadable_operatorContext.prototype.OP_EQ = function() {
  return this.getToken(CSharpParser.OP_EQ, 0);
};

Overloadable_operatorContext.prototype.OP_NE = function() {
  return this.getToken(CSharpParser.OP_NE, 0);
};

Overloadable_operatorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterOverloadable_operator(this);
  }
};

Overloadable_operatorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitOverloadable_operator(this);
  }
};

CSharpParser.Overloadable_operatorContext = Overloadable_operatorContext;

CSharpParser.prototype.overloadable_operator = function() {
  var localctx = new Overloadable_operatorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 288, CSharpParser.RULE_overloadable_operator);
  try {
    this.state = 1813;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1791;
        this.match(CSharpParser.PLUS);
        break;

      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1792;
        this.match(CSharpParser.MINUS);
        break;

      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 1793;
        this.match(CSharpParser.BANG);
        break;

      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 1794;
        this.match(CSharpParser.TILDE);
        break;

      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 1795;
        this.match(CSharpParser.OP_INC);
        break;

      case 6:
        this.enterOuterAlt(localctx, 6);
        this.state = 1796;
        this.match(CSharpParser.OP_DEC);
        break;

      case 7:
        this.enterOuterAlt(localctx, 7);
        this.state = 1797;
        this.match(CSharpParser.TRUE);
        break;

      case 8:
        this.enterOuterAlt(localctx, 8);
        this.state = 1798;
        this.match(CSharpParser.FALSE);
        break;

      case 9:
        this.enterOuterAlt(localctx, 9);
        this.state = 1799;
        this.match(CSharpParser.STAR);
        break;

      case 10:
        this.enterOuterAlt(localctx, 10);
        this.state = 1800;
        this.match(CSharpParser.DIV);
        break;

      case 11:
        this.enterOuterAlt(localctx, 11);
        this.state = 1801;
        this.match(CSharpParser.PERCENT);
        break;

      case 12:
        this.enterOuterAlt(localctx, 12);
        this.state = 1802;
        this.match(CSharpParser.AMP);
        break;

      case 13:
        this.enterOuterAlt(localctx, 13);
        this.state = 1803;
        this.match(CSharpParser.BITWISE_OR);
        break;

      case 14:
        this.enterOuterAlt(localctx, 14);
        this.state = 1804;
        this.match(CSharpParser.CARET);
        break;

      case 15:
        this.enterOuterAlt(localctx, 15);
        this.state = 1805;
        this.match(CSharpParser.OP_LEFT_SHIFT);
        break;

      case 16:
        this.enterOuterAlt(localctx, 16);
        this.state = 1806;
        this.right_shift();
        break;

      case 17:
        this.enterOuterAlt(localctx, 17);
        this.state = 1807;
        this.match(CSharpParser.OP_EQ);
        break;

      case 18:
        this.enterOuterAlt(localctx, 18);
        this.state = 1808;
        this.match(CSharpParser.OP_NE);
        break;

      case 19:
        this.enterOuterAlt(localctx, 19);
        this.state = 1809;
        this.match(CSharpParser.GT);
        break;

      case 20:
        this.enterOuterAlt(localctx, 20);
        this.state = 1810;
        this.match(CSharpParser.LT);
        break;

      case 21:
        this.enterOuterAlt(localctx, 21);
        this.state = 1811;
        this.match(CSharpParser.OP_GE);
        break;

      case 22:
        this.enterOuterAlt(localctx, 22);
        this.state = 1812;
        this.match(CSharpParser.OP_LE);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Conversion_operator_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_conversion_operator_declarator;
  return this;
}

Conversion_operator_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Conversion_operator_declaratorContext.prototype.constructor = Conversion_operator_declaratorContext;

Conversion_operator_declaratorContext.prototype.OPERATOR = function() {
  return this.getToken(CSharpParser.OPERATOR, 0);
};

Conversion_operator_declaratorContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Conversion_operator_declaratorContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Conversion_operator_declaratorContext.prototype.arg_declaration = function() {
  return this.getTypedRuleContext(Arg_declarationContext, 0);
};

Conversion_operator_declaratorContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Conversion_operator_declaratorContext.prototype.IMPLICIT = function() {
  return this.getToken(CSharpParser.IMPLICIT, 0);
};

Conversion_operator_declaratorContext.prototype.EXPLICIT = function() {
  return this.getToken(CSharpParser.EXPLICIT, 0);
};

Conversion_operator_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConversion_operator_declarator(this);
  }
};

Conversion_operator_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConversion_operator_declarator(this);
  }
};

CSharpParser.Conversion_operator_declaratorContext = Conversion_operator_declaratorContext;

CSharpParser.prototype.conversion_operator_declarator = function() {
  var localctx = new Conversion_operator_declaratorContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    290,
    CSharpParser.RULE_conversion_operator_declarator
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1815;
    _la = this._input.LA(1);
    if (!(_la === CSharpParser.EXPLICIT || _la === CSharpParser.IMPLICIT)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
    this.state = 1816;
    this.match(CSharpParser.OPERATOR);
    this.state = 1817;
    this.type();
    this.state = 1818;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 1819;
    this.arg_declaration();
    this.state = 1820;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Constructor_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_constructor_initializer;
  return this;
}

Constructor_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Constructor_initializerContext.prototype.constructor = Constructor_initializerContext;

Constructor_initializerContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_initializerContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_initializerContext.prototype.BASE = function() {
  return this.getToken(CSharpParser.BASE, 0);
};

Constructor_initializerContext.prototype.THIS = function() {
  return this.getToken(CSharpParser.THIS, 0);
};

Constructor_initializerContext.prototype.argument_list = function() {
  return this.getTypedRuleContext(Argument_listContext, 0);
};

Constructor_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConstructor_initializer(this);
  }
};

Constructor_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConstructor_initializer(this);
  }
};

CSharpParser.Constructor_initializerContext = Constructor_initializerContext;

CSharpParser.prototype.constructor_initializer = function() {
  var localctx = new Constructor_initializerContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 292, CSharpParser.RULE_constructor_initializer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1822;
    this.match(CSharpParser.COLON);
    this.state = 1823;
    _la = this._input.LA(1);
    if (!(_la === CSharpParser.BASE || _la === CSharpParser.THIS)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
    this.state = 1824;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 1826;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.OUT - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REF - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.VOID - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0) ||
      (((_la - 134) & ~0x1f) == 0 &&
        ((1 << (_la - 134)) &
          ((1 << (CSharpParser.PLUS - 134)) |
            (1 << (CSharpParser.MINUS - 134)) |
            (1 << (CSharpParser.STAR - 134)) |
            (1 << (CSharpParser.AMP - 134)) |
            (1 << (CSharpParser.BANG - 134)) |
            (1 << (CSharpParser.TILDE - 134)) |
            (1 << (CSharpParser.OP_INC - 134)) |
            (1 << (CSharpParser.OP_DEC - 134)))) !==
          0)
    ) {
      this.state = 1825;
      this.argument_list();
    }

    this.state = 1828;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function BodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_body;
  return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.block = function() {
  return this.getTypedRuleContext(BlockContext, 0);
};

BodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBody(this);
  }
};

BodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBody(this);
  }
};

CSharpParser.BodyContext = BodyContext;

CSharpParser.prototype.body = function() {
  var localctx = new BodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 294, CSharpParser.RULE_body);
  try {
    this.state = 1832;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 1830;
        this.block();
        break;
      case CSharpParser.SEMICOLON:
        this.enterOuterAlt(localctx, 2);
        this.state = 1831;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Struct_interfacesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_struct_interfaces;
  return this;
}

Struct_interfacesContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Struct_interfacesContext.prototype.constructor = Struct_interfacesContext;

Struct_interfacesContext.prototype.interface_type_list = function() {
  return this.getTypedRuleContext(Interface_type_listContext, 0);
};

Struct_interfacesContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterStruct_interfaces(this);
  }
};

Struct_interfacesContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitStruct_interfaces(this);
  }
};

CSharpParser.Struct_interfacesContext = Struct_interfacesContext;

CSharpParser.prototype.struct_interfaces = function() {
  var localctx = new Struct_interfacesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 296, CSharpParser.RULE_struct_interfaces);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1834;
    this.match(CSharpParser.COLON);
    this.state = 1835;
    this.interface_type_list();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Struct_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_struct_body;
  return this;
}

Struct_bodyContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Struct_bodyContext.prototype.constructor = Struct_bodyContext;

Struct_bodyContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Struct_bodyContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Struct_bodyContext.prototype.struct_member_declaration = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Struct_member_declarationContext);
  } else {
    return this.getTypedRuleContext(Struct_member_declarationContext, i);
  }
};

Struct_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterStruct_body(this);
  }
};

Struct_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitStruct_body(this);
  }
};

CSharpParser.Struct_bodyContext = Struct_bodyContext;

CSharpParser.prototype.struct_body = function() {
  var localctx = new Struct_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 298, CSharpParser.RULE_struct_body);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1837;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 1841;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ABSTRACT) |
            (1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CLASS) |
            (1 << CSharpParser.CONST) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.ENUM - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.EVENT - 32)) |
            (1 << (CSharpParser.EXPLICIT - 32)) |
            (1 << (CSharpParser.EXTERN - 32)) |
            (1 << (CSharpParser.FIXED - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.IMPLICIT - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTERFACE - 32)) |
            (1 << (CSharpParser.INTERNAL - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.OVERRIDE - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.PRIVATE - 64)) |
            (1 << (CSharpParser.PROTECTED - 64)) |
            (1 << (CSharpParser.PUBLIC - 64)) |
            (1 << (CSharpParser.READONLY - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SEALED - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.STATIC - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.STRUCT - 64)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.UNSAFE - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VIRTUAL - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.VOLATILE - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0)
    ) {
      this.state = 1838;
      this.struct_member_declaration();
      this.state = 1843;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 1844;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Struct_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_struct_member_declaration;
  return this;
}

Struct_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Struct_member_declarationContext.prototype.constructor = Struct_member_declarationContext;

Struct_member_declarationContext.prototype.common_member_declaration = function() {
  return this.getTypedRuleContext(Common_member_declarationContext, 0);
};

Struct_member_declarationContext.prototype.FIXED = function() {
  return this.getToken(CSharpParser.FIXED, 0);
};

Struct_member_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Struct_member_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Struct_member_declarationContext.prototype.all_member_modifiers = function() {
  return this.getTypedRuleContext(All_member_modifiersContext, 0);
};

Struct_member_declarationContext.prototype.fixed_size_buffer_declarator = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Fixed_size_buffer_declaratorContext);
  } else {
    return this.getTypedRuleContext(Fixed_size_buffer_declaratorContext, i);
  }
};

Struct_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterStruct_member_declaration(this);
  }
};

Struct_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitStruct_member_declaration(this);
  }
};

CSharpParser.Struct_member_declarationContext = Struct_member_declarationContext;

CSharpParser.prototype.struct_member_declaration = function() {
  var localctx = new Struct_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 300, CSharpParser.RULE_struct_member_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1847;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1846;
      this.attributes();
    }

    this.state = 1850;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
    if (la_ === 1) {
      this.state = 1849;
      this.all_member_modifiers();
    }
    this.state = 1862;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CLASS:
      case CSharpParser.CONST:
      case CSharpParser.DECIMAL:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.ENUM:
      case CSharpParser.EQUALS:
      case CSharpParser.EVENT:
      case CSharpParser.EXPLICIT:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.IMPLICIT:
      case CSharpParser.INT:
      case CSharpParser.INTERFACE:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.STRING:
      case CSharpParser.STRUCT:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.VOID:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.OPEN_PARENS:
        this.state = 1852;
        this.common_member_declaration();
        break;
      case CSharpParser.FIXED:
        this.state = 1853;
        this.match(CSharpParser.FIXED);
        this.state = 1854;
        this.type();
        this.state = 1856;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 1855;
          this.fixed_size_buffer_declarator();
          this.state = 1858;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BY))) !==
              0) ||
          (((_la - 33) & ~0x1f) == 0 &&
            ((1 << (_la - 33)) &
              ((1 << (CSharpParser.DESCENDING - 33)) |
                (1 << (CSharpParser.DYNAMIC - 33)) |
                (1 << (CSharpParser.EQUALS - 33)) |
                (1 << (CSharpParser.FROM - 33)) |
                (1 << (CSharpParser.GET - 33)) |
                (1 << (CSharpParser.GROUP - 33)) |
                (1 << (CSharpParser.INTO - 33)) |
                (1 << (CSharpParser.JOIN - 33)) |
                (1 << (CSharpParser.LET - 33)))) !==
              0) ||
          (((_la - 65) & ~0x1f) == 0 &&
            ((1 << (_la - 65)) &
              ((1 << (CSharpParser.NAMEOF - 65)) |
                (1 << (CSharpParser.ON - 65)) |
                (1 << (CSharpParser.ORDERBY - 65)) |
                (1 << (CSharpParser.PARTIAL - 65)) |
                (1 << (CSharpParser.REMOVE - 65)) |
                (1 << (CSharpParser.SELECT - 65)) |
                (1 << (CSharpParser.SET - 65)))) !==
              0) ||
          (((_la - 106) & ~0x1f) == 0 &&
            ((1 << (_la - 106)) &
              ((1 << (CSharpParser.VAR - 106)) |
                (1 << (CSharpParser.WHEN - 106)) |
                (1 << (CSharpParser.WHERE - 106)) |
                (1 << (CSharpParser.YIELD - 106)) |
                (1 << (CSharpParser.IDENTIFIER - 106)))) !==
              0)
        );
        this.state = 1860;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Array_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_array_type;
  return this;
}

Array_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_typeContext.prototype.constructor = Array_typeContext;

Array_typeContext.prototype.base_type = function() {
  return this.getTypedRuleContext(Base_typeContext, 0);
};

Array_typeContext.prototype.rank_specifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Rank_specifierContext);
  } else {
    return this.getTypedRuleContext(Rank_specifierContext, i);
  }
};

Array_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterArray_type(this);
  }
};

Array_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitArray_type(this);
  }
};

CSharpParser.Array_typeContext = Array_typeContext;

CSharpParser.prototype.array_type = function() {
  var localctx = new Array_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 302, CSharpParser.RULE_array_type);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1864;
    this.base_type();
    this.state = 1872;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 1868;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      while (_la === CSharpParser.STAR || _la === CSharpParser.INTERR) {
        this.state = 1865;
        _la = this._input.LA(1);
        if (!(_la === CSharpParser.STAR || _la === CSharpParser.INTERR)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 1870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      }
      this.state = 1871;
      this.rank_specifier();
      this.state = 1874;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (
      ((_la - 126) & ~0x1f) == 0 &&
      ((1 << (_la - 126)) &
        ((1 << (CSharpParser.OPEN_BRACKET - 126)) |
          (1 << (CSharpParser.STAR - 126)) |
          (1 << (CSharpParser.INTERR - 126)))) !==
        0
    );
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Rank_specifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_rank_specifier;
  return this;
}

Rank_specifierContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Rank_specifierContext.prototype.constructor = Rank_specifierContext;

Rank_specifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterRank_specifier(this);
  }
};

Rank_specifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitRank_specifier(this);
  }
};

CSharpParser.Rank_specifierContext = Rank_specifierContext;

CSharpParser.prototype.rank_specifier = function() {
  var localctx = new Rank_specifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 304, CSharpParser.RULE_rank_specifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1876;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 1880;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1877;
      this.match(CSharpParser.COMMA);
      this.state = 1882;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 1883;
    this.match(CSharpParser.CLOSE_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Array_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_array_initializer;
  return this;
}

Array_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Array_initializerContext.prototype.constructor = Array_initializerContext;

Array_initializerContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Array_initializerContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Array_initializerContext.prototype.variable_initializer = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Variable_initializerContext);
  } else {
    return this.getTypedRuleContext(Variable_initializerContext, i);
  }
};

Array_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterArray_initializer(this);
  }
};

Array_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitArray_initializer(this);
  }
};

CSharpParser.Array_initializerContext = Array_initializerContext;

CSharpParser.prototype.array_initializer = function() {
  var localctx = new Array_initializerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 306, CSharpParser.RULE_array_initializer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1885;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 1897;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_BRACE - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0) ||
      (((_la - 134) & ~0x1f) == 0 &&
        ((1 << (_la - 134)) &
          ((1 << (CSharpParser.PLUS - 134)) |
            (1 << (CSharpParser.MINUS - 134)) |
            (1 << (CSharpParser.STAR - 134)) |
            (1 << (CSharpParser.AMP - 134)) |
            (1 << (CSharpParser.BANG - 134)) |
            (1 << (CSharpParser.TILDE - 134)) |
            (1 << (CSharpParser.OP_INC - 134)) |
            (1 << (CSharpParser.OP_DEC - 134)))) !==
          0)
    ) {
      this.state = 1886;
      this.variable_initializer();
      this.state = 1891;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 215, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1887;
          this.match(CSharpParser.COMMA);
          this.state = 1888;
          this.variable_initializer();
        }
        this.state = 1893;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 215, this._ctx);
      }

      this.state = 1895;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CSharpParser.COMMA) {
        this.state = 1894;
        this.match(CSharpParser.COMMA);
      }
    }

    this.state = 1899;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Variant_type_parameter_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_variant_type_parameter_list;
  return this;
}

Variant_type_parameter_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Variant_type_parameter_listContext.prototype.constructor = Variant_type_parameter_listContext;

Variant_type_parameter_listContext.prototype.variant_type_parameter = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Variant_type_parameterContext);
  } else {
    return this.getTypedRuleContext(Variant_type_parameterContext, i);
  }
};

Variant_type_parameter_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterVariant_type_parameter_list(this);
  }
};

Variant_type_parameter_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitVariant_type_parameter_list(this);
  }
};

CSharpParser.Variant_type_parameter_listContext = Variant_type_parameter_listContext;

CSharpParser.prototype.variant_type_parameter_list = function() {
  var localctx = new Variant_type_parameter_listContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 308, CSharpParser.RULE_variant_type_parameter_list);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1901;
    this.match(CSharpParser.LT);
    this.state = 1902;
    this.variant_type_parameter();
    this.state = 1907;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 1903;
      this.match(CSharpParser.COMMA);
      this.state = 1904;
      this.variant_type_parameter();
      this.state = 1909;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 1910;
    this.match(CSharpParser.GT);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Variant_type_parameterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_variant_type_parameter;
  return this;
}

Variant_type_parameterContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Variant_type_parameterContext.prototype.constructor = Variant_type_parameterContext;

Variant_type_parameterContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Variant_type_parameterContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Variant_type_parameterContext.prototype.variance_annotation = function() {
  return this.getTypedRuleContext(Variance_annotationContext, 0);
};

Variant_type_parameterContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterVariant_type_parameter(this);
  }
};

Variant_type_parameterContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitVariant_type_parameter(this);
  }
};

CSharpParser.Variant_type_parameterContext = Variant_type_parameterContext;

CSharpParser.prototype.variant_type_parameter = function() {
  var localctx = new Variant_type_parameterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 310, CSharpParser.RULE_variant_type_parameter);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1913;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1912;
      this.attributes();
    }

    this.state = 1916;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.IN || _la === CSharpParser.OUT) {
      this.state = 1915;
      this.variance_annotation();
    }

    this.state = 1918;
    this.identifier();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Variance_annotationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_variance_annotation;
  return this;
}

Variance_annotationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Variance_annotationContext.prototype.constructor = Variance_annotationContext;

Variance_annotationContext.prototype.IN = function() {
  return this.getToken(CSharpParser.IN, 0);
};

Variance_annotationContext.prototype.OUT = function() {
  return this.getToken(CSharpParser.OUT, 0);
};

Variance_annotationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterVariance_annotation(this);
  }
};

Variance_annotationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitVariance_annotation(this);
  }
};

CSharpParser.Variance_annotationContext = Variance_annotationContext;

CSharpParser.prototype.variance_annotation = function() {
  var localctx = new Variance_annotationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 312, CSharpParser.RULE_variance_annotation);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1920;
    _la = this._input.LA(1);
    if (!(_la === CSharpParser.IN || _la === CSharpParser.OUT)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_baseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interface_base;
  return this;
}

Interface_baseContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interface_baseContext.prototype.constructor = Interface_baseContext;

Interface_baseContext.prototype.interface_type_list = function() {
  return this.getTypedRuleContext(Interface_type_listContext, 0);
};

Interface_baseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterface_base(this);
  }
};

Interface_baseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterface_base(this);
  }
};

CSharpParser.Interface_baseContext = Interface_baseContext;

CSharpParser.prototype.interface_base = function() {
  var localctx = new Interface_baseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 314, CSharpParser.RULE_interface_base);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1922;
    this.match(CSharpParser.COLON);
    this.state = 1923;
    this.interface_type_list();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interface_body;
  return this;
}

Interface_bodyContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interface_bodyContext.prototype.constructor = Interface_bodyContext;

Interface_bodyContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Interface_bodyContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Interface_bodyContext.prototype.interface_member_declaration = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Interface_member_declarationContext);
  } else {
    return this.getTypedRuleContext(Interface_member_declarationContext, i);
  }
};

Interface_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterface_body(this);
  }
};

Interface_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterface_body(this);
  }
};

CSharpParser.Interface_bodyContext = Interface_bodyContext;

CSharpParser.prototype.interface_body = function() {
  var localctx = new Interface_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 316, CSharpParser.RULE_interface_body);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1925;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 1929;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DOUBLE - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.EVENT - 33)) |
            (1 << (CSharpParser.FLOAT - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INT - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)) |
            (1 << (CSharpParser.LONG - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.NEW - 65)) |
            (1 << (CSharpParser.OBJECT - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SBYTE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)) |
            (1 << (CSharpParser.SHORT - 65)) |
            (1 << (CSharpParser.STRING - 65)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.UNSAFE - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0)
    ) {
      this.state = 1926;
      this.interface_member_declaration();
      this.state = 1931;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 1932;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interface_member_declaration;
  return this;
}

Interface_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interface_member_declarationContext.prototype.constructor = Interface_member_declarationContext;

Interface_member_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Interface_member_declarationContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};

Interface_member_declarationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Interface_member_declarationContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Interface_member_declarationContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Interface_member_declarationContext.prototype.EVENT = function() {
  return this.getToken(CSharpParser.EVENT, 0);
};

Interface_member_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Interface_member_declarationContext.prototype.NEW = function() {
  return this.getToken(CSharpParser.NEW, 0);
};

Interface_member_declarationContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Interface_member_declarationContext.prototype.interface_accessors = function() {
  return this.getTypedRuleContext(Interface_accessorsContext, 0);
};

Interface_member_declarationContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Interface_member_declarationContext.prototype.THIS = function() {
  return this.getToken(CSharpParser.THIS, 0);
};

Interface_member_declarationContext.prototype.formal_parameter_list = function() {
  return this.getTypedRuleContext(Formal_parameter_listContext, 0);
};

Interface_member_declarationContext.prototype.UNSAFE = function() {
  return this.getToken(CSharpParser.UNSAFE, 0);
};

Interface_member_declarationContext.prototype.type_parameter_list = function() {
  return this.getTypedRuleContext(Type_parameter_listContext, 0);
};

Interface_member_declarationContext.prototype.type_parameter_constraints_clauses = function() {
  return this.getTypedRuleContext(Type_parameter_constraints_clausesContext, 0);
};

Interface_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterface_member_declaration(this);
  }
};

Interface_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterface_member_declaration(this);
  }
};

CSharpParser.Interface_member_declarationContext = Interface_member_declarationContext;

CSharpParser.prototype.interface_member_declaration = function() {
  var localctx = new Interface_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 318, CSharpParser.RULE_interface_member_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1935;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1934;
      this.attributes();
    }

    this.state = 1938;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.NEW) {
      this.state = 1937;
      this.match(CSharpParser.NEW);
    }

    this.state = 1996;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 233, this._ctx);
    switch (la_) {
      case 1:
        this.state = 1941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.UNSAFE) {
          this.state = 1940;
          this.match(CSharpParser.UNSAFE);
        }

        this.state = 1943;
        this.type();
        this.state = 1971;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 228, this._ctx);
        switch (la_) {
          case 1:
            this.state = 1944;
            this.identifier();
            this.state = 1946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CSharpParser.LT) {
              this.state = 1945;
              this.type_parameter_list();
            }

            this.state = 1948;
            this.match(CSharpParser.OPEN_PARENS);
            this.state = 1950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (
              ((_la & ~0x1f) == 0 &&
                ((1 << _la) &
                  ((1 << CSharpParser.ADD) |
                    (1 << CSharpParser.ALIAS) |
                    (1 << CSharpParser.ARGLIST) |
                    (1 << CSharpParser.ASCENDING) |
                    (1 << CSharpParser.ASYNC) |
                    (1 << CSharpParser.AWAIT) |
                    (1 << CSharpParser.BOOL) |
                    (1 << CSharpParser.BY) |
                    (1 << CSharpParser.BYTE) |
                    (1 << CSharpParser.CHAR) |
                    (1 << CSharpParser.DECIMAL))) !==
                  0) ||
              (((_la - 33) & ~0x1f) == 0 &&
                ((1 << (_la - 33)) &
                  ((1 << (CSharpParser.DESCENDING - 33)) |
                    (1 << (CSharpParser.DOUBLE - 33)) |
                    (1 << (CSharpParser.DYNAMIC - 33)) |
                    (1 << (CSharpParser.EQUALS - 33)) |
                    (1 << (CSharpParser.FLOAT - 33)) |
                    (1 << (CSharpParser.FROM - 33)) |
                    (1 << (CSharpParser.GET - 33)) |
                    (1 << (CSharpParser.GROUP - 33)) |
                    (1 << (CSharpParser.INT - 33)) |
                    (1 << (CSharpParser.INTO - 33)) |
                    (1 << (CSharpParser.JOIN - 33)) |
                    (1 << (CSharpParser.LET - 33)) |
                    (1 << (CSharpParser.LONG - 33)))) !==
                  0) ||
              (((_la - 65) & ~0x1f) == 0 &&
                ((1 << (_la - 65)) &
                  ((1 << (CSharpParser.NAMEOF - 65)) |
                    (1 << (CSharpParser.OBJECT - 65)) |
                    (1 << (CSharpParser.ON - 65)) |
                    (1 << (CSharpParser.ORDERBY - 65)) |
                    (1 << (CSharpParser.OUT - 65)) |
                    (1 << (CSharpParser.PARAMS - 65)) |
                    (1 << (CSharpParser.PARTIAL - 65)) |
                    (1 << (CSharpParser.REF - 65)) |
                    (1 << (CSharpParser.REMOVE - 65)) |
                    (1 << (CSharpParser.SBYTE - 65)) |
                    (1 << (CSharpParser.SELECT - 65)) |
                    (1 << (CSharpParser.SET - 65)) |
                    (1 << (CSharpParser.SHORT - 65)) |
                    (1 << (CSharpParser.STRING - 65)) |
                    (1 << (CSharpParser.THIS - 65)))) !==
                  0) ||
              (((_la - 100) & ~0x1f) == 0 &&
                ((1 << (_la - 100)) &
                  ((1 << (CSharpParser.UINT - 100)) |
                    (1 << (CSharpParser.ULONG - 100)) |
                    (1 << (CSharpParser.USHORT - 100)) |
                    (1 << (CSharpParser.VAR - 100)) |
                    (1 << (CSharpParser.VOID - 100)) |
                    (1 << (CSharpParser.WHEN - 100)) |
                    (1 << (CSharpParser.WHERE - 100)) |
                    (1 << (CSharpParser.YIELD - 100)) |
                    (1 << (CSharpParser.IDENTIFIER - 100)) |
                    (1 << (CSharpParser.OPEN_BRACKET - 100)) |
                    (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
                  0)
            ) {
              this.state = 1949;
              this.formal_parameter_list();
            }

            this.state = 1952;
            this.match(CSharpParser.CLOSE_PARENS);
            this.state = 1954;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === CSharpParser.WHERE) {
              this.state = 1953;
              this.type_parameter_constraints_clauses();
            }

            this.state = 1956;
            this.match(CSharpParser.SEMICOLON);
            break;

          case 2:
            this.state = 1958;
            this.identifier();
            this.state = 1959;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 1960;
            this.interface_accessors();
            this.state = 1961;
            this.match(CSharpParser.CLOSE_BRACE);
            break;

          case 3:
            this.state = 1963;
            this.match(CSharpParser.THIS);
            this.state = 1964;
            this.match(CSharpParser.OPEN_BRACKET);
            this.state = 1965;
            this.formal_parameter_list();
            this.state = 1966;
            this.match(CSharpParser.CLOSE_BRACKET);
            this.state = 1967;
            this.match(CSharpParser.OPEN_BRACE);
            this.state = 1968;
            this.interface_accessors();
            this.state = 1969;
            this.match(CSharpParser.CLOSE_BRACE);
            break;
        }
        break;

      case 2:
        this.state = 1974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.UNSAFE) {
          this.state = 1973;
          this.match(CSharpParser.UNSAFE);
        }

        this.state = 1976;
        this.match(CSharpParser.VOID);
        this.state = 1977;
        this.identifier();
        this.state = 1979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.LT) {
          this.state = 1978;
          this.type_parameter_list();
        }

        this.state = 1981;
        this.match(CSharpParser.OPEN_PARENS);
        this.state = 1983;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (
          ((_la & ~0x1f) == 0 &&
            ((1 << _la) &
              ((1 << CSharpParser.ADD) |
                (1 << CSharpParser.ALIAS) |
                (1 << CSharpParser.ARGLIST) |
                (1 << CSharpParser.ASCENDING) |
                (1 << CSharpParser.ASYNC) |
                (1 << CSharpParser.AWAIT) |
                (1 << CSharpParser.BOOL) |
                (1 << CSharpParser.BY) |
                (1 << CSharpParser.BYTE) |
                (1 << CSharpParser.CHAR) |
                (1 << CSharpParser.DECIMAL))) !==
              0) ||
          (((_la - 33) & ~0x1f) == 0 &&
            ((1 << (_la - 33)) &
              ((1 << (CSharpParser.DESCENDING - 33)) |
                (1 << (CSharpParser.DOUBLE - 33)) |
                (1 << (CSharpParser.DYNAMIC - 33)) |
                (1 << (CSharpParser.EQUALS - 33)) |
                (1 << (CSharpParser.FLOAT - 33)) |
                (1 << (CSharpParser.FROM - 33)) |
                (1 << (CSharpParser.GET - 33)) |
                (1 << (CSharpParser.GROUP - 33)) |
                (1 << (CSharpParser.INT - 33)) |
                (1 << (CSharpParser.INTO - 33)) |
                (1 << (CSharpParser.JOIN - 33)) |
                (1 << (CSharpParser.LET - 33)) |
                (1 << (CSharpParser.LONG - 33)))) !==
              0) ||
          (((_la - 65) & ~0x1f) == 0 &&
            ((1 << (_la - 65)) &
              ((1 << (CSharpParser.NAMEOF - 65)) |
                (1 << (CSharpParser.OBJECT - 65)) |
                (1 << (CSharpParser.ON - 65)) |
                (1 << (CSharpParser.ORDERBY - 65)) |
                (1 << (CSharpParser.OUT - 65)) |
                (1 << (CSharpParser.PARAMS - 65)) |
                (1 << (CSharpParser.PARTIAL - 65)) |
                (1 << (CSharpParser.REF - 65)) |
                (1 << (CSharpParser.REMOVE - 65)) |
                (1 << (CSharpParser.SBYTE - 65)) |
                (1 << (CSharpParser.SELECT - 65)) |
                (1 << (CSharpParser.SET - 65)) |
                (1 << (CSharpParser.SHORT - 65)) |
                (1 << (CSharpParser.STRING - 65)) |
                (1 << (CSharpParser.THIS - 65)))) !==
              0) ||
          (((_la - 100) & ~0x1f) == 0 &&
            ((1 << (_la - 100)) &
              ((1 << (CSharpParser.UINT - 100)) |
                (1 << (CSharpParser.ULONG - 100)) |
                (1 << (CSharpParser.USHORT - 100)) |
                (1 << (CSharpParser.VAR - 100)) |
                (1 << (CSharpParser.VOID - 100)) |
                (1 << (CSharpParser.WHEN - 100)) |
                (1 << (CSharpParser.WHERE - 100)) |
                (1 << (CSharpParser.YIELD - 100)) |
                (1 << (CSharpParser.IDENTIFIER - 100)) |
                (1 << (CSharpParser.OPEN_BRACKET - 100)) |
                (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
              0)
        ) {
          this.state = 1982;
          this.formal_parameter_list();
        }

        this.state = 1985;
        this.match(CSharpParser.CLOSE_PARENS);
        this.state = 1987;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.WHERE) {
          this.state = 1986;
          this.type_parameter_constraints_clauses();
        }

        this.state = 1989;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 3:
        this.state = 1991;
        this.match(CSharpParser.EVENT);
        this.state = 1992;
        this.type();
        this.state = 1993;
        this.identifier();
        this.state = 1994;
        this.match(CSharpParser.SEMICOLON);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_accessorsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interface_accessors;
  return this;
}

Interface_accessorsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interface_accessorsContext.prototype.constructor = Interface_accessorsContext;

Interface_accessorsContext.prototype.GET = function() {
  return this.getToken(CSharpParser.GET, 0);
};

Interface_accessorsContext.prototype.SET = function() {
  return this.getToken(CSharpParser.SET, 0);
};

Interface_accessorsContext.prototype.attributes = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(AttributesContext);
  } else {
    return this.getTypedRuleContext(AttributesContext, i);
  }
};

Interface_accessorsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterface_accessors(this);
  }
};

Interface_accessorsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterface_accessors(this);
  }
};

CSharpParser.Interface_accessorsContext = Interface_accessorsContext;

CSharpParser.prototype.interface_accessors = function() {
  var localctx = new Interface_accessorsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 320, CSharpParser.RULE_interface_accessors);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1999;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 1998;
      this.attributes();
    }

    this.state = 2019;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.GET:
        this.state = 2001;
        this.match(CSharpParser.GET);
        this.state = 2002;
        this.match(CSharpParser.SEMICOLON);
        this.state = 2008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.SET || _la === CSharpParser.OPEN_BRACKET) {
          this.state = 2004;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CSharpParser.OPEN_BRACKET) {
            this.state = 2003;
            this.attributes();
          }

          this.state = 2006;
          this.match(CSharpParser.SET);
          this.state = 2007;
          this.match(CSharpParser.SEMICOLON);
        }

        break;
      case CSharpParser.SET:
        this.state = 2010;
        this.match(CSharpParser.SET);
        this.state = 2011;
        this.match(CSharpParser.SEMICOLON);
        this.state = 2017;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.GET || _la === CSharpParser.OPEN_BRACKET) {
          this.state = 2013;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === CSharpParser.OPEN_BRACKET) {
            this.state = 2012;
            this.attributes();
          }

          this.state = 2015;
          this.match(CSharpParser.GET);
          this.state = 2016;
          this.match(CSharpParser.SEMICOLON);
        }

        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Enum_baseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_enum_base;
  return this;
}

Enum_baseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_baseContext.prototype.constructor = Enum_baseContext;

Enum_baseContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Enum_baseContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEnum_base(this);
  }
};

Enum_baseContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEnum_base(this);
  }
};

CSharpParser.Enum_baseContext = Enum_baseContext;

CSharpParser.prototype.enum_base = function() {
  var localctx = new Enum_baseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 322, CSharpParser.RULE_enum_base);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2021;
    this.match(CSharpParser.COLON);
    this.state = 2022;
    this.type();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Enum_bodyContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_enum_body;
  return this;
}

Enum_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_bodyContext.prototype.constructor = Enum_bodyContext;

Enum_bodyContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Enum_bodyContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Enum_bodyContext.prototype.enum_member_declaration = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Enum_member_declarationContext);
  } else {
    return this.getTypedRuleContext(Enum_member_declarationContext, i);
  }
};

Enum_bodyContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEnum_body(this);
  }
};

Enum_bodyContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEnum_body(this);
  }
};

CSharpParser.Enum_bodyContext = Enum_bodyContext;

CSharpParser.prototype.enum_body = function() {
  var localctx = new Enum_bodyContext(this, this._ctx, this.state);
  this.enterRule(localctx, 324, CSharpParser.RULE_enum_body);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2024;
    this.match(CSharpParser.OPEN_BRACE);
    this.state = 2036;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BY))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)))) !==
          0) ||
      (((_la - 106) & ~0x1f) == 0 &&
        ((1 << (_la - 106)) &
          ((1 << (CSharpParser.VAR - 106)) |
            (1 << (CSharpParser.WHEN - 106)) |
            (1 << (CSharpParser.WHERE - 106)) |
            (1 << (CSharpParser.YIELD - 106)) |
            (1 << (CSharpParser.IDENTIFIER - 106)) |
            (1 << (CSharpParser.OPEN_BRACKET - 106)))) !==
          0)
    ) {
      this.state = 2025;
      this.enum_member_declaration();
      this.state = 2030;
      this._errHandler.sync(this);
      var _alt = this._interp.adaptivePredict(this._input, 240, this._ctx);
      while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 2026;
          this.match(CSharpParser.COMMA);
          this.state = 2027;
          this.enum_member_declaration();
        }
        this.state = 2032;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 240, this._ctx);
      }

      this.state = 2034;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === CSharpParser.COMMA) {
        this.state = 2033;
        this.match(CSharpParser.COMMA);
      }
    }

    this.state = 2038;
    this.match(CSharpParser.CLOSE_BRACE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Enum_member_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_enum_member_declaration;
  return this;
}

Enum_member_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Enum_member_declarationContext.prototype.constructor = Enum_member_declarationContext;

Enum_member_declarationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Enum_member_declarationContext.prototype.attributes = function() {
  return this.getTypedRuleContext(AttributesContext, 0);
};

Enum_member_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Enum_member_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEnum_member_declaration(this);
  }
};

Enum_member_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEnum_member_declaration(this);
  }
};

CSharpParser.Enum_member_declarationContext = Enum_member_declarationContext;

CSharpParser.prototype.enum_member_declaration = function() {
  var localctx = new Enum_member_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 326, CSharpParser.RULE_enum_member_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2041;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACKET) {
      this.state = 2040;
      this.attributes();
    }

    this.state = 2043;
    this.identifier();
    this.state = 2046;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.ASSIGNMENT) {
      this.state = 2044;
      this.match(CSharpParser.ASSIGNMENT);
      this.state = 2045;
      this.expression();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Global_attribute_sectionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_global_attribute_section;
  return this;
}

Global_attribute_sectionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Global_attribute_sectionContext.prototype.constructor = Global_attribute_sectionContext;

Global_attribute_sectionContext.prototype.global_attribute_target = function() {
  return this.getTypedRuleContext(Global_attribute_targetContext, 0);
};

Global_attribute_sectionContext.prototype.attribute_list = function() {
  return this.getTypedRuleContext(Attribute_listContext, 0);
};

Global_attribute_sectionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterGlobal_attribute_section(this);
  }
};

Global_attribute_sectionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitGlobal_attribute_section(this);
  }
};

CSharpParser.Global_attribute_sectionContext = Global_attribute_sectionContext;

CSharpParser.prototype.global_attribute_section = function() {
  var localctx = new Global_attribute_sectionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 328, CSharpParser.RULE_global_attribute_section);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2048;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 2049;
    this.global_attribute_target();
    this.state = 2050;
    this.match(CSharpParser.COLON);
    this.state = 2051;
    this.attribute_list();
    this.state = 2053;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COMMA) {
      this.state = 2052;
      this.match(CSharpParser.COMMA);
    }

    this.state = 2055;
    this.match(CSharpParser.CLOSE_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Global_attribute_targetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_global_attribute_target;
  return this;
}

Global_attribute_targetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Global_attribute_targetContext.prototype.constructor = Global_attribute_targetContext;

Global_attribute_targetContext.prototype.keyword = function() {
  return this.getTypedRuleContext(KeywordContext, 0);
};

Global_attribute_targetContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Global_attribute_targetContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterGlobal_attribute_target(this);
  }
};

Global_attribute_targetContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitGlobal_attribute_target(this);
  }
};

CSharpParser.Global_attribute_targetContext = Global_attribute_targetContext;

CSharpParser.prototype.global_attribute_target = function() {
  var localctx = new Global_attribute_targetContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 330, CSharpParser.RULE_global_attribute_target);
  try {
    this.state = 2059;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ABSTRACT:
      case CSharpParser.AS:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BREAK:
      case CSharpParser.BYTE:
      case CSharpParser.CASE:
      case CSharpParser.CATCH:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.CLASS:
      case CSharpParser.CONST:
      case CSharpParser.CONTINUE:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DO:
      case CSharpParser.DOUBLE:
      case CSharpParser.ELSE:
      case CSharpParser.ENUM:
      case CSharpParser.EVENT:
      case CSharpParser.EXPLICIT:
      case CSharpParser.EXTERN:
      case CSharpParser.FALSE:
      case CSharpParser.FINALLY:
      case CSharpParser.FIXED:
      case CSharpParser.FLOAT:
      case CSharpParser.FOR:
      case CSharpParser.FOREACH:
      case CSharpParser.GOTO:
      case CSharpParser.IF:
      case CSharpParser.IMPLICIT:
      case CSharpParser.IN:
      case CSharpParser.INT:
      case CSharpParser.INTERFACE:
      case CSharpParser.INTERNAL:
      case CSharpParser.IS:
      case CSharpParser.LOCK:
      case CSharpParser.LONG:
      case CSharpParser.NAMESPACE:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.OPERATOR:
      case CSharpParser.OUT:
      case CSharpParser.OVERRIDE:
      case CSharpParser.PARAMS:
      case CSharpParser.PRIVATE:
      case CSharpParser.PROTECTED:
      case CSharpParser.PUBLIC:
      case CSharpParser.READONLY:
      case CSharpParser.REF:
      case CSharpParser.RETURN:
      case CSharpParser.SBYTE:
      case CSharpParser.SEALED:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STACKALLOC:
      case CSharpParser.STATIC:
      case CSharpParser.STRING:
      case CSharpParser.STRUCT:
      case CSharpParser.SWITCH:
      case CSharpParser.THIS:
      case CSharpParser.THROW:
      case CSharpParser.TRUE:
      case CSharpParser.TRY:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.UNSAFE:
      case CSharpParser.USHORT:
      case CSharpParser.USING:
      case CSharpParser.VIRTUAL:
      case CSharpParser.VOID:
      case CSharpParser.VOLATILE:
      case CSharpParser.WHILE:
        this.enterOuterAlt(localctx, 1);
        this.state = 2057;
        this.keyword();
        break;
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 2);
        this.state = 2058;
        this.identifier();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AttributesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_attributes;
  return this;
}

AttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesContext.prototype.constructor = AttributesContext;

AttributesContext.prototype.attribute_section = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Attribute_sectionContext);
  } else {
    return this.getTypedRuleContext(Attribute_sectionContext, i);
  }
};

AttributesContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAttributes(this);
  }
};

AttributesContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAttributes(this);
  }
};

CSharpParser.AttributesContext = AttributesContext;

CSharpParser.prototype.attributes = function() {
  var localctx = new AttributesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 332, CSharpParser.RULE_attributes);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2062;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 2061;
      this.attribute_section();
      this.state = 2064;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (_la === CSharpParser.OPEN_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Attribute_sectionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_attribute_section;
  return this;
}

Attribute_sectionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Attribute_sectionContext.prototype.constructor = Attribute_sectionContext;

Attribute_sectionContext.prototype.attribute_list = function() {
  return this.getTypedRuleContext(Attribute_listContext, 0);
};

Attribute_sectionContext.prototype.attribute_target = function() {
  return this.getTypedRuleContext(Attribute_targetContext, 0);
};

Attribute_sectionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAttribute_section(this);
  }
};

Attribute_sectionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAttribute_section(this);
  }
};

CSharpParser.Attribute_sectionContext = Attribute_sectionContext;

CSharpParser.prototype.attribute_section = function() {
  var localctx = new Attribute_sectionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 334, CSharpParser.RULE_attribute_section);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2066;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 2070;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 248, this._ctx);
    if (la_ === 1) {
      this.state = 2067;
      this.attribute_target();
      this.state = 2068;
      this.match(CSharpParser.COLON);
    }
    this.state = 2072;
    this.attribute_list();
    this.state = 2074;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COMMA) {
      this.state = 2073;
      this.match(CSharpParser.COMMA);
    }

    this.state = 2076;
    this.match(CSharpParser.CLOSE_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Attribute_targetContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_attribute_target;
  return this;
}

Attribute_targetContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Attribute_targetContext.prototype.constructor = Attribute_targetContext;

Attribute_targetContext.prototype.keyword = function() {
  return this.getTypedRuleContext(KeywordContext, 0);
};

Attribute_targetContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Attribute_targetContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAttribute_target(this);
  }
};

Attribute_targetContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAttribute_target(this);
  }
};

CSharpParser.Attribute_targetContext = Attribute_targetContext;

CSharpParser.prototype.attribute_target = function() {
  var localctx = new Attribute_targetContext(this, this._ctx, this.state);
  this.enterRule(localctx, 336, CSharpParser.RULE_attribute_target);
  try {
    this.state = 2080;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ABSTRACT:
      case CSharpParser.AS:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BREAK:
      case CSharpParser.BYTE:
      case CSharpParser.CASE:
      case CSharpParser.CATCH:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.CLASS:
      case CSharpParser.CONST:
      case CSharpParser.CONTINUE:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DO:
      case CSharpParser.DOUBLE:
      case CSharpParser.ELSE:
      case CSharpParser.ENUM:
      case CSharpParser.EVENT:
      case CSharpParser.EXPLICIT:
      case CSharpParser.EXTERN:
      case CSharpParser.FALSE:
      case CSharpParser.FINALLY:
      case CSharpParser.FIXED:
      case CSharpParser.FLOAT:
      case CSharpParser.FOR:
      case CSharpParser.FOREACH:
      case CSharpParser.GOTO:
      case CSharpParser.IF:
      case CSharpParser.IMPLICIT:
      case CSharpParser.IN:
      case CSharpParser.INT:
      case CSharpParser.INTERFACE:
      case CSharpParser.INTERNAL:
      case CSharpParser.IS:
      case CSharpParser.LOCK:
      case CSharpParser.LONG:
      case CSharpParser.NAMESPACE:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.OPERATOR:
      case CSharpParser.OUT:
      case CSharpParser.OVERRIDE:
      case CSharpParser.PARAMS:
      case CSharpParser.PRIVATE:
      case CSharpParser.PROTECTED:
      case CSharpParser.PUBLIC:
      case CSharpParser.READONLY:
      case CSharpParser.REF:
      case CSharpParser.RETURN:
      case CSharpParser.SBYTE:
      case CSharpParser.SEALED:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STACKALLOC:
      case CSharpParser.STATIC:
      case CSharpParser.STRING:
      case CSharpParser.STRUCT:
      case CSharpParser.SWITCH:
      case CSharpParser.THIS:
      case CSharpParser.THROW:
      case CSharpParser.TRUE:
      case CSharpParser.TRY:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.UNSAFE:
      case CSharpParser.USHORT:
      case CSharpParser.USING:
      case CSharpParser.VIRTUAL:
      case CSharpParser.VOID:
      case CSharpParser.VOLATILE:
      case CSharpParser.WHILE:
        this.enterOuterAlt(localctx, 1);
        this.state = 2078;
        this.keyword();
        break;
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BY:
      case CSharpParser.DESCENDING:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.NAMEOF:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 2);
        this.state = 2079;
        this.identifier();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Attribute_listContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_attribute_list;
  return this;
}

Attribute_listContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Attribute_listContext.prototype.constructor = Attribute_listContext;

Attribute_listContext.prototype.attribute = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(AttributeContext);
  } else {
    return this.getTypedRuleContext(AttributeContext, i);
  }
};

Attribute_listContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAttribute_list(this);
  }
};

Attribute_listContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAttribute_list(this);
  }
};

CSharpParser.Attribute_listContext = Attribute_listContext;

CSharpParser.prototype.attribute_list = function() {
  var localctx = new Attribute_listContext(this, this._ctx, this.state);
  this.enterRule(localctx, 338, CSharpParser.RULE_attribute_list);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2082;
    this.attribute();
    this.state = 2087;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 251, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 2083;
        this.match(CSharpParser.COMMA);
        this.state = 2084;
        this.attribute();
      }
      this.state = 2089;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 251, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function AttributeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_attribute;
  return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.namespace_or_type_name = function() {
  return this.getTypedRuleContext(Namespace_or_type_nameContext, 0);
};

AttributeContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

AttributeContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

AttributeContext.prototype.attribute_argument = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Attribute_argumentContext);
  } else {
    return this.getTypedRuleContext(Attribute_argumentContext, i);
  }
};

AttributeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAttribute(this);
  }
};

AttributeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAttribute(this);
  }
};

CSharpParser.AttributeContext = AttributeContext;

CSharpParser.prototype.attribute = function() {
  var localctx = new AttributeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 340, CSharpParser.RULE_attribute);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2090;
    this.namespace_or_type_name();
    this.state = 2103;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_PARENS) {
      this.state = 2091;
      this.match(CSharpParser.OPEN_PARENS);
      this.state = 2100;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << CSharpParser.ADD) |
              (1 << CSharpParser.ALIAS) |
              (1 << CSharpParser.ARGLIST) |
              (1 << CSharpParser.ASCENDING) |
              (1 << CSharpParser.ASYNC) |
              (1 << CSharpParser.AWAIT) |
              (1 << CSharpParser.BASE) |
              (1 << CSharpParser.BOOL) |
              (1 << CSharpParser.BY) |
              (1 << CSharpParser.BYTE) |
              (1 << CSharpParser.CHAR) |
              (1 << CSharpParser.CHECKED) |
              (1 << CSharpParser.DECIMAL) |
              (1 << CSharpParser.DEFAULT))) !==
            0) ||
        (((_la - 32) & ~0x1f) == 0 &&
          ((1 << (_la - 32)) &
            ((1 << (CSharpParser.DELEGATE - 32)) |
              (1 << (CSharpParser.DESCENDING - 32)) |
              (1 << (CSharpParser.DOUBLE - 32)) |
              (1 << (CSharpParser.DYNAMIC - 32)) |
              (1 << (CSharpParser.EQUALS - 32)) |
              (1 << (CSharpParser.FALSE - 32)) |
              (1 << (CSharpParser.FLOAT - 32)) |
              (1 << (CSharpParser.FROM - 32)) |
              (1 << (CSharpParser.GET - 32)) |
              (1 << (CSharpParser.GROUP - 32)) |
              (1 << (CSharpParser.INT - 32)) |
              (1 << (CSharpParser.INTO - 32)) |
              (1 << (CSharpParser.JOIN - 32)) |
              (1 << (CSharpParser.LET - 32)))) !==
            0) ||
        (((_la - 64) & ~0x1f) == 0 &&
          ((1 << (_la - 64)) &
            ((1 << (CSharpParser.LONG - 64)) |
              (1 << (CSharpParser.NAMEOF - 64)) |
              (1 << (CSharpParser.NEW - 64)) |
              (1 << (CSharpParser.NULL - 64)) |
              (1 << (CSharpParser.OBJECT - 64)) |
              (1 << (CSharpParser.ON - 64)) |
              (1 << (CSharpParser.ORDERBY - 64)) |
              (1 << (CSharpParser.PARTIAL - 64)) |
              (1 << (CSharpParser.REMOVE - 64)) |
              (1 << (CSharpParser.SBYTE - 64)) |
              (1 << (CSharpParser.SELECT - 64)) |
              (1 << (CSharpParser.SET - 64)) |
              (1 << (CSharpParser.SHORT - 64)) |
              (1 << (CSharpParser.SIZEOF - 64)) |
              (1 << (CSharpParser.STRING - 64)) |
              (1 << (CSharpParser.THIS - 64)))) !==
            0) ||
        (((_la - 97) & ~0x1f) == 0 &&
          ((1 << (_la - 97)) &
            ((1 << (CSharpParser.TRUE - 97)) |
              (1 << (CSharpParser.TYPEOF - 97)) |
              (1 << (CSharpParser.UINT - 97)) |
              (1 << (CSharpParser.ULONG - 97)) |
              (1 << (CSharpParser.UNCHECKED - 97)) |
              (1 << (CSharpParser.USHORT - 97)) |
              (1 << (CSharpParser.VAR - 97)) |
              (1 << (CSharpParser.WHEN - 97)) |
              (1 << (CSharpParser.WHERE - 97)) |
              (1 << (CSharpParser.YIELD - 97)) |
              (1 << (CSharpParser.IDENTIFIER - 97)) |
              (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
              (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
              (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
              (1 << (CSharpParser.REAL_LITERAL - 97)) |
              (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
              (1 << (CSharpParser.REGULAR_STRING - 97)) |
              (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
              (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
              (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
              (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
            0) ||
        (((_la - 134) & ~0x1f) == 0 &&
          ((1 << (_la - 134)) &
            ((1 << (CSharpParser.PLUS - 134)) |
              (1 << (CSharpParser.MINUS - 134)) |
              (1 << (CSharpParser.STAR - 134)) |
              (1 << (CSharpParser.AMP - 134)) |
              (1 << (CSharpParser.BANG - 134)) |
              (1 << (CSharpParser.TILDE - 134)) |
              (1 << (CSharpParser.OP_INC - 134)) |
              (1 << (CSharpParser.OP_DEC - 134)))) !==
            0)
      ) {
        this.state = 2092;
        this.attribute_argument();
        this.state = 2097;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === CSharpParser.COMMA) {
          this.state = 2093;
          this.match(CSharpParser.COMMA);
          this.state = 2094;
          this.attribute_argument();
          this.state = 2099;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }

      this.state = 2102;
      this.match(CSharpParser.CLOSE_PARENS);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Attribute_argumentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_attribute_argument;
  return this;
}

Attribute_argumentContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Attribute_argumentContext.prototype.constructor = Attribute_argumentContext;

Attribute_argumentContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Attribute_argumentContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Attribute_argumentContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterAttribute_argument(this);
  }
};

Attribute_argumentContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitAttribute_argument(this);
  }
};

CSharpParser.Attribute_argumentContext = Attribute_argumentContext;

CSharpParser.prototype.attribute_argument = function() {
  var localctx = new Attribute_argumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 342, CSharpParser.RULE_attribute_argument);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2108;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 255, this._ctx);
    if (la_ === 1) {
      this.state = 2105;
      this.identifier();
      this.state = 2106;
      this.match(CSharpParser.COLON);
    }
    this.state = 2110;
    this.expression();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Pointer_typeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_pointer_type;
  return this;
}

Pointer_typeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Pointer_typeContext.prototype.constructor = Pointer_typeContext;

Pointer_typeContext.prototype.simple_type = function() {
  return this.getTypedRuleContext(Simple_typeContext, 0);
};

Pointer_typeContext.prototype.class_type = function() {
  return this.getTypedRuleContext(Class_typeContext, 0);
};

Pointer_typeContext.prototype.rank_specifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Rank_specifierContext);
  } else {
    return this.getTypedRuleContext(Rank_specifierContext, i);
  }
};

Pointer_typeContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};

Pointer_typeContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterPointer_type(this);
  }
};

Pointer_typeContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitPointer_type(this);
  }
};

CSharpParser.Pointer_typeContext = Pointer_typeContext;

CSharpParser.prototype.pointer_type = function() {
  var localctx = new Pointer_typeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 344, CSharpParser.RULE_pointer_type);
  var _la = 0; // Token type
  try {
    this.state = 2127;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.DECIMAL:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.STRING:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
        this.enterOuterAlt(localctx, 1);
        this.state = 2114;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case CSharpParser.BOOL:
          case CSharpParser.BYTE:
          case CSharpParser.CHAR:
          case CSharpParser.DECIMAL:
          case CSharpParser.DOUBLE:
          case CSharpParser.FLOAT:
          case CSharpParser.INT:
          case CSharpParser.LONG:
          case CSharpParser.SBYTE:
          case CSharpParser.SHORT:
          case CSharpParser.UINT:
          case CSharpParser.ULONG:
          case CSharpParser.USHORT:
            this.state = 2112;
            this.simple_type();
            break;
          case CSharpParser.ADD:
          case CSharpParser.ALIAS:
          case CSharpParser.ARGLIST:
          case CSharpParser.ASCENDING:
          case CSharpParser.ASYNC:
          case CSharpParser.AWAIT:
          case CSharpParser.BY:
          case CSharpParser.DESCENDING:
          case CSharpParser.DYNAMIC:
          case CSharpParser.EQUALS:
          case CSharpParser.FROM:
          case CSharpParser.GET:
          case CSharpParser.GROUP:
          case CSharpParser.INTO:
          case CSharpParser.JOIN:
          case CSharpParser.LET:
          case CSharpParser.NAMEOF:
          case CSharpParser.OBJECT:
          case CSharpParser.ON:
          case CSharpParser.ORDERBY:
          case CSharpParser.PARTIAL:
          case CSharpParser.REMOVE:
          case CSharpParser.SELECT:
          case CSharpParser.SET:
          case CSharpParser.STRING:
          case CSharpParser.VAR:
          case CSharpParser.WHEN:
          case CSharpParser.WHERE:
          case CSharpParser.YIELD:
          case CSharpParser.IDENTIFIER:
            this.state = 2113;
            this.class_type();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2120;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (
          _la === CSharpParser.OPEN_BRACKET ||
          _la === CSharpParser.INTERR
        ) {
          this.state = 2118;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case CSharpParser.OPEN_BRACKET:
              this.state = 2116;
              this.rank_specifier();
              break;
            case CSharpParser.INTERR:
              this.state = 2117;
              this.match(CSharpParser.INTERR);
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 2122;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 2123;
        this.match(CSharpParser.STAR);
        break;
      case CSharpParser.VOID:
        this.enterOuterAlt(localctx, 2);
        this.state = 2125;
        this.match(CSharpParser.VOID);
        this.state = 2126;
        this.match(CSharpParser.STAR);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Fixed_pointer_declaratorsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarators;
  return this;
}

Fixed_pointer_declaratorsContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Fixed_pointer_declaratorsContext.prototype.constructor = Fixed_pointer_declaratorsContext;

Fixed_pointer_declaratorsContext.prototype.fixed_pointer_declarator = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Fixed_pointer_declaratorContext);
  } else {
    return this.getTypedRuleContext(Fixed_pointer_declaratorContext, i);
  }
};

Fixed_pointer_declaratorsContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixed_pointer_declarators(this);
  }
};

Fixed_pointer_declaratorsContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixed_pointer_declarators(this);
  }
};

CSharpParser.Fixed_pointer_declaratorsContext = Fixed_pointer_declaratorsContext;

CSharpParser.prototype.fixed_pointer_declarators = function() {
  var localctx = new Fixed_pointer_declaratorsContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 346, CSharpParser.RULE_fixed_pointer_declarators);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2129;
    this.fixed_pointer_declarator();
    this.state = 2134;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 2130;
      this.match(CSharpParser.COMMA);
      this.state = 2131;
      this.fixed_pointer_declarator();
      this.state = 2136;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Fixed_pointer_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarator;
  return this;
}

Fixed_pointer_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Fixed_pointer_declaratorContext.prototype.constructor = Fixed_pointer_declaratorContext;

Fixed_pointer_declaratorContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Fixed_pointer_declaratorContext.prototype.fixed_pointer_initializer = function() {
  return this.getTypedRuleContext(Fixed_pointer_initializerContext, 0);
};

Fixed_pointer_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixed_pointer_declarator(this);
  }
};

Fixed_pointer_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixed_pointer_declarator(this);
  }
};

CSharpParser.Fixed_pointer_declaratorContext = Fixed_pointer_declaratorContext;

CSharpParser.prototype.fixed_pointer_declarator = function() {
  var localctx = new Fixed_pointer_declaratorContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 348, CSharpParser.RULE_fixed_pointer_declarator);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2137;
    this.identifier();
    this.state = 2138;
    this.match(CSharpParser.ASSIGNMENT);
    this.state = 2139;
    this.fixed_pointer_initializer();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Fixed_pointer_initializerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_fixed_pointer_initializer;
  return this;
}

Fixed_pointer_initializerContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Fixed_pointer_initializerContext.prototype.constructor = Fixed_pointer_initializerContext;

Fixed_pointer_initializerContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Fixed_pointer_initializerContext.prototype.local_variable_initializer_unsafe = function() {
  return this.getTypedRuleContext(Local_variable_initializer_unsafeContext, 0);
};

Fixed_pointer_initializerContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixed_pointer_initializer(this);
  }
};

Fixed_pointer_initializerContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixed_pointer_initializer(this);
  }
};

CSharpParser.Fixed_pointer_initializerContext = Fixed_pointer_initializerContext;

CSharpParser.prototype.fixed_pointer_initializer = function() {
  var localctx = new Fixed_pointer_initializerContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 350, CSharpParser.RULE_fixed_pointer_initializer);
  try {
    this.state = 2146;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 2142;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 261, this._ctx);
        if (la_ === 1) {
          this.state = 2141;
          this.match(CSharpParser.AMP);
        }
        this.state = 2144;
        this.expression();
        break;
      case CSharpParser.STACKALLOC:
        this.enterOuterAlt(localctx, 2);
        this.state = 2145;
        this.local_variable_initializer_unsafe();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Fixed_size_buffer_declaratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_fixed_size_buffer_declarator;
  return this;
}

Fixed_size_buffer_declaratorContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Fixed_size_buffer_declaratorContext.prototype.constructor = Fixed_size_buffer_declaratorContext;

Fixed_size_buffer_declaratorContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Fixed_size_buffer_declaratorContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Fixed_size_buffer_declaratorContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterFixed_size_buffer_declarator(this);
  }
};

Fixed_size_buffer_declaratorContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitFixed_size_buffer_declarator(this);
  }
};

CSharpParser.Fixed_size_buffer_declaratorContext = Fixed_size_buffer_declaratorContext;

CSharpParser.prototype.fixed_size_buffer_declarator = function() {
  var localctx = new Fixed_size_buffer_declaratorContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 352, CSharpParser.RULE_fixed_size_buffer_declarator);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2148;
    this.identifier();
    this.state = 2149;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 2150;
    this.expression();
    this.state = 2151;
    this.match(CSharpParser.CLOSE_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Local_variable_initializer_unsafeContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_local_variable_initializer_unsafe;
  return this;
}

Local_variable_initializer_unsafeContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Local_variable_initializer_unsafeContext.prototype.constructor = Local_variable_initializer_unsafeContext;

Local_variable_initializer_unsafeContext.prototype.STACKALLOC = function() {
  return this.getToken(CSharpParser.STACKALLOC, 0);
};

Local_variable_initializer_unsafeContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Local_variable_initializer_unsafeContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Local_variable_initializer_unsafeContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLocal_variable_initializer_unsafe(this);
  }
};

Local_variable_initializer_unsafeContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLocal_variable_initializer_unsafe(this);
  }
};

CSharpParser.Local_variable_initializer_unsafeContext = Local_variable_initializer_unsafeContext;

CSharpParser.prototype.local_variable_initializer_unsafe = function() {
  var localctx = new Local_variable_initializer_unsafeContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    354,
    CSharpParser.RULE_local_variable_initializer_unsafe
  );
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2153;
    this.match(CSharpParser.STACKALLOC);
    this.state = 2154;
    this.type();
    this.state = 2155;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 2156;
    this.expression();
    this.state = 2157;
    this.match(CSharpParser.CLOSE_BRACKET);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Right_arrowContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_right_arrow;
  this.first = null; // Token
  this.second = null; // Token
  return this;
}

Right_arrowContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Right_arrowContext.prototype.constructor = Right_arrowContext;

Right_arrowContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterRight_arrow(this);
  }
};

Right_arrowContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitRight_arrow(this);
  }
};

CSharpParser.Right_arrowContext = Right_arrowContext;

CSharpParser.prototype.right_arrow = function() {
  var localctx = new Right_arrowContext(this, this._ctx, this.state);
  this.enterRule(localctx, 356, CSharpParser.RULE_right_arrow);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2159;
    localctx.first = this.match(CSharpParser.ASSIGNMENT);
    this.state = 2160;
    localctx.second = this.match(CSharpParser.GT);
    this.state = 2161;
    if (
      !(
        (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 ==
        (localctx.second === null ? 0 : localctx.second.tokenIndex)
      )
    ) {
      throw new antlr4.error.FailedPredicateException(
        this,
        "$first.index + 1 == $second.index"
      );
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Right_shiftContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_right_shift;
  this.first = null; // Token
  this.second = null; // Token
  return this;
}

Right_shiftContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Right_shiftContext.prototype.constructor = Right_shiftContext;

Right_shiftContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterRight_shift(this);
  }
};

Right_shiftContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitRight_shift(this);
  }
};

CSharpParser.Right_shiftContext = Right_shiftContext;

CSharpParser.prototype.right_shift = function() {
  var localctx = new Right_shiftContext(this, this._ctx, this.state);
  this.enterRule(localctx, 358, CSharpParser.RULE_right_shift);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2163;
    localctx.first = this.match(CSharpParser.GT);
    this.state = 2164;
    localctx.second = this.match(CSharpParser.GT);
    this.state = 2165;
    if (
      !(
        (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 ==
        (localctx.second === null ? 0 : localctx.second.tokenIndex)
      )
    ) {
      throw new antlr4.error.FailedPredicateException(
        this,
        "$first.index + 1 == $second.index"
      );
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Right_shift_assignmentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_right_shift_assignment;
  this.first = null; // Token
  this.second = null; // Token
  return this;
}

Right_shift_assignmentContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Right_shift_assignmentContext.prototype.constructor = Right_shift_assignmentContext;

Right_shift_assignmentContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterRight_shift_assignment(this);
  }
};

Right_shift_assignmentContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitRight_shift_assignment(this);
  }
};

CSharpParser.Right_shift_assignmentContext = Right_shift_assignmentContext;

CSharpParser.prototype.right_shift_assignment = function() {
  var localctx = new Right_shift_assignmentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 360, CSharpParser.RULE_right_shift_assignment);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2167;
    localctx.first = this.match(CSharpParser.GT);
    this.state = 2168;
    localctx.second = this.match(CSharpParser.OP_GE);
    this.state = 2169;
    if (
      !(
        (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 ==
        (localctx.second === null ? 0 : localctx.second.tokenIndex)
      )
    ) {
      throw new antlr4.error.FailedPredicateException(
        this,
        "$first.index + 1 == $second.index"
      );
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function LiteralContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_literal;
  return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.boolean_literal = function() {
  return this.getTypedRuleContext(Boolean_literalContext, 0);
};

LiteralContext.prototype.string_literal = function() {
  return this.getTypedRuleContext(String_literalContext, 0);
};

LiteralContext.prototype.INTEGER_LITERAL = function() {
  return this.getToken(CSharpParser.INTEGER_LITERAL, 0);
};

LiteralContext.prototype.HEX_INTEGER_LITERAL = function() {
  return this.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0);
};

LiteralContext.prototype.REAL_LITERAL = function() {
  return this.getToken(CSharpParser.REAL_LITERAL, 0);
};

LiteralContext.prototype.CHARACTER_LITERAL = function() {
  return this.getToken(CSharpParser.CHARACTER_LITERAL, 0);
};

LiteralContext.prototype.NULL = function() {
  return this.getToken(CSharpParser.NULL, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterLiteral(this);
  }
};

LiteralContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitLiteral(this);
  }
};

CSharpParser.LiteralContext = LiteralContext;

CSharpParser.prototype.literal = function() {
  var localctx = new LiteralContext(this, this._ctx, this.state);
  this.enterRule(localctx, 362, CSharpParser.RULE_literal);
  try {
    this.state = 2178;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.FALSE:
      case CSharpParser.TRUE:
        this.enterOuterAlt(localctx, 1);
        this.state = 2171;
        this.boolean_literal();
        break;
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        this.enterOuterAlt(localctx, 2);
        this.state = 2172;
        this.string_literal();
        break;
      case CSharpParser.INTEGER_LITERAL:
        this.enterOuterAlt(localctx, 3);
        this.state = 2173;
        this.match(CSharpParser.INTEGER_LITERAL);
        break;
      case CSharpParser.HEX_INTEGER_LITERAL:
        this.enterOuterAlt(localctx, 4);
        this.state = 2174;
        this.match(CSharpParser.HEX_INTEGER_LITERAL);
        break;
      case CSharpParser.REAL_LITERAL:
        this.enterOuterAlt(localctx, 5);
        this.state = 2175;
        this.match(CSharpParser.REAL_LITERAL);
        break;
      case CSharpParser.CHARACTER_LITERAL:
        this.enterOuterAlt(localctx, 6);
        this.state = 2176;
        this.match(CSharpParser.CHARACTER_LITERAL);
        break;
      case CSharpParser.NULL:
        this.enterOuterAlt(localctx, 7);
        this.state = 2177;
        this.match(CSharpParser.NULL);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Boolean_literalContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_boolean_literal;
  return this;
}

Boolean_literalContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
  return this.getToken(CSharpParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
  return this.getToken(CSharpParser.FALSE, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterBoolean_literal(this);
  }
};

Boolean_literalContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitBoolean_literal(this);
  }
};

CSharpParser.Boolean_literalContext = Boolean_literalContext;

CSharpParser.prototype.boolean_literal = function() {
  var localctx = new Boolean_literalContext(this, this._ctx, this.state);
  this.enterRule(localctx, 364, CSharpParser.RULE_boolean_literal);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2180;
    _la = this._input.LA(1);
    if (!(_la === CSharpParser.FALSE || _la === CSharpParser.TRUE)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function String_literalContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_string_literal;
  return this;
}

String_literalContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
String_literalContext.prototype.constructor = String_literalContext;

String_literalContext.prototype.interpolated_regular_string = function() {
  return this.getTypedRuleContext(Interpolated_regular_stringContext, 0);
};

String_literalContext.prototype.interpolated_verbatium_string = function() {
  return this.getTypedRuleContext(Interpolated_verbatium_stringContext, 0);
};

String_literalContext.prototype.REGULAR_STRING = function() {
  return this.getToken(CSharpParser.REGULAR_STRING, 0);
};

String_literalContext.prototype.VERBATIUM_STRING = function() {
  return this.getToken(CSharpParser.VERBATIUM_STRING, 0);
};

String_literalContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterString_literal(this);
  }
};

String_literalContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitString_literal(this);
  }
};

CSharpParser.String_literalContext = String_literalContext;

CSharpParser.prototype.string_literal = function() {
  var localctx = new String_literalContext(this, this._ctx, this.state);
  this.enterRule(localctx, 366, CSharpParser.RULE_string_literal);
  try {
    this.state = 2186;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
        this.enterOuterAlt(localctx, 1);
        this.state = 2182;
        this.interpolated_regular_string();
        break;
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
        this.enterOuterAlt(localctx, 2);
        this.state = 2183;
        this.interpolated_verbatium_string();
        break;
      case CSharpParser.REGULAR_STRING:
        this.enterOuterAlt(localctx, 3);
        this.state = 2184;
        this.match(CSharpParser.REGULAR_STRING);
        break;
      case CSharpParser.VERBATIUM_STRING:
        this.enterOuterAlt(localctx, 4);
        this.state = 2185;
        this.match(CSharpParser.VERBATIUM_STRING);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interpolated_regular_stringContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interpolated_regular_string;
  return this;
}

Interpolated_regular_stringContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interpolated_regular_stringContext.prototype.constructor = Interpolated_regular_stringContext;

Interpolated_regular_stringContext.prototype.INTERPOLATED_REGULAR_STRING_START = function() {
  return this.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0);
};

Interpolated_regular_stringContext.prototype.DOUBLE_QUOTE_INSIDE = function() {
  return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_regular_stringContext.prototype.interpolated_regular_string_part = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Interpolated_regular_string_partContext);
  } else {
    return this.getTypedRuleContext(Interpolated_regular_string_partContext, i);
  }
};

Interpolated_regular_stringContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterpolated_regular_string(this);
  }
};

Interpolated_regular_stringContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterpolated_regular_string(this);
  }
};

CSharpParser.Interpolated_regular_stringContext = Interpolated_regular_stringContext;

CSharpParser.prototype.interpolated_regular_string = function() {
  var localctx = new Interpolated_regular_stringContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 368, CSharpParser.RULE_interpolated_regular_string);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2188;
    this.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START);
    this.state = 2192;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0) ||
      (((_la - 134) & ~0x1f) == 0 &&
        ((1 << (_la - 134)) &
          ((1 << (CSharpParser.PLUS - 134)) |
            (1 << (CSharpParser.MINUS - 134)) |
            (1 << (CSharpParser.STAR - 134)) |
            (1 << (CSharpParser.AMP - 134)) |
            (1 << (CSharpParser.BANG - 134)) |
            (1 << (CSharpParser.TILDE - 134)) |
            (1 << (CSharpParser.OP_INC - 134)) |
            (1 << (CSharpParser.OP_DEC - 134)))) !==
          0) ||
      (((_la - 169) & ~0x1f) == 0 &&
        ((1 << (_la - 169)) &
          ((1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 169)) |
            (1 << (CSharpParser.REGULAR_CHAR_INSIDE - 169)) |
            (1 << (CSharpParser.REGULAR_STRING_INSIDE - 169)))) !==
          0)
    ) {
      this.state = 2189;
      this.interpolated_regular_string_part();
      this.state = 2194;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 2195;
    this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interpolated_verbatium_stringContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string;
  return this;
}

Interpolated_verbatium_stringContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interpolated_verbatium_stringContext.prototype.constructor = Interpolated_verbatium_stringContext;

Interpolated_verbatium_stringContext.prototype.INTERPOLATED_VERBATIUM_STRING_START = function() {
  return this.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0);
};

Interpolated_verbatium_stringContext.prototype.DOUBLE_QUOTE_INSIDE = function() {
  return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_verbatium_stringContext.prototype.interpolated_verbatium_string_part = function(
  i
) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Interpolated_verbatium_string_partContext);
  } else {
    return this.getTypedRuleContext(
      Interpolated_verbatium_string_partContext,
      i
    );
  }
};

Interpolated_verbatium_stringContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterpolated_verbatium_string(this);
  }
};

Interpolated_verbatium_stringContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterpolated_verbatium_string(this);
  }
};

CSharpParser.Interpolated_verbatium_stringContext = Interpolated_verbatium_stringContext;

CSharpParser.prototype.interpolated_verbatium_string = function() {
  var localctx = new Interpolated_verbatium_stringContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    370,
    CSharpParser.RULE_interpolated_verbatium_string
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2197;
    this.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START);
    this.state = 2201;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0) ||
      (((_la - 134) & ~0x1f) == 0 &&
        ((1 << (_la - 134)) &
          ((1 << (CSharpParser.PLUS - 134)) |
            (1 << (CSharpParser.MINUS - 134)) |
            (1 << (CSharpParser.STAR - 134)) |
            (1 << (CSharpParser.AMP - 134)) |
            (1 << (CSharpParser.BANG - 134)) |
            (1 << (CSharpParser.TILDE - 134)) |
            (1 << (CSharpParser.OP_INC - 134)) |
            (1 << (CSharpParser.OP_DEC - 134)))) !==
          0) ||
      (((_la - 169) & ~0x1f) == 0 &&
        ((1 << (_la - 169)) &
          ((1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 169)) |
            (1 << (CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE - 169)) |
            (1 << (CSharpParser.VERBATIUM_INSIDE_STRING - 169)))) !==
          0)
    ) {
      this.state = 2198;
      this.interpolated_verbatium_string_part();
      this.state = 2203;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 2204;
    this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interpolated_regular_string_partContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interpolated_regular_string_part;
  return this;
}

Interpolated_regular_string_partContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interpolated_regular_string_partContext.prototype.constructor = Interpolated_regular_string_partContext;

Interpolated_regular_string_partContext.prototype.interpolated_string_expression = function() {
  return this.getTypedRuleContext(Interpolated_string_expressionContext, 0);
};

Interpolated_regular_string_partContext.prototype.DOUBLE_CURLY_INSIDE = function() {
  return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
};

Interpolated_regular_string_partContext.prototype.REGULAR_CHAR_INSIDE = function() {
  return this.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0);
};

Interpolated_regular_string_partContext.prototype.REGULAR_STRING_INSIDE = function() {
  return this.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0);
};

Interpolated_regular_string_partContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterpolated_regular_string_part(this);
  }
};

Interpolated_regular_string_partContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterpolated_regular_string_part(this);
  }
};

CSharpParser.Interpolated_regular_string_partContext = Interpolated_regular_string_partContext;

CSharpParser.prototype.interpolated_regular_string_part = function() {
  var localctx = new Interpolated_regular_string_partContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    372,
    CSharpParser.RULE_interpolated_regular_string_part
  );
  try {
    this.state = 2210;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 2206;
        this.interpolated_string_expression();
        break;
      case CSharpParser.DOUBLE_CURLY_INSIDE:
        this.enterOuterAlt(localctx, 2);
        this.state = 2207;
        this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
        break;
      case CSharpParser.REGULAR_CHAR_INSIDE:
        this.enterOuterAlt(localctx, 3);
        this.state = 2208;
        this.match(CSharpParser.REGULAR_CHAR_INSIDE);
        break;
      case CSharpParser.REGULAR_STRING_INSIDE:
        this.enterOuterAlt(localctx, 4);
        this.state = 2209;
        this.match(CSharpParser.REGULAR_STRING_INSIDE);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interpolated_verbatium_string_partContext(
  parser,
  parent,
  invokingState
) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string_part;
  return this;
}

Interpolated_verbatium_string_partContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interpolated_verbatium_string_partContext.prototype.constructor = Interpolated_verbatium_string_partContext;

Interpolated_verbatium_string_partContext.prototype.interpolated_string_expression = function() {
  return this.getTypedRuleContext(Interpolated_string_expressionContext, 0);
};

Interpolated_verbatium_string_partContext.prototype.DOUBLE_CURLY_INSIDE = function() {
  return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
};

Interpolated_verbatium_string_partContext.prototype.VERBATIUM_DOUBLE_QUOTE_INSIDE = function() {
  return this.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
};

Interpolated_verbatium_string_partContext.prototype.VERBATIUM_INSIDE_STRING = function() {
  return this.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0);
};

Interpolated_verbatium_string_partContext.prototype.enterRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterpolated_verbatium_string_part(this);
  }
};

Interpolated_verbatium_string_partContext.prototype.exitRule = function(
  listener
) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterpolated_verbatium_string_part(this);
  }
};

CSharpParser.Interpolated_verbatium_string_partContext = Interpolated_verbatium_string_partContext;

CSharpParser.prototype.interpolated_verbatium_string_part = function() {
  var localctx = new Interpolated_verbatium_string_partContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    374,
    CSharpParser.RULE_interpolated_verbatium_string_part
  );
  try {
    this.state = 2216;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.ADD:
      case CSharpParser.ALIAS:
      case CSharpParser.ARGLIST:
      case CSharpParser.ASCENDING:
      case CSharpParser.ASYNC:
      case CSharpParser.AWAIT:
      case CSharpParser.BASE:
      case CSharpParser.BOOL:
      case CSharpParser.BY:
      case CSharpParser.BYTE:
      case CSharpParser.CHAR:
      case CSharpParser.CHECKED:
      case CSharpParser.DECIMAL:
      case CSharpParser.DEFAULT:
      case CSharpParser.DELEGATE:
      case CSharpParser.DESCENDING:
      case CSharpParser.DOUBLE:
      case CSharpParser.DYNAMIC:
      case CSharpParser.EQUALS:
      case CSharpParser.FALSE:
      case CSharpParser.FLOAT:
      case CSharpParser.FROM:
      case CSharpParser.GET:
      case CSharpParser.GROUP:
      case CSharpParser.INT:
      case CSharpParser.INTO:
      case CSharpParser.JOIN:
      case CSharpParser.LET:
      case CSharpParser.LONG:
      case CSharpParser.NAMEOF:
      case CSharpParser.NEW:
      case CSharpParser.NULL:
      case CSharpParser.OBJECT:
      case CSharpParser.ON:
      case CSharpParser.ORDERBY:
      case CSharpParser.PARTIAL:
      case CSharpParser.REMOVE:
      case CSharpParser.SBYTE:
      case CSharpParser.SELECT:
      case CSharpParser.SET:
      case CSharpParser.SHORT:
      case CSharpParser.SIZEOF:
      case CSharpParser.STRING:
      case CSharpParser.THIS:
      case CSharpParser.TRUE:
      case CSharpParser.TYPEOF:
      case CSharpParser.UINT:
      case CSharpParser.ULONG:
      case CSharpParser.UNCHECKED:
      case CSharpParser.USHORT:
      case CSharpParser.VAR:
      case CSharpParser.WHEN:
      case CSharpParser.WHERE:
      case CSharpParser.YIELD:
      case CSharpParser.IDENTIFIER:
      case CSharpParser.LITERAL_ACCESS:
      case CSharpParser.INTEGER_LITERAL:
      case CSharpParser.HEX_INTEGER_LITERAL:
      case CSharpParser.REAL_LITERAL:
      case CSharpParser.CHARACTER_LITERAL:
      case CSharpParser.REGULAR_STRING:
      case CSharpParser.VERBATIUM_STRING:
      case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser.OPEN_PARENS:
      case CSharpParser.PLUS:
      case CSharpParser.MINUS:
      case CSharpParser.STAR:
      case CSharpParser.AMP:
      case CSharpParser.BANG:
      case CSharpParser.TILDE:
      case CSharpParser.OP_INC:
      case CSharpParser.OP_DEC:
        this.enterOuterAlt(localctx, 1);
        this.state = 2212;
        this.interpolated_string_expression();
        break;
      case CSharpParser.DOUBLE_CURLY_INSIDE:
        this.enterOuterAlt(localctx, 2);
        this.state = 2213;
        this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
        break;
      case CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE:
        this.enterOuterAlt(localctx, 3);
        this.state = 2214;
        this.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE);
        break;
      case CSharpParser.VERBATIUM_INSIDE_STRING:
        this.enterOuterAlt(localctx, 4);
        this.state = 2215;
        this.match(CSharpParser.VERBATIUM_INSIDE_STRING);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interpolated_string_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interpolated_string_expression;
  return this;
}

Interpolated_string_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interpolated_string_expressionContext.prototype.constructor = Interpolated_string_expressionContext;

Interpolated_string_expressionContext.prototype.expression = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExpressionContext);
  } else {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
};

Interpolated_string_expressionContext.prototype.FORMAT_STRING = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(CSharpParser.FORMAT_STRING);
  } else {
    return this.getToken(CSharpParser.FORMAT_STRING, i);
  }
};

Interpolated_string_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterpolated_string_expression(this);
  }
};

Interpolated_string_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterpolated_string_expression(this);
  }
};

CSharpParser.Interpolated_string_expressionContext = Interpolated_string_expressionContext;

CSharpParser.prototype.interpolated_string_expression = function() {
  var localctx = new Interpolated_string_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(
    localctx,
    376,
    CSharpParser.RULE_interpolated_string_expression
  );
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2218;
    this.expression();
    this.state = 2223;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === CSharpParser.COMMA) {
      this.state = 2219;
      this.match(CSharpParser.COMMA);
      this.state = 2220;
      this.expression();
      this.state = 2225;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 2232;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COLON) {
      this.state = 2226;
      this.match(CSharpParser.COLON);
      this.state = 2228;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      do {
        this.state = 2227;
        this.match(CSharpParser.FORMAT_STRING);
        this.state = 2230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
      } while (_la === CSharpParser.FORMAT_STRING);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function KeywordContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_keyword;
  return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.ABSTRACT = function() {
  return this.getToken(CSharpParser.ABSTRACT, 0);
};

KeywordContext.prototype.AS = function() {
  return this.getToken(CSharpParser.AS, 0);
};

KeywordContext.prototype.BASE = function() {
  return this.getToken(CSharpParser.BASE, 0);
};

KeywordContext.prototype.BOOL = function() {
  return this.getToken(CSharpParser.BOOL, 0);
};

KeywordContext.prototype.BREAK = function() {
  return this.getToken(CSharpParser.BREAK, 0);
};

KeywordContext.prototype.BYTE = function() {
  return this.getToken(CSharpParser.BYTE, 0);
};

KeywordContext.prototype.CASE = function() {
  return this.getToken(CSharpParser.CASE, 0);
};

KeywordContext.prototype.CATCH = function() {
  return this.getToken(CSharpParser.CATCH, 0);
};

KeywordContext.prototype.CHAR = function() {
  return this.getToken(CSharpParser.CHAR, 0);
};

KeywordContext.prototype.CHECKED = function() {
  return this.getToken(CSharpParser.CHECKED, 0);
};

KeywordContext.prototype.CLASS = function() {
  return this.getToken(CSharpParser.CLASS, 0);
};

KeywordContext.prototype.CONST = function() {
  return this.getToken(CSharpParser.CONST, 0);
};

KeywordContext.prototype.CONTINUE = function() {
  return this.getToken(CSharpParser.CONTINUE, 0);
};

KeywordContext.prototype.DECIMAL = function() {
  return this.getToken(CSharpParser.DECIMAL, 0);
};

KeywordContext.prototype.DEFAULT = function() {
  return this.getToken(CSharpParser.DEFAULT, 0);
};

KeywordContext.prototype.DELEGATE = function() {
  return this.getToken(CSharpParser.DELEGATE, 0);
};

KeywordContext.prototype.DO = function() {
  return this.getToken(CSharpParser.DO, 0);
};

KeywordContext.prototype.DOUBLE = function() {
  return this.getToken(CSharpParser.DOUBLE, 0);
};

KeywordContext.prototype.ELSE = function() {
  return this.getToken(CSharpParser.ELSE, 0);
};

KeywordContext.prototype.ENUM = function() {
  return this.getToken(CSharpParser.ENUM, 0);
};

KeywordContext.prototype.EVENT = function() {
  return this.getToken(CSharpParser.EVENT, 0);
};

KeywordContext.prototype.EXPLICIT = function() {
  return this.getToken(CSharpParser.EXPLICIT, 0);
};

KeywordContext.prototype.EXTERN = function() {
  return this.getToken(CSharpParser.EXTERN, 0);
};

KeywordContext.prototype.FALSE = function() {
  return this.getToken(CSharpParser.FALSE, 0);
};

KeywordContext.prototype.FINALLY = function() {
  return this.getToken(CSharpParser.FINALLY, 0);
};

KeywordContext.prototype.FIXED = function() {
  return this.getToken(CSharpParser.FIXED, 0);
};

KeywordContext.prototype.FLOAT = function() {
  return this.getToken(CSharpParser.FLOAT, 0);
};

KeywordContext.prototype.FOR = function() {
  return this.getToken(CSharpParser.FOR, 0);
};

KeywordContext.prototype.FOREACH = function() {
  return this.getToken(CSharpParser.FOREACH, 0);
};

KeywordContext.prototype.GOTO = function() {
  return this.getToken(CSharpParser.GOTO, 0);
};

KeywordContext.prototype.IF = function() {
  return this.getToken(CSharpParser.IF, 0);
};

KeywordContext.prototype.IMPLICIT = function() {
  return this.getToken(CSharpParser.IMPLICIT, 0);
};

KeywordContext.prototype.IN = function() {
  return this.getToken(CSharpParser.IN, 0);
};

KeywordContext.prototype.INT = function() {
  return this.getToken(CSharpParser.INT, 0);
};

KeywordContext.prototype.INTERFACE = function() {
  return this.getToken(CSharpParser.INTERFACE, 0);
};

KeywordContext.prototype.INTERNAL = function() {
  return this.getToken(CSharpParser.INTERNAL, 0);
};

KeywordContext.prototype.IS = function() {
  return this.getToken(CSharpParser.IS, 0);
};

KeywordContext.prototype.LOCK = function() {
  return this.getToken(CSharpParser.LOCK, 0);
};

KeywordContext.prototype.LONG = function() {
  return this.getToken(CSharpParser.LONG, 0);
};

KeywordContext.prototype.NAMESPACE = function() {
  return this.getToken(CSharpParser.NAMESPACE, 0);
};

KeywordContext.prototype.NEW = function() {
  return this.getToken(CSharpParser.NEW, 0);
};

KeywordContext.prototype.NULL = function() {
  return this.getToken(CSharpParser.NULL, 0);
};

KeywordContext.prototype.OBJECT = function() {
  return this.getToken(CSharpParser.OBJECT, 0);
};

KeywordContext.prototype.OPERATOR = function() {
  return this.getToken(CSharpParser.OPERATOR, 0);
};

KeywordContext.prototype.OUT = function() {
  return this.getToken(CSharpParser.OUT, 0);
};

KeywordContext.prototype.OVERRIDE = function() {
  return this.getToken(CSharpParser.OVERRIDE, 0);
};

KeywordContext.prototype.PARAMS = function() {
  return this.getToken(CSharpParser.PARAMS, 0);
};

KeywordContext.prototype.PRIVATE = function() {
  return this.getToken(CSharpParser.PRIVATE, 0);
};

KeywordContext.prototype.PROTECTED = function() {
  return this.getToken(CSharpParser.PROTECTED, 0);
};

KeywordContext.prototype.PUBLIC = function() {
  return this.getToken(CSharpParser.PUBLIC, 0);
};

KeywordContext.prototype.READONLY = function() {
  return this.getToken(CSharpParser.READONLY, 0);
};

KeywordContext.prototype.REF = function() {
  return this.getToken(CSharpParser.REF, 0);
};

KeywordContext.prototype.RETURN = function() {
  return this.getToken(CSharpParser.RETURN, 0);
};

KeywordContext.prototype.SBYTE = function() {
  return this.getToken(CSharpParser.SBYTE, 0);
};

KeywordContext.prototype.SEALED = function() {
  return this.getToken(CSharpParser.SEALED, 0);
};

KeywordContext.prototype.SHORT = function() {
  return this.getToken(CSharpParser.SHORT, 0);
};

KeywordContext.prototype.SIZEOF = function() {
  return this.getToken(CSharpParser.SIZEOF, 0);
};

KeywordContext.prototype.STACKALLOC = function() {
  return this.getToken(CSharpParser.STACKALLOC, 0);
};

KeywordContext.prototype.STATIC = function() {
  return this.getToken(CSharpParser.STATIC, 0);
};

KeywordContext.prototype.STRING = function() {
  return this.getToken(CSharpParser.STRING, 0);
};

KeywordContext.prototype.STRUCT = function() {
  return this.getToken(CSharpParser.STRUCT, 0);
};

KeywordContext.prototype.SWITCH = function() {
  return this.getToken(CSharpParser.SWITCH, 0);
};

KeywordContext.prototype.THIS = function() {
  return this.getToken(CSharpParser.THIS, 0);
};

KeywordContext.prototype.THROW = function() {
  return this.getToken(CSharpParser.THROW, 0);
};

KeywordContext.prototype.TRUE = function() {
  return this.getToken(CSharpParser.TRUE, 0);
};

KeywordContext.prototype.TRY = function() {
  return this.getToken(CSharpParser.TRY, 0);
};

KeywordContext.prototype.TYPEOF = function() {
  return this.getToken(CSharpParser.TYPEOF, 0);
};

KeywordContext.prototype.UINT = function() {
  return this.getToken(CSharpParser.UINT, 0);
};

KeywordContext.prototype.ULONG = function() {
  return this.getToken(CSharpParser.ULONG, 0);
};

KeywordContext.prototype.UNCHECKED = function() {
  return this.getToken(CSharpParser.UNCHECKED, 0);
};

KeywordContext.prototype.UNSAFE = function() {
  return this.getToken(CSharpParser.UNSAFE, 0);
};

KeywordContext.prototype.USHORT = function() {
  return this.getToken(CSharpParser.USHORT, 0);
};

KeywordContext.prototype.USING = function() {
  return this.getToken(CSharpParser.USING, 0);
};

KeywordContext.prototype.VIRTUAL = function() {
  return this.getToken(CSharpParser.VIRTUAL, 0);
};

KeywordContext.prototype.VOID = function() {
  return this.getToken(CSharpParser.VOID, 0);
};

KeywordContext.prototype.VOLATILE = function() {
  return this.getToken(CSharpParser.VOLATILE, 0);
};

KeywordContext.prototype.WHILE = function() {
  return this.getToken(CSharpParser.WHILE, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterKeyword(this);
  }
};

KeywordContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitKeyword(this);
  }
};

CSharpParser.KeywordContext = KeywordContext;

CSharpParser.prototype.keyword = function() {
  var localctx = new KeywordContext(this, this._ctx, this.state);
  this.enterRule(localctx, 378, CSharpParser.RULE_keyword);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2234;
    _la = this._input.LA(1);
    if (
      !(
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << CSharpParser.ABSTRACT) |
              (1 << CSharpParser.AS) |
              (1 << CSharpParser.BASE) |
              (1 << CSharpParser.BOOL) |
              (1 << CSharpParser.BREAK) |
              (1 << CSharpParser.BYTE) |
              (1 << CSharpParser.CASE) |
              (1 << CSharpParser.CATCH) |
              (1 << CSharpParser.CHAR) |
              (1 << CSharpParser.CHECKED) |
              (1 << CSharpParser.CLASS) |
              (1 << CSharpParser.CONST) |
              (1 << CSharpParser.CONTINUE) |
              (1 << CSharpParser.DECIMAL) |
              (1 << CSharpParser.DEFAULT))) !==
            0) ||
        (((_la - 32) & ~0x1f) == 0 &&
          ((1 << (_la - 32)) &
            ((1 << (CSharpParser.DELEGATE - 32)) |
              (1 << (CSharpParser.DO - 32)) |
              (1 << (CSharpParser.DOUBLE - 32)) |
              (1 << (CSharpParser.ELSE - 32)) |
              (1 << (CSharpParser.ENUM - 32)) |
              (1 << (CSharpParser.EVENT - 32)) |
              (1 << (CSharpParser.EXPLICIT - 32)) |
              (1 << (CSharpParser.EXTERN - 32)) |
              (1 << (CSharpParser.FALSE - 32)) |
              (1 << (CSharpParser.FINALLY - 32)) |
              (1 << (CSharpParser.FIXED - 32)) |
              (1 << (CSharpParser.FLOAT - 32)) |
              (1 << (CSharpParser.FOR - 32)) |
              (1 << (CSharpParser.FOREACH - 32)) |
              (1 << (CSharpParser.GOTO - 32)) |
              (1 << (CSharpParser.IF - 32)) |
              (1 << (CSharpParser.IMPLICIT - 32)) |
              (1 << (CSharpParser.IN - 32)) |
              (1 << (CSharpParser.INT - 32)) |
              (1 << (CSharpParser.INTERFACE - 32)) |
              (1 << (CSharpParser.INTERNAL - 32)) |
              (1 << (CSharpParser.IS - 32)) |
              (1 << (CSharpParser.LOCK - 32)))) !==
            0) ||
        (((_la - 64) & ~0x1f) == 0 &&
          ((1 << (_la - 64)) &
            ((1 << (CSharpParser.LONG - 64)) |
              (1 << (CSharpParser.NAMESPACE - 64)) |
              (1 << (CSharpParser.NEW - 64)) |
              (1 << (CSharpParser.NULL - 64)) |
              (1 << (CSharpParser.OBJECT - 64)) |
              (1 << (CSharpParser.OPERATOR - 64)) |
              (1 << (CSharpParser.OUT - 64)) |
              (1 << (CSharpParser.OVERRIDE - 64)) |
              (1 << (CSharpParser.PARAMS - 64)) |
              (1 << (CSharpParser.PRIVATE - 64)) |
              (1 << (CSharpParser.PROTECTED - 64)) |
              (1 << (CSharpParser.PUBLIC - 64)) |
              (1 << (CSharpParser.READONLY - 64)) |
              (1 << (CSharpParser.REF - 64)) |
              (1 << (CSharpParser.RETURN - 64)) |
              (1 << (CSharpParser.SBYTE - 64)) |
              (1 << (CSharpParser.SEALED - 64)) |
              (1 << (CSharpParser.SHORT - 64)) |
              (1 << (CSharpParser.SIZEOF - 64)) |
              (1 << (CSharpParser.STACKALLOC - 64)) |
              (1 << (CSharpParser.STATIC - 64)) |
              (1 << (CSharpParser.STRING - 64)) |
              (1 << (CSharpParser.STRUCT - 64)) |
              (1 << (CSharpParser.SWITCH - 64)) |
              (1 << (CSharpParser.THIS - 64)))) !==
            0) ||
        (((_la - 96) & ~0x1f) == 0 &&
          ((1 << (_la - 96)) &
            ((1 << (CSharpParser.THROW - 96)) |
              (1 << (CSharpParser.TRUE - 96)) |
              (1 << (CSharpParser.TRY - 96)) |
              (1 << (CSharpParser.TYPEOF - 96)) |
              (1 << (CSharpParser.UINT - 96)) |
              (1 << (CSharpParser.ULONG - 96)) |
              (1 << (CSharpParser.UNCHECKED - 96)) |
              (1 << (CSharpParser.UNSAFE - 96)) |
              (1 << (CSharpParser.USHORT - 96)) |
              (1 << (CSharpParser.USING - 96)) |
              (1 << (CSharpParser.VIRTUAL - 96)) |
              (1 << (CSharpParser.VOID - 96)) |
              (1 << (CSharpParser.VOLATILE - 96)) |
              (1 << (CSharpParser.WHILE - 96)))) !==
            0)
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Class_definitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_class_definition;
  return this;
}

Class_definitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Class_definitionContext.prototype.constructor = Class_definitionContext;

Class_definitionContext.prototype.CLASS = function() {
  return this.getToken(CSharpParser.CLASS, 0);
};

Class_definitionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Class_definitionContext.prototype.class_body = function() {
  return this.getTypedRuleContext(Class_bodyContext, 0);
};

Class_definitionContext.prototype.type_parameter_list = function() {
  return this.getTypedRuleContext(Type_parameter_listContext, 0);
};

Class_definitionContext.prototype.class_base = function() {
  return this.getTypedRuleContext(Class_baseContext, 0);
};

Class_definitionContext.prototype.type_parameter_constraints_clauses = function() {
  return this.getTypedRuleContext(Type_parameter_constraints_clausesContext, 0);
};

Class_definitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterClass_definition(this);
  }
};

Class_definitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitClass_definition(this);
  }
};

CSharpParser.Class_definitionContext = Class_definitionContext;

CSharpParser.prototype.class_definition = function() {
  var localctx = new Class_definitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 380, CSharpParser.RULE_class_definition);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2236;
    this.match(CSharpParser.CLASS);
    this.state = 2237;
    this.identifier();
    this.state = 2239;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.LT) {
      this.state = 2238;
      this.type_parameter_list();
    }

    this.state = 2242;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COLON) {
      this.state = 2241;
      this.class_base();
    }

    this.state = 2245;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHERE) {
      this.state = 2244;
      this.type_parameter_constraints_clauses();
    }

    this.state = 2247;
    this.class_body();
    this.state = 2249;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.SEMICOLON) {
      this.state = 2248;
      this.match(CSharpParser.SEMICOLON);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Struct_definitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_struct_definition;
  return this;
}

Struct_definitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Struct_definitionContext.prototype.constructor = Struct_definitionContext;

Struct_definitionContext.prototype.STRUCT = function() {
  return this.getToken(CSharpParser.STRUCT, 0);
};

Struct_definitionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Struct_definitionContext.prototype.struct_body = function() {
  return this.getTypedRuleContext(Struct_bodyContext, 0);
};

Struct_definitionContext.prototype.type_parameter_list = function() {
  return this.getTypedRuleContext(Type_parameter_listContext, 0);
};

Struct_definitionContext.prototype.struct_interfaces = function() {
  return this.getTypedRuleContext(Struct_interfacesContext, 0);
};

Struct_definitionContext.prototype.type_parameter_constraints_clauses = function() {
  return this.getTypedRuleContext(Type_parameter_constraints_clausesContext, 0);
};

Struct_definitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterStruct_definition(this);
  }
};

Struct_definitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitStruct_definition(this);
  }
};

CSharpParser.Struct_definitionContext = Struct_definitionContext;

CSharpParser.prototype.struct_definition = function() {
  var localctx = new Struct_definitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 382, CSharpParser.RULE_struct_definition);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2251;
    this.match(CSharpParser.STRUCT);
    this.state = 2252;
    this.identifier();
    this.state = 2254;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.LT) {
      this.state = 2253;
      this.type_parameter_list();
    }

    this.state = 2257;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COLON) {
      this.state = 2256;
      this.struct_interfaces();
    }

    this.state = 2260;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHERE) {
      this.state = 2259;
      this.type_parameter_constraints_clauses();
    }

    this.state = 2262;
    this.struct_body();
    this.state = 2264;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.SEMICOLON) {
      this.state = 2263;
      this.match(CSharpParser.SEMICOLON);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Interface_definitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_interface_definition;
  return this;
}

Interface_definitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Interface_definitionContext.prototype.constructor = Interface_definitionContext;

Interface_definitionContext.prototype.INTERFACE = function() {
  return this.getToken(CSharpParser.INTERFACE, 0);
};

Interface_definitionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Interface_definitionContext.prototype.interface_body = function() {
  return this.getTypedRuleContext(Interface_bodyContext, 0);
};

Interface_definitionContext.prototype.variant_type_parameter_list = function() {
  return this.getTypedRuleContext(Variant_type_parameter_listContext, 0);
};

Interface_definitionContext.prototype.interface_base = function() {
  return this.getTypedRuleContext(Interface_baseContext, 0);
};

Interface_definitionContext.prototype.type_parameter_constraints_clauses = function() {
  return this.getTypedRuleContext(Type_parameter_constraints_clausesContext, 0);
};

Interface_definitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterInterface_definition(this);
  }
};

Interface_definitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitInterface_definition(this);
  }
};

CSharpParser.Interface_definitionContext = Interface_definitionContext;

CSharpParser.prototype.interface_definition = function() {
  var localctx = new Interface_definitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 384, CSharpParser.RULE_interface_definition);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2266;
    this.match(CSharpParser.INTERFACE);
    this.state = 2267;
    this.identifier();
    this.state = 2269;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.LT) {
      this.state = 2268;
      this.variant_type_parameter_list();
    }

    this.state = 2272;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COLON) {
      this.state = 2271;
      this.interface_base();
    }

    this.state = 2275;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHERE) {
      this.state = 2274;
      this.type_parameter_constraints_clauses();
    }

    this.state = 2277;
    this.interface_body();
    this.state = 2279;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.SEMICOLON) {
      this.state = 2278;
      this.match(CSharpParser.SEMICOLON);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Enum_definitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_enum_definition;
  return this;
}

Enum_definitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Enum_definitionContext.prototype.constructor = Enum_definitionContext;

Enum_definitionContext.prototype.ENUM = function() {
  return this.getToken(CSharpParser.ENUM, 0);
};

Enum_definitionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Enum_definitionContext.prototype.enum_body = function() {
  return this.getTypedRuleContext(Enum_bodyContext, 0);
};

Enum_definitionContext.prototype.enum_base = function() {
  return this.getTypedRuleContext(Enum_baseContext, 0);
};

Enum_definitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEnum_definition(this);
  }
};

Enum_definitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEnum_definition(this);
  }
};

CSharpParser.Enum_definitionContext = Enum_definitionContext;

CSharpParser.prototype.enum_definition = function() {
  var localctx = new Enum_definitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 386, CSharpParser.RULE_enum_definition);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2281;
    this.match(CSharpParser.ENUM);
    this.state = 2282;
    this.identifier();
    this.state = 2284;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COLON) {
      this.state = 2283;
      this.enum_base();
    }

    this.state = 2286;
    this.enum_body();
    this.state = 2288;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.SEMICOLON) {
      this.state = 2287;
      this.match(CSharpParser.SEMICOLON);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Delegate_definitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_delegate_definition;
  return this;
}

Delegate_definitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Delegate_definitionContext.prototype.constructor = Delegate_definitionContext;

Delegate_definitionContext.prototype.DELEGATE = function() {
  return this.getToken(CSharpParser.DELEGATE, 0);
};

Delegate_definitionContext.prototype.return_type = function() {
  return this.getTypedRuleContext(Return_typeContext, 0);
};

Delegate_definitionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Delegate_definitionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Delegate_definitionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Delegate_definitionContext.prototype.variant_type_parameter_list = function() {
  return this.getTypedRuleContext(Variant_type_parameter_listContext, 0);
};

Delegate_definitionContext.prototype.formal_parameter_list = function() {
  return this.getTypedRuleContext(Formal_parameter_listContext, 0);
};

Delegate_definitionContext.prototype.type_parameter_constraints_clauses = function() {
  return this.getTypedRuleContext(Type_parameter_constraints_clausesContext, 0);
};

Delegate_definitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterDelegate_definition(this);
  }
};

Delegate_definitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitDelegate_definition(this);
  }
};

CSharpParser.Delegate_definitionContext = Delegate_definitionContext;

CSharpParser.prototype.delegate_definition = function() {
  var localctx = new Delegate_definitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 388, CSharpParser.RULE_delegate_definition);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2290;
    this.match(CSharpParser.DELEGATE);
    this.state = 2291;
    this.return_type();
    this.state = 2292;
    this.identifier();
    this.state = 2294;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.LT) {
      this.state = 2293;
      this.variant_type_parameter_list();
    }

    this.state = 2296;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2298;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DOUBLE - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FLOAT - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INT - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)) |
            (1 << (CSharpParser.LONG - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.OBJECT - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.OUT - 65)) |
            (1 << (CSharpParser.PARAMS - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REF - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SBYTE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)) |
            (1 << (CSharpParser.SHORT - 65)) |
            (1 << (CSharpParser.STRING - 65)) |
            (1 << (CSharpParser.THIS - 65)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0)
    ) {
      this.state = 2297;
      this.formal_parameter_list();
    }

    this.state = 2300;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 2302;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHERE) {
      this.state = 2301;
      this.type_parameter_constraints_clauses();
    }

    this.state = 2304;
    this.match(CSharpParser.SEMICOLON);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Event_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_event_declaration;
  return this;
}

Event_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Event_declarationContext.prototype.constructor = Event_declarationContext;

Event_declarationContext.prototype.EVENT = function() {
  return this.getToken(CSharpParser.EVENT, 0);
};

Event_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Event_declarationContext.prototype.variable_declarators = function() {
  return this.getTypedRuleContext(Variable_declaratorsContext, 0);
};

Event_declarationContext.prototype.member_name = function() {
  return this.getTypedRuleContext(Member_nameContext, 0);
};

Event_declarationContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Event_declarationContext.prototype.event_accessor_declarations = function() {
  return this.getTypedRuleContext(Event_accessor_declarationsContext, 0);
};

Event_declarationContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Event_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterEvent_declaration(this);
  }
};

Event_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitEvent_declaration(this);
  }
};

CSharpParser.Event_declarationContext = Event_declarationContext;

CSharpParser.prototype.event_declaration = function() {
  var localctx = new Event_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 390, CSharpParser.RULE_event_declaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2306;
    this.match(CSharpParser.EVENT);
    this.state = 2307;
    this.type();
    this.state = 2316;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
    switch (la_) {
      case 1:
        this.state = 2308;
        this.variable_declarators();
        this.state = 2309;
        this.match(CSharpParser.SEMICOLON);
        break;

      case 2:
        this.state = 2311;
        this.member_name();
        this.state = 2312;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2313;
        this.event_accessor_declarations();
        this.state = 2314;
        this.match(CSharpParser.CLOSE_BRACE);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Field_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_field_declaration;
  return this;
}

Field_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Field_declarationContext.prototype.constructor = Field_declarationContext;

Field_declarationContext.prototype.variable_declarators = function() {
  return this.getTypedRuleContext(Variable_declaratorsContext, 0);
};

Field_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterField_declaration(this);
  }
};

Field_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitField_declaration(this);
  }
};

CSharpParser.Field_declarationContext = Field_declarationContext;

CSharpParser.prototype.field_declaration = function() {
  var localctx = new Field_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 392, CSharpParser.RULE_field_declaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2318;
    this.variable_declarators();
    this.state = 2319;
    this.match(CSharpParser.SEMICOLON);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Property_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_property_declaration;
  return this;
}

Property_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Property_declarationContext.prototype.constructor = Property_declarationContext;

Property_declarationContext.prototype.member_name = function() {
  return this.getTypedRuleContext(Member_nameContext, 0);
};

Property_declarationContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Property_declarationContext.prototype.accessor_declarations = function() {
  return this.getTypedRuleContext(Accessor_declarationsContext, 0);
};

Property_declarationContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Property_declarationContext.prototype.right_arrow = function() {
  return this.getTypedRuleContext(Right_arrowContext, 0);
};

Property_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Property_declarationContext.prototype.variable_initializer = function() {
  return this.getTypedRuleContext(Variable_initializerContext, 0);
};

Property_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterProperty_declaration(this);
  }
};

Property_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitProperty_declaration(this);
  }
};

CSharpParser.Property_declarationContext = Property_declarationContext;

CSharpParser.prototype.property_declaration = function() {
  var localctx = new Property_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 394, CSharpParser.RULE_property_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2321;
    this.member_name();
    this.state = 2335;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.state = 2322;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2323;
        this.accessor_declarations();
        this.state = 2324;
        this.match(CSharpParser.CLOSE_BRACE);
        this.state = 2329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.ASSIGNMENT) {
          this.state = 2325;
          this.match(CSharpParser.ASSIGNMENT);
          this.state = 2326;
          this.variable_initializer();
          this.state = 2327;
          this.match(CSharpParser.SEMICOLON);
        }

        break;
      case CSharpParser.ASSIGNMENT:
        this.state = 2331;
        this.right_arrow();
        this.state = 2332;
        this.expression();
        this.state = 2333;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Constant_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_constant_declaration;
  return this;
}

Constant_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Constant_declarationContext.prototype.constructor = Constant_declarationContext;

Constant_declarationContext.prototype.CONST = function() {
  return this.getToken(CSharpParser.CONST, 0);
};

Constant_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Constant_declarationContext.prototype.constant_declarators = function() {
  return this.getTypedRuleContext(Constant_declaratorsContext, 0);
};

Constant_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConstant_declaration(this);
  }
};

Constant_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConstant_declaration(this);
  }
};

CSharpParser.Constant_declarationContext = Constant_declarationContext;

CSharpParser.prototype.constant_declaration = function() {
  var localctx = new Constant_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 396, CSharpParser.RULE_constant_declaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2337;
    this.match(CSharpParser.CONST);
    this.state = 2338;
    this.type();
    this.state = 2339;
    this.constant_declarators();
    this.state = 2340;
    this.match(CSharpParser.SEMICOLON);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Indexer_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_indexer_declaration;
  return this;
}

Indexer_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Indexer_declarationContext.prototype.constructor = Indexer_declarationContext;

Indexer_declarationContext.prototype.THIS = function() {
  return this.getToken(CSharpParser.THIS, 0);
};

Indexer_declarationContext.prototype.formal_parameter_list = function() {
  return this.getTypedRuleContext(Formal_parameter_listContext, 0);
};

Indexer_declarationContext.prototype.OPEN_BRACE = function() {
  return this.getToken(CSharpParser.OPEN_BRACE, 0);
};

Indexer_declarationContext.prototype.accessor_declarations = function() {
  return this.getTypedRuleContext(Accessor_declarationsContext, 0);
};

Indexer_declarationContext.prototype.CLOSE_BRACE = function() {
  return this.getToken(CSharpParser.CLOSE_BRACE, 0);
};

Indexer_declarationContext.prototype.right_arrow = function() {
  return this.getTypedRuleContext(Right_arrowContext, 0);
};

Indexer_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Indexer_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIndexer_declaration(this);
  }
};

Indexer_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIndexer_declaration(this);
  }
};

CSharpParser.Indexer_declarationContext = Indexer_declarationContext;

CSharpParser.prototype.indexer_declaration = function() {
  var localctx = new Indexer_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 398, CSharpParser.RULE_indexer_declaration);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2342;
    this.match(CSharpParser.THIS);
    this.state = 2343;
    this.match(CSharpParser.OPEN_BRACKET);
    this.state = 2344;
    this.formal_parameter_list();
    this.state = 2345;
    this.match(CSharpParser.CLOSE_BRACKET);
    this.state = 2354;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
        this.state = 2346;
        this.match(CSharpParser.OPEN_BRACE);
        this.state = 2347;
        this.accessor_declarations();
        this.state = 2348;
        this.match(CSharpParser.CLOSE_BRACE);
        break;
      case CSharpParser.ASSIGNMENT:
        this.state = 2350;
        this.right_arrow();
        this.state = 2351;
        this.expression();
        this.state = 2352;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Destructor_definitionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_destructor_definition;
  return this;
}

Destructor_definitionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Destructor_definitionContext.prototype.constructor = Destructor_definitionContext;

Destructor_definitionContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Destructor_definitionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Destructor_definitionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Destructor_definitionContext.prototype.body = function() {
  return this.getTypedRuleContext(BodyContext, 0);
};

Destructor_definitionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterDestructor_definition(this);
  }
};

Destructor_definitionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitDestructor_definition(this);
  }
};

CSharpParser.Destructor_definitionContext = Destructor_definitionContext;

CSharpParser.prototype.destructor_definition = function() {
  var localctx = new Destructor_definitionContext(this, this._ctx, this.state);
  this.enterRule(localctx, 400, CSharpParser.RULE_destructor_definition);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2356;
    this.match(CSharpParser.TILDE);
    this.state = 2357;
    this.identifier();
    this.state = 2358;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2359;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 2360;
    this.body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Constructor_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_constructor_declaration;
  return this;
}

Constructor_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Constructor_declarationContext.prototype.constructor = Constructor_declarationContext;

Constructor_declarationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Constructor_declarationContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Constructor_declarationContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Constructor_declarationContext.prototype.body = function() {
  return this.getTypedRuleContext(BodyContext, 0);
};

Constructor_declarationContext.prototype.formal_parameter_list = function() {
  return this.getTypedRuleContext(Formal_parameter_listContext, 0);
};

Constructor_declarationContext.prototype.constructor_initializer = function() {
  return this.getTypedRuleContext(Constructor_initializerContext, 0);
};

Constructor_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterConstructor_declaration(this);
  }
};

Constructor_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitConstructor_declaration(this);
  }
};

CSharpParser.Constructor_declarationContext = Constructor_declarationContext;

CSharpParser.prototype.constructor_declaration = function() {
  var localctx = new Constructor_declarationContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 402, CSharpParser.RULE_constructor_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2362;
    this.identifier();
    this.state = 2363;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2365;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DOUBLE - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FLOAT - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INT - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)) |
            (1 << (CSharpParser.LONG - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.OBJECT - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.OUT - 65)) |
            (1 << (CSharpParser.PARAMS - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REF - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SBYTE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)) |
            (1 << (CSharpParser.SHORT - 65)) |
            (1 << (CSharpParser.STRING - 65)) |
            (1 << (CSharpParser.THIS - 65)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0)
    ) {
      this.state = 2364;
      this.formal_parameter_list();
    }

    this.state = 2367;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 2369;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COLON) {
      this.state = 2368;
      this.constructor_initializer();
    }

    this.state = 2371;
    this.body();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Method_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_method_declaration;
  return this;
}

Method_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Method_declarationContext.prototype.constructor = Method_declarationContext;

Method_declarationContext.prototype.method_member_name = function() {
  return this.getTypedRuleContext(Method_member_nameContext, 0);
};

Method_declarationContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Method_declarationContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Method_declarationContext.prototype.method_body = function() {
  return this.getTypedRuleContext(Method_bodyContext, 0);
};

Method_declarationContext.prototype.right_arrow = function() {
  return this.getTypedRuleContext(Right_arrowContext, 0);
};

Method_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Method_declarationContext.prototype.type_parameter_list = function() {
  return this.getTypedRuleContext(Type_parameter_listContext, 0);
};

Method_declarationContext.prototype.formal_parameter_list = function() {
  return this.getTypedRuleContext(Formal_parameter_listContext, 0);
};

Method_declarationContext.prototype.type_parameter_constraints_clauses = function() {
  return this.getTypedRuleContext(Type_parameter_constraints_clausesContext, 0);
};

Method_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMethod_declaration(this);
  }
};

Method_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMethod_declaration(this);
  }
};

CSharpParser.Method_declarationContext = Method_declarationContext;

CSharpParser.prototype.method_declaration = function() {
  var localctx = new Method_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 404, CSharpParser.RULE_method_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2373;
    this.method_member_name();
    this.state = 2375;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.LT) {
      this.state = 2374;
      this.type_parameter_list();
    }

    this.state = 2377;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2379;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.DECIMAL))) !==
          0) ||
      (((_la - 33) & ~0x1f) == 0 &&
        ((1 << (_la - 33)) &
          ((1 << (CSharpParser.DESCENDING - 33)) |
            (1 << (CSharpParser.DOUBLE - 33)) |
            (1 << (CSharpParser.DYNAMIC - 33)) |
            (1 << (CSharpParser.EQUALS - 33)) |
            (1 << (CSharpParser.FLOAT - 33)) |
            (1 << (CSharpParser.FROM - 33)) |
            (1 << (CSharpParser.GET - 33)) |
            (1 << (CSharpParser.GROUP - 33)) |
            (1 << (CSharpParser.INT - 33)) |
            (1 << (CSharpParser.INTO - 33)) |
            (1 << (CSharpParser.JOIN - 33)) |
            (1 << (CSharpParser.LET - 33)) |
            (1 << (CSharpParser.LONG - 33)))) !==
          0) ||
      (((_la - 65) & ~0x1f) == 0 &&
        ((1 << (_la - 65)) &
          ((1 << (CSharpParser.NAMEOF - 65)) |
            (1 << (CSharpParser.OBJECT - 65)) |
            (1 << (CSharpParser.ON - 65)) |
            (1 << (CSharpParser.ORDERBY - 65)) |
            (1 << (CSharpParser.OUT - 65)) |
            (1 << (CSharpParser.PARAMS - 65)) |
            (1 << (CSharpParser.PARTIAL - 65)) |
            (1 << (CSharpParser.REF - 65)) |
            (1 << (CSharpParser.REMOVE - 65)) |
            (1 << (CSharpParser.SBYTE - 65)) |
            (1 << (CSharpParser.SELECT - 65)) |
            (1 << (CSharpParser.SET - 65)) |
            (1 << (CSharpParser.SHORT - 65)) |
            (1 << (CSharpParser.STRING - 65)) |
            (1 << (CSharpParser.THIS - 65)))) !==
          0) ||
      (((_la - 100) & ~0x1f) == 0 &&
        ((1 << (_la - 100)) &
          ((1 << (CSharpParser.UINT - 100)) |
            (1 << (CSharpParser.ULONG - 100)) |
            (1 << (CSharpParser.USHORT - 100)) |
            (1 << (CSharpParser.VAR - 100)) |
            (1 << (CSharpParser.VOID - 100)) |
            (1 << (CSharpParser.WHEN - 100)) |
            (1 << (CSharpParser.WHERE - 100)) |
            (1 << (CSharpParser.YIELD - 100)) |
            (1 << (CSharpParser.IDENTIFIER - 100)) |
            (1 << (CSharpParser.OPEN_BRACKET - 100)) |
            (1 << (CSharpParser.OPEN_PARENS - 100)))) !==
          0)
    ) {
      this.state = 2378;
      this.formal_parameter_list();
    }

    this.state = 2381;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 2383;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.WHERE) {
      this.state = 2382;
      this.type_parameter_constraints_clauses();
    }

    this.state = 2390;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
      case CSharpParser.SEMICOLON:
        this.state = 2385;
        this.method_body();
        break;
      case CSharpParser.ASSIGNMENT:
        this.state = 2386;
        this.right_arrow();
        this.state = 2387;
        this.expression();
        this.state = 2388;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Method_member_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_method_member_name;
  return this;
}

Method_member_nameContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Method_member_nameContext.prototype.constructor = Method_member_nameContext;

Method_member_nameContext.prototype.identifier = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(IdentifierContext);
  } else {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
};

Method_member_nameContext.prototype.type_argument_list = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Type_argument_listContext);
  } else {
    return this.getTypedRuleContext(Type_argument_listContext, i);
  }
};

Method_member_nameContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMethod_member_name(this);
  }
};

Method_member_nameContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMethod_member_name(this);
  }
};

CSharpParser.Method_member_nameContext = Method_member_nameContext;

CSharpParser.prototype.method_member_name = function() {
  var localctx = new Method_member_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 406, CSharpParser.RULE_method_member_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2397;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 299, this._ctx);
    switch (la_) {
      case 1:
        this.state = 2392;
        this.identifier();
        break;

      case 2:
        this.state = 2393;
        this.identifier();
        this.state = 2394;
        this.match(CSharpParser.DOUBLE_COLON);
        this.state = 2395;
        this.identifier();
        break;
    }
    this.state = 2406;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 301, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 2400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === CSharpParser.LT) {
          this.state = 2399;
          this.type_argument_list();
        }

        this.state = 2402;
        this.match(CSharpParser.DOT);
        this.state = 2403;
        this.identifier();
      }
      this.state = 2408;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 301, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Operator_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_operator_declaration;
  return this;
}

Operator_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Operator_declarationContext.prototype.constructor = Operator_declarationContext;

Operator_declarationContext.prototype.OPERATOR = function() {
  return this.getToken(CSharpParser.OPERATOR, 0);
};

Operator_declarationContext.prototype.overloadable_operator = function() {
  return this.getTypedRuleContext(Overloadable_operatorContext, 0);
};

Operator_declarationContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Operator_declarationContext.prototype.arg_declaration = function(i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Arg_declarationContext);
  } else {
    return this.getTypedRuleContext(Arg_declarationContext, i);
  }
};

Operator_declarationContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Operator_declarationContext.prototype.body = function() {
  return this.getTypedRuleContext(BodyContext, 0);
};

Operator_declarationContext.prototype.right_arrow = function() {
  return this.getTypedRuleContext(Right_arrowContext, 0);
};

Operator_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Operator_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterOperator_declaration(this);
  }
};

Operator_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitOperator_declaration(this);
  }
};

CSharpParser.Operator_declarationContext = Operator_declarationContext;

CSharpParser.prototype.operator_declaration = function() {
  var localctx = new Operator_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 408, CSharpParser.RULE_operator_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2409;
    this.match(CSharpParser.OPERATOR);
    this.state = 2410;
    this.overloadable_operator();
    this.state = 2411;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2412;
    this.arg_declaration();
    this.state = 2415;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.COMMA) {
      this.state = 2413;
      this.match(CSharpParser.COMMA);
      this.state = 2414;
      this.arg_declaration();
    }

    this.state = 2417;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 2423;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case CSharpParser.OPEN_BRACE:
      case CSharpParser.SEMICOLON:
        this.state = 2418;
        this.body();
        break;
      case CSharpParser.ASSIGNMENT:
        this.state = 2419;
        this.right_arrow();
        this.state = 2420;
        this.expression();
        this.state = 2421;
        this.match(CSharpParser.SEMICOLON);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Arg_declarationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_arg_declaration;
  return this;
}

Arg_declarationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Arg_declarationContext.prototype.constructor = Arg_declarationContext;

Arg_declarationContext.prototype.type = function() {
  return this.getTypedRuleContext(TypeContext, 0);
};

Arg_declarationContext.prototype.identifier = function() {
  return this.getTypedRuleContext(IdentifierContext, 0);
};

Arg_declarationContext.prototype.expression = function() {
  return this.getTypedRuleContext(ExpressionContext, 0);
};

Arg_declarationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterArg_declaration(this);
  }
};

Arg_declarationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitArg_declaration(this);
  }
};

CSharpParser.Arg_declarationContext = Arg_declarationContext;

CSharpParser.prototype.arg_declaration = function() {
  var localctx = new Arg_declarationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 410, CSharpParser.RULE_arg_declaration);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2425;
    this.type();
    this.state = 2426;
    this.identifier();
    this.state = 2429;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.ASSIGNMENT) {
      this.state = 2427;
      this.match(CSharpParser.ASSIGNMENT);
      this.state = 2428;
      this.expression();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Method_invocationContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_method_invocation;
  return this;
}

Method_invocationContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Method_invocationContext.prototype.constructor = Method_invocationContext;

Method_invocationContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Method_invocationContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Method_invocationContext.prototype.argument_list = function() {
  return this.getTypedRuleContext(Argument_listContext, 0);
};

Method_invocationContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterMethod_invocation(this);
  }
};

Method_invocationContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitMethod_invocation(this);
  }
};

CSharpParser.Method_invocationContext = Method_invocationContext;

CSharpParser.prototype.method_invocation = function() {
  var localctx = new Method_invocationContext(this, this._ctx, this.state);
  this.enterRule(localctx, 412, CSharpParser.RULE_method_invocation);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2431;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2433;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.OUT - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REF - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.VOID - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0) ||
      (((_la - 134) & ~0x1f) == 0 &&
        ((1 << (_la - 134)) &
          ((1 << (CSharpParser.PLUS - 134)) |
            (1 << (CSharpParser.MINUS - 134)) |
            (1 << (CSharpParser.STAR - 134)) |
            (1 << (CSharpParser.AMP - 134)) |
            (1 << (CSharpParser.BANG - 134)) |
            (1 << (CSharpParser.TILDE - 134)) |
            (1 << (CSharpParser.OP_INC - 134)) |
            (1 << (CSharpParser.OP_DEC - 134)))) !==
          0)
    ) {
      this.state = 2432;
      this.argument_list();
    }

    this.state = 2435;
    this.match(CSharpParser.CLOSE_PARENS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function Object_creation_expressionContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_object_creation_expression;
  return this;
}

Object_creation_expressionContext.prototype = Object.create(
  antlr4.ParserRuleContext.prototype
);
Object_creation_expressionContext.prototype.constructor = Object_creation_expressionContext;

Object_creation_expressionContext.prototype.OPEN_PARENS = function() {
  return this.getToken(CSharpParser.OPEN_PARENS, 0);
};

Object_creation_expressionContext.prototype.CLOSE_PARENS = function() {
  return this.getToken(CSharpParser.CLOSE_PARENS, 0);
};

Object_creation_expressionContext.prototype.argument_list = function() {
  return this.getTypedRuleContext(Argument_listContext, 0);
};

Object_creation_expressionContext.prototype.object_or_collection_initializer = function() {
  return this.getTypedRuleContext(Object_or_collection_initializerContext, 0);
};

Object_creation_expressionContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterObject_creation_expression(this);
  }
};

Object_creation_expressionContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitObject_creation_expression(this);
  }
};

CSharpParser.Object_creation_expressionContext = Object_creation_expressionContext;

CSharpParser.prototype.object_creation_expression = function() {
  var localctx = new Object_creation_expressionContext(
    this,
    this._ctx,
    this.state
  );
  this.enterRule(localctx, 414, CSharpParser.RULE_object_creation_expression);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2437;
    this.match(CSharpParser.OPEN_PARENS);
    this.state = 2439;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (
      ((_la & ~0x1f) == 0 &&
        ((1 << _la) &
          ((1 << CSharpParser.ADD) |
            (1 << CSharpParser.ALIAS) |
            (1 << CSharpParser.ARGLIST) |
            (1 << CSharpParser.ASCENDING) |
            (1 << CSharpParser.ASYNC) |
            (1 << CSharpParser.AWAIT) |
            (1 << CSharpParser.BASE) |
            (1 << CSharpParser.BOOL) |
            (1 << CSharpParser.BY) |
            (1 << CSharpParser.BYTE) |
            (1 << CSharpParser.CHAR) |
            (1 << CSharpParser.CHECKED) |
            (1 << CSharpParser.DECIMAL) |
            (1 << CSharpParser.DEFAULT))) !==
          0) ||
      (((_la - 32) & ~0x1f) == 0 &&
        ((1 << (_la - 32)) &
          ((1 << (CSharpParser.DELEGATE - 32)) |
            (1 << (CSharpParser.DESCENDING - 32)) |
            (1 << (CSharpParser.DOUBLE - 32)) |
            (1 << (CSharpParser.DYNAMIC - 32)) |
            (1 << (CSharpParser.EQUALS - 32)) |
            (1 << (CSharpParser.FALSE - 32)) |
            (1 << (CSharpParser.FLOAT - 32)) |
            (1 << (CSharpParser.FROM - 32)) |
            (1 << (CSharpParser.GET - 32)) |
            (1 << (CSharpParser.GROUP - 32)) |
            (1 << (CSharpParser.INT - 32)) |
            (1 << (CSharpParser.INTO - 32)) |
            (1 << (CSharpParser.JOIN - 32)) |
            (1 << (CSharpParser.LET - 32)))) !==
          0) ||
      (((_la - 64) & ~0x1f) == 0 &&
        ((1 << (_la - 64)) &
          ((1 << (CSharpParser.LONG - 64)) |
            (1 << (CSharpParser.NAMEOF - 64)) |
            (1 << (CSharpParser.NEW - 64)) |
            (1 << (CSharpParser.NULL - 64)) |
            (1 << (CSharpParser.OBJECT - 64)) |
            (1 << (CSharpParser.ON - 64)) |
            (1 << (CSharpParser.ORDERBY - 64)) |
            (1 << (CSharpParser.OUT - 64)) |
            (1 << (CSharpParser.PARTIAL - 64)) |
            (1 << (CSharpParser.REF - 64)) |
            (1 << (CSharpParser.REMOVE - 64)) |
            (1 << (CSharpParser.SBYTE - 64)) |
            (1 << (CSharpParser.SELECT - 64)) |
            (1 << (CSharpParser.SET - 64)) |
            (1 << (CSharpParser.SHORT - 64)) |
            (1 << (CSharpParser.SIZEOF - 64)) |
            (1 << (CSharpParser.STRING - 64)) |
            (1 << (CSharpParser.THIS - 64)))) !==
          0) ||
      (((_la - 97) & ~0x1f) == 0 &&
        ((1 << (_la - 97)) &
          ((1 << (CSharpParser.TRUE - 97)) |
            (1 << (CSharpParser.TYPEOF - 97)) |
            (1 << (CSharpParser.UINT - 97)) |
            (1 << (CSharpParser.ULONG - 97)) |
            (1 << (CSharpParser.UNCHECKED - 97)) |
            (1 << (CSharpParser.USHORT - 97)) |
            (1 << (CSharpParser.VAR - 97)) |
            (1 << (CSharpParser.VOID - 97)) |
            (1 << (CSharpParser.WHEN - 97)) |
            (1 << (CSharpParser.WHERE - 97)) |
            (1 << (CSharpParser.YIELD - 97)) |
            (1 << (CSharpParser.IDENTIFIER - 97)) |
            (1 << (CSharpParser.LITERAL_ACCESS - 97)) |
            (1 << (CSharpParser.INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.HEX_INTEGER_LITERAL - 97)) |
            (1 << (CSharpParser.REAL_LITERAL - 97)) |
            (1 << (CSharpParser.CHARACTER_LITERAL - 97)) |
            (1 << (CSharpParser.REGULAR_STRING - 97)) |
            (1 << (CSharpParser.VERBATIUM_STRING - 97)) |
            (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 97)) |
            (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 97)) |
            (1 << (CSharpParser.OPEN_PARENS - 97)))) !==
          0) ||
      (((_la - 134) & ~0x1f) == 0 &&
        ((1 << (_la - 134)) &
          ((1 << (CSharpParser.PLUS - 134)) |
            (1 << (CSharpParser.MINUS - 134)) |
            (1 << (CSharpParser.STAR - 134)) |
            (1 << (CSharpParser.AMP - 134)) |
            (1 << (CSharpParser.BANG - 134)) |
            (1 << (CSharpParser.TILDE - 134)) |
            (1 << (CSharpParser.OP_INC - 134)) |
            (1 << (CSharpParser.OP_DEC - 134)))) !==
          0)
    ) {
      this.state = 2438;
      this.argument_list();
    }

    this.state = 2441;
    this.match(CSharpParser.CLOSE_PARENS);
    this.state = 2443;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === CSharpParser.OPEN_BRACE) {
      this.state = 2442;
      this.object_or_collection_initializer();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = CSharpParser.RULE_identifier;
  return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
  return this.getToken(CSharpParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.ADD = function() {
  return this.getToken(CSharpParser.ADD, 0);
};

IdentifierContext.prototype.ALIAS = function() {
  return this.getToken(CSharpParser.ALIAS, 0);
};

IdentifierContext.prototype.ARGLIST = function() {
  return this.getToken(CSharpParser.ARGLIST, 0);
};

IdentifierContext.prototype.ASCENDING = function() {
  return this.getToken(CSharpParser.ASCENDING, 0);
};

IdentifierContext.prototype.ASYNC = function() {
  return this.getToken(CSharpParser.ASYNC, 0);
};

IdentifierContext.prototype.AWAIT = function() {
  return this.getToken(CSharpParser.AWAIT, 0);
};

IdentifierContext.prototype.BY = function() {
  return this.getToken(CSharpParser.BY, 0);
};

IdentifierContext.prototype.DESCENDING = function() {
  return this.getToken(CSharpParser.DESCENDING, 0);
};

IdentifierContext.prototype.DYNAMIC = function() {
  return this.getToken(CSharpParser.DYNAMIC, 0);
};

IdentifierContext.prototype.EQUALS = function() {
  return this.getToken(CSharpParser.EQUALS, 0);
};

IdentifierContext.prototype.FROM = function() {
  return this.getToken(CSharpParser.FROM, 0);
};

IdentifierContext.prototype.GET = function() {
  return this.getToken(CSharpParser.GET, 0);
};

IdentifierContext.prototype.GROUP = function() {
  return this.getToken(CSharpParser.GROUP, 0);
};

IdentifierContext.prototype.INTO = function() {
  return this.getToken(CSharpParser.INTO, 0);
};

IdentifierContext.prototype.JOIN = function() {
  return this.getToken(CSharpParser.JOIN, 0);
};

IdentifierContext.prototype.LET = function() {
  return this.getToken(CSharpParser.LET, 0);
};

IdentifierContext.prototype.NAMEOF = function() {
  return this.getToken(CSharpParser.NAMEOF, 0);
};

IdentifierContext.prototype.ON = function() {
  return this.getToken(CSharpParser.ON, 0);
};

IdentifierContext.prototype.ORDERBY = function() {
  return this.getToken(CSharpParser.ORDERBY, 0);
};

IdentifierContext.prototype.PARTIAL = function() {
  return this.getToken(CSharpParser.PARTIAL, 0);
};

IdentifierContext.prototype.REMOVE = function() {
  return this.getToken(CSharpParser.REMOVE, 0);
};

IdentifierContext.prototype.SELECT = function() {
  return this.getToken(CSharpParser.SELECT, 0);
};

IdentifierContext.prototype.SET = function() {
  return this.getToken(CSharpParser.SET, 0);
};

IdentifierContext.prototype.VAR = function() {
  return this.getToken(CSharpParser.VAR, 0);
};

IdentifierContext.prototype.WHEN = function() {
  return this.getToken(CSharpParser.WHEN, 0);
};

IdentifierContext.prototype.WHERE = function() {
  return this.getToken(CSharpParser.WHERE, 0);
};

IdentifierContext.prototype.YIELD = function() {
  return this.getToken(CSharpParser.YIELD, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.enterIdentifier(this);
  }
};

IdentifierContext.prototype.exitRule = function(listener) {
  if (listener instanceof CSharpParserListener) {
    listener.exitIdentifier(this);
  }
};

CSharpParser.IdentifierContext = IdentifierContext;

CSharpParser.prototype.identifier = function() {
  var localctx = new IdentifierContext(this, this._ctx, this.state);
  this.enterRule(localctx, 416, CSharpParser.RULE_identifier);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 2445;
    _la = this._input.LA(1);
    if (
      !(
        ((_la & ~0x1f) == 0 &&
          ((1 << _la) &
            ((1 << CSharpParser.ADD) |
              (1 << CSharpParser.ALIAS) |
              (1 << CSharpParser.ARGLIST) |
              (1 << CSharpParser.ASCENDING) |
              (1 << CSharpParser.ASYNC) |
              (1 << CSharpParser.AWAIT) |
              (1 << CSharpParser.BY))) !==
            0) ||
        (((_la - 33) & ~0x1f) == 0 &&
          ((1 << (_la - 33)) &
            ((1 << (CSharpParser.DESCENDING - 33)) |
              (1 << (CSharpParser.DYNAMIC - 33)) |
              (1 << (CSharpParser.EQUALS - 33)) |
              (1 << (CSharpParser.FROM - 33)) |
              (1 << (CSharpParser.GET - 33)) |
              (1 << (CSharpParser.GROUP - 33)) |
              (1 << (CSharpParser.INTO - 33)) |
              (1 << (CSharpParser.JOIN - 33)) |
              (1 << (CSharpParser.LET - 33)))) !==
            0) ||
        (((_la - 65) & ~0x1f) == 0 &&
          ((1 << (_la - 65)) &
            ((1 << (CSharpParser.NAMEOF - 65)) |
              (1 << (CSharpParser.ON - 65)) |
              (1 << (CSharpParser.ORDERBY - 65)) |
              (1 << (CSharpParser.PARTIAL - 65)) |
              (1 << (CSharpParser.REMOVE - 65)) |
              (1 << (CSharpParser.SELECT - 65)) |
              (1 << (CSharpParser.SET - 65)))) !==
            0) ||
        (((_la - 106) & ~0x1f) == 0 &&
          ((1 << (_la - 106)) &
            ((1 << (CSharpParser.VAR - 106)) |
              (1 << (CSharpParser.WHEN - 106)) |
              (1 << (CSharpParser.WHERE - 106)) |
              (1 << (CSharpParser.YIELD - 106)) |
              (1 << (CSharpParser.IDENTIFIER - 106)))) !==
            0)
      )
    ) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};

CSharpParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
  switch (ruleIndex) {
    case 178:
      return this.right_arrow_sempred(localctx, predIndex);
    case 179:
      return this.right_shift_sempred(localctx, predIndex);
    case 180:
      return this.right_shift_assignment_sempred(localctx, predIndex);
    default:
      throw "No predicate with index:" + ruleIndex;
  }
};

CSharpParser.prototype.right_arrow_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 0:
      return (
        (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 ==
        (localctx.second === null ? 0 : localctx.second.tokenIndex)
      );
    default:
      throw "No predicate with index:" + predIndex;
  }
};

CSharpParser.prototype.right_shift_sempred = function(localctx, predIndex) {
  switch (predIndex) {
    case 1:
      return (
        (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 ==
        (localctx.second === null ? 0 : localctx.second.tokenIndex)
      );
    default:
      throw "No predicate with index:" + predIndex;
  }
};

CSharpParser.prototype.right_shift_assignment_sempred = function(
  localctx,
  predIndex
) {
  switch (predIndex) {
    case 2:
      return (
        (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 ==
        (localctx.second === null ? 0 : localctx.second.tokenIndex)
      );
    default:
      throw "No predicate with index:" + predIndex;
  }
};

exports.CSharpParser = CSharpParser;
