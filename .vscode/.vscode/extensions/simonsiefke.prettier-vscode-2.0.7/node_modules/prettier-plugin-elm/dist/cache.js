"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var fs_1 = __importDefault(require("fs"));
var make_dir_1 = __importDefault(require("make-dir"));
var object_hash_1 = __importDefault(require("object-hash"));
var path_1 = require("path");
var serialize_error_1 = require("serialize-error");
var temp_dir_1 = __importDefault(require("temp-dir"));
var cacheDir = process.env.PRETTIER_PLUGIN_ELM_CACHE_DIR
    ? path_1.resolve(process.env.PRETTIER_PLUGIN_ELM_CACHE_DIR)
    : path_1.resolve(temp_dir_1["default"], "prettier-plugin-elm");
var cacheMax = process.env.PRETTIER_PLUGIN_ELM_CACHE_MAX
    ? parseInt(process.env.PRETTIER_PLUGIN_ELM_CACHE_MAX, 10)
    : 1000;
var cacheGCInterval = process.env.PRETTIER_PLUGIN_ELM_CACHE_GC_INTERVAL
    ? parseInt(process.env.PRETTIER_PLUGIN_ELM_CACHE_GC_INTERVAL, 10)
    : 1000 * 60;
/* istanbul ignore next */
var noop = function () {
    //
};
exports.getCachedValue = function (fn, args, extraCacheKeyFactors) {
    var cacheKey = object_hash_1["default"]({ args: args, extraCacheKeyFactors: extraCacheKeyFactors });
    var recordFilePath = path_1.resolve(cacheDir, cacheKey + ".json");
    var record;
    var recordIsFromCache = false;
    // load value or error from cache
    try {
        record = JSON.parse(fs_1["default"].readFileSync(recordFilePath, "utf8"));
        recordIsFromCache = true;
    }
    catch (e) {
        // a failure to load from cache implies calling fn
        try {
            record = {
                value: fn.apply(null, args)
            };
        }
        catch (fnError) {
            var serializedError = serialize_error_1.serializeError(fnError);
            delete serializedError.stack;
            record = {
                error: serializedError
            };
        }
    }
    try {
        make_dir_1["default"].sync(cacheDir);
        fs_1["default"].writeFileSync(recordFilePath + ".touchfile", "");
        if (!recordIsFromCache) {
            fs_1["default"].writeFileSync(recordFilePath, JSON.stringify(record), "utf8");
        }
        collectGarbageIfNeeded();
    }
    catch (e) {
        // a failure to save record into cache or clean garbage
        // should not affect the result of the function
        /* istanbul ignore next */
        if (process.env.NODE_ENV === "test") {
            throw e;
        }
    }
    if (record.error) {
        var errorToThrow = new Error();
        for (var errorProperty in record.error) {
            /* istanbul ignore else */
            if (record.error.hasOwnProperty(errorProperty)) {
                errorToThrow[errorProperty] = record.error.property;
            }
        }
        throw errorToThrow;
    }
    else {
        return record.value;
    }
};
function collectGarbageIfNeeded() {
    var pathToGCTouchfile = path_1.resolve(cacheDir, "gc.touchfile");
    try {
        var lastGCTime = fs_1["default"].statSync(pathToGCTouchfile).mtimeMs;
        if (lastGCTime + cacheGCInterval > +new Date()) {
            // no need to collect garbage
            return;
        }
    }
    catch (e) {
        // a failure to read modification time for the GC touchfile
        // means that GC needs to be done for the first time
    }
    fs_1["default"].writeFileSync(pathToGCTouchfile, "");
    var recordInfos = [];
    fs_1["default"].readdirSync(cacheDir).map(function (recordFileName) {
        if (!recordFileName.endsWith(".json")) {
            return;
        }
        var recordFilePath = path_1.resolve(cacheDir, recordFileName);
        var recordInfo = {
            path: recordFilePath,
            touchedAt: 0
        };
        try {
            recordInfo.touchedAt = fs_1["default"].statSync(recordFilePath + ".touchfile").mtimeMs;
        }
        catch (e) {
            // fs.statSync may fail if another GC process has just deleted it;
            // this is not critical
            /* istanbul ignore next */
            if (process.env.NODE_ENV === "test") {
                throw e;
            }
        }
        recordInfos.push(recordInfo);
    });
    recordInfos.sort(function (a, b) {
        return b.touchedAt - a.touchedAt;
    });
    var recordInfosToDelete = recordInfos.slice(cacheMax);
    recordInfosToDelete.forEach(function (recordInfo) {
        // files are deleted asynchronously and possible errors are ignored
        fs_1["default"].unlink(recordInfo.path, noop);
        fs_1["default"].unlink(recordInfo.path + ".touchfile", noop);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwQ0FBb0I7QUFDcEIsc0RBQStCO0FBQy9CLDREQUFxQztBQUNyQyw2QkFBK0I7QUFDL0IsbURBQWlEO0FBRWpELHNEQUErQjtBQUUvQixJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QjtJQUN4RCxDQUFDLENBQUMsY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUM7SUFDcEQsQ0FBQyxDQUFDLGNBQU8sQ0FBQyxxQkFBTyxFQUFFLHFCQUFxQixDQUFDLENBQUM7QUFFNUMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkI7SUFDeEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLEVBQUUsQ0FBQztJQUN6RCxDQUFDLENBQUMsSUFBSSxDQUFDO0FBRVQsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUM7SUFDdkUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLEVBQUUsQ0FBQztJQUNqRSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVkLDBCQUEwQjtBQUMxQixJQUFNLElBQUksR0FBRztJQUNYLEVBQUU7QUFDSixDQUFDLENBQUM7QUFFVyxRQUFBLGNBQWMsR0FBRyxVQUM1QixFQUE2QixFQUM3QixJQUFVLEVBQ1Ysb0JBQTRCO0lBRTVCLElBQU0sUUFBUSxHQUFHLHdCQUFVLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxvQkFBb0Isc0JBQUEsRUFBRSxDQUFDLENBQUM7SUFDNUQsSUFBTSxjQUFjLEdBQUcsY0FBTyxDQUFDLFFBQVEsRUFBSyxRQUFRLFVBQU8sQ0FBQyxDQUFDO0lBQzdELElBQUks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