'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _padStart = _interopDefault(require('lodash/padStart'));
var _repeat = _interopDefault(require('lodash/repeat'));

// X11 (“MIT”) Licensed. (See LICENSE.)
/**
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var get = function get(options) {
    return function (key, defaultValue) {
        return key in options ? options[key] : defaultValue;
    };
};

function lineNumbers(lines, options) {
    var getOption = get(options);
    var transform = getOption('transform', Function.prototype);
    var padding = getOption('padding', ' ');
    var before = getOption('before', ' ');
    var after = getOption('after', ' | ');
    var start = getOption('start', 1);
    var end = start + lines.length - 1;
    var width = String(end).length;
    return lines.map(function (line, index) {
        var number = start + index;
        var params = { before: before, number: number, width: width, after: after, line: line };
        transform(params);
        return params.before + _padStart(params.number, width, padding) + params.after + params.line;
    });
}

var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

function index (_ref) {
    var rawLines = _ref.rawLines,
        lineNumber = _ref.lineNumber,
        colNumber = _ref.colNumber,
        length = _ref.length;

    var lines = rawLines.split(NEWLINE),
        start = Math.max(lineNumber - 3, 0),
        end = Math.min(lineNumber + 3, lines.length);

    return lineNumbers(lines.slice(start, end), {
        start: start + 1,
        before: '  ',
        after: ' | ',
        transform: function transform(params) {
            if (params.number !== lineNumber) {
                return;
            }

            if (typeof colNumber === 'number') {
                params.line += '\n' + params.before + _repeat(' ', params.width) + params.after + _repeat(' ', colNumber) + _repeat('^', length);
            }

            params.before = params.before.replace(/^./, '>');
        }
    }).join('\n');
}

module.exports = index;
